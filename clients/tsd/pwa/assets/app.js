var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape2(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape2("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement2(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement2(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext6(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext4(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState10(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef4(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect12(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect3(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback8(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo9(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component2;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext6;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement2;
        exports.lazy = lazy;
        exports.memo = memo2;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback8;
        exports.useContext = useContext4;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect12;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect3;
        exports.useMemo = useMemo9;
        exports.useReducer = useReducer;
        exports.useRef = useRef4;
        exports.useState = useState10;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React17 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React17.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment5 = 7;
        var Mode5 = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment5:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode5:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React17.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl2 = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl2();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl2 = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root3) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root3);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root3) {
          return getHighestPriorityLanes(root3.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root3, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root3, lanes) {
          return (lanes & root3.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
          }
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          var memoizedUpdaters = root3.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root3, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root3) {
          var currentState = root3.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container2 = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container2, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container2 !== null) {
                    var parentNode = getClosestInstanceFromNode(container2);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container2 = container2.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement3(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected") ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container2.namespaceURI || null;
              type = container2.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container2, child) {
          var parentNode;
          if (container2.nodeType === COMMENT_NODE) {
            parentNode = container2.parentNode;
            parentNode.insertBefore(child, container2);
          } else {
            parentNode = container2;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container2._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container2, child, beforeChild) {
          if (container2.nodeType === COMMENT_NODE) {
            container2.parentNode.insertBefore(child, beforeChild);
          } else {
            container2.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container2, child) {
          if (container2.nodeType === COMMENT_NODE) {
            container2.parentNode.removeChild(child);
          } else {
            container2.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
          if (container2.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container2.parentNode, suspenseInstance);
          } else if (container2.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container2, suspenseInstance);
          }
          retryIfBlockedOn(container2);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container2) {
          if (container2.nodeType === ELEMENT_NODE) {
            container2.textContent = "";
          } else if (container2.nodeType === DOCUMENT_NODE) {
            if (container2.documentElement) {
              container2.removeChild(container2.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container2) {
          retryIfBlockedOn(container2);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component2 = node.type;
                  if (isContextProvider(Component2)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
              !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment5) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment5) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context) ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root3, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component2(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component2(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root3 = getWorkInProgressRoot();
          var identifierPrefix = root3.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  root3.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  if (root3 !== null) {
                    root3.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root3, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root3, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root3, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var render2 = Component2.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component2.type;
            if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component2.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component2.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component2.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component2.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root3 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          workInProgress2.type = Component2;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
          var resolvedProps = resolveDefaultProps(Component2, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
                workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
              }
              child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
              }
              child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
              }
              child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component2)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component2,
                resolveDefaultProps(Component2.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component2, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component2.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root3 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component2 = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment5:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode5:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment5:
            case Mode5:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root3 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root3 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root3, firstChild) {
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root3 = parentFiber.stateNode;
                        root3.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root3, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root3, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root3);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root3, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root3);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root3.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root3, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root3, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root3, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root3, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root3,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root3, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root3, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root3 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
          var current2 = root3.current;
          current2.lanes = lane;
          markRootUpdated(root3, lane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root3.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root3.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root3, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root3, lanes);
              var finishedWork = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root3, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root3, NoLanes);
                  markRootSuspended$1(root3, lanes);
                  ensureRootIsScheduled(root3, now());
                  throw _fatalError;
                }
              }
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function recoverFromConcurrentError(root3, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root3)) {
            var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root3.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root3, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root3, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root3, now());
            return null;
          }
          var exitStatus = renderRootSync(root3, lanes);
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushRoot(root3, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root3, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root3, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          var rootWorkInProgress = createWorkInProgress(root3.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root3, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (finishedWork === root3.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root3, finishedWork, lanes);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root3, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root3.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root3.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root3.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root3.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root3.current);
          commitPassiveMountEffects(root3, root3.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root3, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root3.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root3 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root3;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root3);
          {
            var stateNode = root3.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root3 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root3 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root3, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
          {
            if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component2) {
          if (typeof Component2 === "function") {
            return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
          } else if (Component2 !== void 0 && Component2 !== null) {
            var $$typeof = Component2.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode5;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment5, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        var ReactVersion = "18.3.1";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component2 = fiber.type;
            if (isContextProvider(Component2)) {
              return processChildContext(fiber, Component2, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root3.context = getContextForSubtree(null);
          var current2 = root3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root3, lane, eventTime);
          return root3;
        }
        function updateContainer(element, container2, parentComponent, callback) {
          {
            onScheduleRoot(container2, element);
          }
          var current$1 = container2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container2.context === null) {
            container2.context = context;
          } else {
            container2.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root3 = enqueueUpdate(current$1, update, lane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
            entangleTransitions(root3, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container2) {
          var containerFiber = container2.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root3 = fiber.stateNode;
              if (isRootDehydrated(root3)) {
                var lanes = getHighestPriorityPendingLanes(root3);
                flushRoot(root3, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (root3 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container2 = root3.containerInfo;
            if (container2.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container2) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          if (root3 !== null) {
            this._internalRoot = null;
            var container2 = root3.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root3, null, null);
            });
            unmarkContainerAsRoot(container2);
          }
        };
        function createRoot2(container2, options2) {
          if (!isValidContainer(container2)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container2);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root3 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container2);
          var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root3);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container2, initialChildren, options2) {
          if (!isValidContainer(container2)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container2);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container2);
          listenToAllSupportedEvents(container2);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root3);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container2) {
          {
            if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container2)) {
              if (container2._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container2) {
            if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container2) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container2._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container2);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container2) {
          if (!container2) {
            return null;
          }
          if (container2.nodeType === DOCUMENT_NODE) {
            return container2.documentElement;
          } else {
            return container2.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            var root3 = createHydrationContainer(
              initialChildren,
              callback,
              container2,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container2._reactRootContainer = root3;
            markContainerAsRoot(root3.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root3;
          } else {
            var rootSibling;
            while (rootSibling = container2.lastChild) {
              container2.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container2,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container2._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container2);
            var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container2);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container2._reactRootContainer;
          var root3;
          if (!maybeRoot) {
            root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
          } else {
            root3 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root3, parentComponent, callback);
          }
          return getPublicRootInstance(root3);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container2, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
        }
        function render(element, container2, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container2) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container2)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container2._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container2);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                container2._reactRootContainer = null;
                unmarkContainerAsRoot(container2);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container2) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container2, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container2, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container2, options2);
        }
        function hydrateRoot$1(container2, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container2, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports.createRoot = m.createRoot;
      exports.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React17 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React17.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement2(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            {
              if (hasOwnProperty.call(props, "key")) {
                var componentName = getComponentNameFromType(type);
                var keys = Object.keys(props).filter(function(k) {
                  return k !== "key";
                });
                var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                  var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                  error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                  didWarnAboutKeySpread[componentName + beforeExample] = true;
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx15 = jsxWithValidationDynamic;
        var jsxs10 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx15;
        exports.jsxs = jsxs10;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  }
});

// src/main.jsx
var import_react14 = __toESM(require_react(), 1);
var import_client = __toESM(require_client(), 1);

// src/App.jsx
var import_react13 = __toESM(require_react(), 1);

// node_modules/react-router-dom/dist/index.js
var React2 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/react-router/dist/index.js
var React = __toESM(require_react());

// node_modules/@remix-run/router/dist/router.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
var PopStateEventType = "popstate";
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index) {
  return {
    usr: location.state,
    key: location.key,
    idx: index
  };
}
function createLocation(current, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState(_extends({}, globalHistory.state, {
      idx: index
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to, state) {
    action = Action.Push;
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex() + 1;
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace2(to, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex();
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  return matchRoutesImpl(routes, locationArg, basename, false);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded, allowPartial);
  }
  return matches;
}
function convertRouteMatchToUiMatch(match, loaderData) {
  let {
    route,
    pathname,
    params
  } = match;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
}
var paramRe = /^:[\w-]+$/;
var dynamicSegmentValue = 3;
var indexRouteValue = 2;
var emptySegmentValue = 1;
var staticSegmentValue = 10;
var splatPenalty = -2;
var isSplat = (s) => s === "*";
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial) {
  if (allowPartial === void 0) {
    allowPartial = false;
  }
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: false
      }, remainingPathname);
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce((memo2, _ref, index) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index];
    if (isOptional && !value) {
      memo2[paramName] = void 0;
    } else {
      memo2[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo2;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
  }
  return pathMatches.map((match) => match.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = _extends({}, toArg);
    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
var validMutationMethodsArr = ["post", "put", "patch", "delete"];
var validMutationMethods = new Set(validMutationMethodsArr);
var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
var validRequestMethods = new Set(validRequestMethodsArr);
var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

// node_modules/react-router/dist/index.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var DataRouterContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  DataRouterContext.displayName = "DataRouter";
}
var DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  DataRouterStateContext.displayName = "DataRouterState";
}
var AwaitContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  AwaitContext.displayName = "Await";
}
var NavigationContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  NavigationContext.displayName = "Navigation";
}
var LocationContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  LocationContext.displayName = "Location";
}
var RouteContext = /* @__PURE__ */ React.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
if (true) {
  RouteContext.displayName = "Route";
}
var RouteErrorContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  RouteErrorContext.displayName = "RouteError";
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    hash,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return React.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  return React.useContext(LocationContext).location;
}
var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
function useIsomorphicLayoutEffect(cb) {
  let isStatic = React.useContext(NavigationContext).static;
  if (!isStatic) {
    React.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = React.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let dataRouterContext = React.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    matches
  } = React.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = React.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current) return;
    if (typeof to === "number") {
      navigator2.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
var OutletContext = /* @__PURE__ */ React.createContext(null);
function useOutlet(context) {
  let outlet = React.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ React.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useParams() {
  let {
    matches
  } = React.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = React.useContext(NavigationContext);
  let {
    matches
  } = React.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let {
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = React.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (true) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  if (true) {
    true ? warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
    true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
  }
  let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
    params: Object.assign({}, parentParams, match.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
    ]),
    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      value: {
        location: _extends2({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  if (true) {
    console.error("Error handled by React Router default ErrorBoundary:", error);
    devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
      style: codeStyles
    }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
      style: codeStyles
    }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
var defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
var RenderErrorBoundary = class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
};
function RenderedRoute(_ref) {
  let {
    routeContext,
    match,
    children
  } = _ref;
  let dataRouterContext = React.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _future;
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
    !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index === 0) {
          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ React.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ React.createElement(RenderedRoute, {
        match,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
  DataRouterHook3["UseBlocker"] = "useBlocker";
  DataRouterHook3["UseRevalidator"] = "useRevalidator";
  DataRouterHook3["UseNavigateStable"] = "useNavigate";
  return DataRouterHook3;
}(DataRouterHook || {});
var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
  DataRouterStateHook3["UseBlocker"] = "useBlocker";
  DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook3["UseActionData"] = "useActionData";
  DataRouterStateHook3["UseRouteError"] = "useRouteError";
  DataRouterStateHook3["UseNavigation"] = "useNavigation";
  DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook3["UseMatches"] = "useMatches";
  DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook3["UseRouteId"] = "useRouteId";
  return DataRouterStateHook3;
}(DataRouterStateHook || {});
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React.useContext(DataRouterContext);
  !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React.useContext(DataRouterStateContext);
  !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = React.useContext(RouteContext);
  !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(DataRouterStateHook.UseRouteId);
}
function useNavigation() {
  let state = useDataRouterState(DataRouterStateHook.UseNavigation);
  return state.navigation;
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React.useMemo(() => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
}
function useRouteError() {
  var _state$errors;
  let error = React.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseNavigateStable);
  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
  let activeRef = React.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current) return;
    if (typeof to === "number") {
      router.navigate(to);
    } else {
      router.navigate(to, _extends2({
        fromRouteId: id
      }, options));
    }
  }, [router, id]);
  return navigate;
}
var alreadyWarned$1 = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned$1[key]) {
    alreadyWarned$1[key] = true;
    true ? warning(false, message) : void 0;
  }
}
var alreadyWarned = {};
function warnOnce(key, message) {
  if (!alreadyWarned[message]) {
    alreadyWarned[message] = true;
    console.warn(message);
  }
}
var logDeprecation = (flag, msg, link) => warnOnce(flag, "\u26A0\uFE0F React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
function logV6DeprecationWarnings(renderFuture, routerFuture) {
  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) {
    logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
  }
  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && (!routerFuture || routerFuture.v7_relativeSplatPath === void 0)) {
    logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
  }
  if (routerFuture) {
    if (routerFuture.v7_fetcherPersist === void 0) {
      logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
    }
    if (routerFuture.v7_normalizeFormMethod === void 0) {
      logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
    }
    if (routerFuture.v7_partialHydration === void 0) {
      logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
    }
    if (routerFuture.v7_skipActionErrorRevalidation === void 0) {
      logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
    }
  }
}
var START_TRANSITION = "startTransition";
var startTransitionImpl = React[START_TRANSITION];
function Navigate(_ref4) {
  let {
    to,
    replace: replace2,
    state,
    relative
  } = _ref4;
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let {
    future,
    static: isStatic
  } = React.useContext(NavigationContext);
  true ? warning(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.") : void 0;
  let {
    matches
  } = React.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
  let jsonPath = JSON.stringify(path);
  React.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace: replace2,
    state,
    relative
  }), [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  true ? invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends2({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  true ? warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
var neverSettledPromise = new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  React.Children.forEach(children, (element, index) => {
    if (!/* @__PURE__ */ React.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element.type === React.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? true ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? true ? invariant(false, "An index route cannot have child routes.") : invariant(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}

// node_modules/react-router-dom/dist/index.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var defaultMethod = "get";
var defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function createSearchParams(init) {
  if (init === void 0) {
    init = "";
  }
  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo2, key) => {
    let value = init[key];
    return memo2.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams) {
    defaultSearchParams.forEach((_, key) => {
      if (!searchParams.has(key)) {
        defaultSearchParams.getAll(key).forEach((value) => {
          searchParams.append(key, value);
        });
      }
    });
  }
  return searchParams;
}
var _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let {
        name,
        type,
        value
      } = target;
      if (type === "image") {
        let prefix = name ? name + "." : "";
        formData.append(prefix + "x", "0");
        formData.append(prefix + "y", "0");
      } else if (name) {
        formData.append(name, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return {
    action,
    method: method.toLowerCase(),
    encType,
    formData,
    body
  };
}
var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"];
var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"];
var _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
var REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e) {
}
var ViewTransitionContext = /* @__PURE__ */ React2.createContext({
  isTransitioning: false
});
if (true) {
  ViewTransitionContext.displayName = "ViewTransition";
}
var FetchersContext = /* @__PURE__ */ React2.createContext(/* @__PURE__ */ new Map());
if (true) {
  FetchersContext.displayName = "Fetchers";
}
var START_TRANSITION2 = "startTransition";
var startTransitionImpl2 = React2[START_TRANSITION2];
var FLUSH_SYNC = "flushSync";
var flushSyncImpl = ReactDOM[FLUSH_SYNC];
var USE_ID = "useId";
var useIdImpl = React2[USE_ID];
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = React2.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
  React2.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function HistoryRouter(_ref6) {
  let {
    basename,
    children,
    future,
    history
  } = _ref6;
  let [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
  React2.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
if (true) {
  HistoryRouter.displayName = "unstable_HistoryRouter";
}
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref7, ref) {
  let {
    onClick,
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to,
    preventScrollReset,
    viewTransition
  } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
  let {
    basename
  } = React2.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
    absoluteHref = to;
    if (isBrowser) {
      try {
        let currentUrl = new URL(window.location.href);
        let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
        let path = stripBasename(targetUrl.pathname, basename);
        if (targetUrl.origin === currentUrl.origin && path != null) {
          to = path + targetUrl.search + targetUrl.hash;
        } else {
          isExternal = true;
        }
      } catch (e) {
        true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
      }
    }
  }
  let href = useHref(to, {
    relative
  });
  let internalOnClick = useLinkClickHandler(to, {
    replace: replace2,
    state,
    target,
    preventScrollReset,
    relative,
    viewTransition
  });
  function handleClick(event) {
    if (onClick) onClick(event);
    if (!event.defaultPrevented) {
      internalOnClick(event);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref,
      target
    }))
  );
});
if (true) {
  Link.displayName = "Link";
}
var NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref8, ref) {
  let {
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    viewTransition,
    children
  } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
  let path = useResolvedPath(to, {
    relative: rest.relative
  });
  let location = useLocation();
  let routerState = React2.useContext(DataRouterStateContext);
  let {
    navigator: navigator2,
    basename
  } = React2.useContext(NavigationContext);
  let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useViewTransitionState(path) && viewTransition === true;
  let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
  let locationPathname = location.pathname;
  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
  if (!caseSensitive) {
    locationPathname = locationPathname.toLowerCase();
    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
    toPathname = toPathname.toLowerCase();
  }
  if (nextLocationPathname && basename) {
    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
  }
  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
  let renderProps = {
    isActive,
    isPending,
    isTransitioning
  };
  let ariaCurrent = isActive ? ariaCurrentProp : void 0;
  let className;
  if (typeof classNameProp === "function") {
    className = classNameProp(renderProps);
  } else {
    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
  }
  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
  return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
    "aria-current": ariaCurrent,
    className,
    ref,
    style,
    to,
    viewTransition
  }), typeof children === "function" ? children(renderProps) : children);
});
if (true) {
  NavLink.displayName = "NavLink";
}
var Form = /* @__PURE__ */ React2.forwardRef((_ref9, forwardedRef) => {
  let {
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace2,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    viewTransition
  } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
  let submit = useSubmit();
  let formAction = useFormAction(action, {
    relative
  });
  let formMethod = method.toLowerCase() === "get" ? "get" : "post";
  let submitHandler = (event) => {
    onSubmit && onSubmit(event);
    if (event.defaultPrevented) return;
    event.preventDefault();
    let submitter = event.nativeEvent.submitter;
    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
    submit(submitter || event.currentTarget, {
      fetcherKey,
      method: submitMethod,
      navigate,
      replace: replace2,
      state,
      relative,
      preventScrollReset,
      viewTransition
    });
  };
  return /* @__PURE__ */ React2.createElement("form", _extends3({
    ref: forwardedRef,
    method: formMethod,
    action: formAction,
    onSubmit: reloadDocument ? onSubmit : submitHandler
  }, props));
});
if (true) {
  Form.displayName = "Form";
}
function ScrollRestoration(_ref10) {
  let {
    getKey,
    storageKey
  } = _ref10;
  useScrollRestoration({
    getKey,
    storageKey
  });
  return null;
}
if (true) {
  ScrollRestoration.displayName = "ScrollRestoration";
}
var DataRouterHook2;
(function(DataRouterHook3) {
  DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook3["UseSubmit"] = "useSubmit";
  DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook3["UseFetcher"] = "useFetcher";
  DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook2 || (DataRouterHook2 = {}));
var DataRouterStateHook2;
(function(DataRouterStateHook3) {
  DataRouterStateHook3["UseFetcher"] = "useFetcher";
  DataRouterStateHook3["UseFetchers"] = "useFetchers";
  DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
  return state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to, {
    relative
  });
  return React2.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to, {
        replace: replace2,
        state,
        preventScrollReset,
        relative,
        viewTransition
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
}
function useSearchParams(defaultInit) {
  true ? warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.") : void 0;
  let defaultSearchParamsRef = React2.useRef(createSearchParams(defaultInit));
  let hasSetSearchParamsRef = React2.useRef(false);
  let location = useLocation();
  let searchParams = React2.useMemo(() => (
    // Only merge in the defaults if we haven't yet called setSearchParams.
    // Once we call that we want those to take precedence, otherwise you can't
    // remove a param with setSearchParams({}) if it has an initial value
    getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
  ), [location.search]);
  let navigate = useNavigate();
  let setSearchParams = React2.useCallback((nextInit, navigateOptions) => {
    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = true;
    navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function validateClientSideSubmission() {
  if (typeof document === "undefined") {
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
  }
}
var fetcherId = 0;
var getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
function useSubmit() {
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseSubmit);
  let {
    basename
  } = React2.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React2.useCallback(function(target, options) {
    if (options === void 0) {
      options = {};
    }
    validateClientSideSubmission();
    let {
      action,
      method,
      encType,
      formData,
      body
    } = getFormSubmissionInfo(target, basename);
    if (options.navigate === false) {
      let key = options.fetcherKey || getUniqueFetcherId();
      router.fetch(key, currentRouteId, options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        flushSync: options.flushSync
      });
    } else {
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId,
        flushSync: options.flushSync,
        viewTransition: options.viewTransition
      });
    }
  }, [router, basename, currentRouteId]);
}
function useFormAction(action, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    basename
  } = React2.useContext(NavigationContext);
  let routeContext = React2.useContext(RouteContext);
  !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
  let [match] = routeContext.matches.slice(-1);
  let path = _extends3({}, useResolvedPath(action ? action : ".", {
    relative
  }));
  let location = useLocation();
  if (action == null) {
    path.search = location.search;
    let params = new URLSearchParams(path.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v) => v === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? "?" + qs : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
var savedScrollPositions = {};
function useScrollRestoration(_temp4) {
  let {
    getKey,
    storageKey
  } = _temp4 === void 0 ? {} : _temp4;
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
  let {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
  let {
    basename
  } = React2.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React2.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(React2.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location, matches) : null) || location.key;
      savedScrollPositions[key] = window.scrollY;
    }
    try {
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
    } catch (error) {
      true ? warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
    }
    window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location, matches]));
  if (typeof document !== "undefined") {
    React2.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    React2.useLayoutEffect(() => {
      let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
        // Strip the basename to match useLocation()
        _extends3({}, location2, {
          pathname: stripBasename(location2.pathname, basename) || location2.pathname
        }),
        matches2
      ) : getKey;
      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename, getKey]);
    React2.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function useViewTransitionState(to, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let vtContext = React2.useContext(ViewTransitionContext);
  !(vtContext != null) ? true ? invariant(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
  let {
    basename
  } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
  let path = useResolvedPath(to, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}

// src/components/AppLayout.jsx
var import_react7 = __toESM(require_react(), 1);

// src/context/AppContext.jsx
var import_react = __toESM(require_react(), 1);

// src/lib/api.js
var CI = (() => {
  const segments = window.location.pathname.split("/").filter(Boolean);
  const fromPath = segments[0] === "external" ? segments[1] : null;
  return (window.__CI__ || new URLSearchParams(window.location.search).get("ci") || fromPath || "").trim();
})();
function getBasePath() {
  const segments = window.location.pathname.split("/").filter(Boolean);
  if (segments[0] === "external" && segments[1]) {
    return `/external/${segments[1]}/`;
  }
  return window.location.pathname.endsWith("/") ? window.location.pathname : `${window.location.pathname}/`;
}
var BASE = getBasePath();
function assetUrl(path) {
  return new URL(`?assets=${path}`, window.location.href).toString();
}
async function api(action, params = {}) {
  const url = `${BASE}external`;
  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ action, params })
  });
  let data = {};
  try {
    data = await response.json();
  } catch (err) {
    console.warn("[api] failed to parse json", err);
  }
  return { ok: response.ok, status: response.status, data };
}
function registerSW() {
  if (!("serviceWorker" in navigator)) return;
  const swUrl = new URL("?pwa=sw", window.location.href).toString();
  navigator.serviceWorker.register(swUrl, { scope: BASE }).catch((err) => {
    console.warn("[sw] register failed", err);
  });
}
function isStandalone() {
  return window.matchMedia?.("(display-mode: standalone)").matches || window.navigator.standalone === true;
}

// src/lib/utils.js
function esc(value) {
  if (value == null) return "";
  return String(value).replace(/[&<>"']/g, (m) => ({
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  })[m]);
}
function fmtNum(value, options = {}) {
  const v = Number(value ?? 0);
  if (!Number.isFinite(v)) return "0";
  return v.toLocaleString("ru-RU", {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
    ...options
  });
}
function fmtMoney(value, locale = "ru-RU", currency = "UZS") {
  const v = Number(value ?? 0);
  return v.toLocaleString(locale, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
    currency,
    style: "currency"
  });
}
function toNumber(value) {
  if (value == null || value === "") return 0;
  const normalized = String(value).replace(",", ".");
  const parsed = Number.parseFloat(normalized);
  return Number.isFinite(parsed) ? parsed : 0;
}
function unixToLocal(ts) {
  if (!ts) return "";
  const d = new Date(Number(ts) * 1e3);
  const pad = (n) => String(n).padStart(2, "0");
  return `${pad(d.getDate())}.${pad(d.getMonth() + 1)}.${d.getFullYear()} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
}

// src/context/AppContext.jsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var AppContext = (0, import_react.createContext)(null);
function setAppTitle(text) {
  if (!text) return;
  try {
    document.title = text;
  } catch (err) {
    console.warn("[title] failed to set", err);
  }
}
function AppProvider({ children }) {
  const value = (0, import_react.useMemo)(() => ({
    ci: CI,
    api,
    assetUrl,
    registerSW,
    fmtMoney,
    fmtNum,
    toNumber,
    unixToLocal,
    esc,
    setAppTitle
  }), []);
  (0, import_react.useEffect)(() => {
    window.__CI__ = CI;
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AppContext.Provider, { value, children });
}
function useApp() {
  const ctx = (0, import_react.useContext)(AppContext);
  if (!ctx) {
    throw new Error("useApp must be used within AppProvider");
  }
  return ctx;
}

// src/context/I18nContext.jsx
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var SUPPORTED = ["ru", "en", "uz"];
var STORAGE_KEY = "tsd_locale";
function normLocale(locale) {
  if (!locale) return "ru";
  const lower = String(locale).toLowerCase();
  const direct = SUPPORTED.find((lang) => lower === lang || lower.startsWith(`${lang}-`));
  return direct || "ru";
}
function resolveInitialLocale() {
  const params = new URLSearchParams(window.location.search);
  const fromQuery = params.get("lang");
  const stored = window.localStorage.getItem(STORAGE_KEY);
  const nav = navigator.languages && navigator.languages[0] || navigator.language || "ru";
  return normLocale(fromQuery || stored || nav);
}
async function fetchMessages(assetUrl2, locale) {
  const url = assetUrl2(`i18n/${locale}.json`);
  const res = await fetch(url, { cache: "no-cache" });
  if (!res.ok) {
    throw new Error(`i18n: unable to load ${locale}`);
  }
  return res.json();
}
var I18nContext = (0, import_react2.createContext)({
  locale: "ru",
  t: (key) => key,
  setLocale: async () => {
  },
  fmt: {
    money: (v) => v,
    number: (v) => v,
    unix: (ts) => ts
  }
});
function I18nProvider({ children }) {
  const { assetUrl: assetUrl2, setAppTitle: setAppTitle2 } = useApp();
  const [locale, setLocale] = (0, import_react2.useState)(() => resolveInitialLocale());
  const [messages, setMessages] = (0, import_react2.useState)({});
  const [ready, setReady] = (0, import_react2.useState)(false);
  const load = (0, import_react2.useCallback)(async (lc) => {
    const normalized = normLocale(lc);
    const loaded = await fetchMessages(assetUrl2, normalized);
    setMessages(loaded);
    setLocale(normalized);
    document.documentElement.lang = normalized;
    window.localStorage.setItem(STORAGE_KEY, normalized);
    const title = loaded["app.title"] || "TSD";
    setAppTitle2(title);
    document.dispatchEvent(new CustomEvent("i18n:change"));
  }, [assetUrl2, setAppTitle2]);
  (0, import_react2.useEffect)(() => {
    load(locale).finally(() => setReady(true));
  }, []);
  const translate = (0, import_react2.useCallback)((key, vars) => {
    const template = messages[key];
    if (!template) return key;
    if (!vars) return template;
    return Object.entries(vars).reduce(
      (acc, [k, v]) => acc.replaceAll(`{${k}}`, String(v)),
      template
    );
  }, [messages]);
  const fmt = (0, import_react2.useMemo)(() => ({
    money(value2, currency = "UZS") {
      return new Intl.NumberFormat(locale, {
        style: "currency",
        currency,
        maximumFractionDigits: 2,
        minimumFractionDigits: 2
      }).format(Number(value2 || 0));
    },
    number(value2, options = {}) {
      return new Intl.NumberFormat(locale, options).format(Number(value2 || 0));
    },
    unix(ts) {
      if (!ts) return "";
      return new Intl.DateTimeFormat(locale, {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
      }).format(new Date(Number(ts) * 1e3));
    }
  }), [locale]);
  const value = (0, import_react2.useMemo)(() => ({
    locale,
    t: translate,
    setLocale: load,
    fmt
  }), [fmt, load, locale, translate]);
  if (!ready) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(I18nContext.Provider, { value, children });
}
function useI18n() {
  const ctx = import_react2.default.useContext(I18nContext);
  if (!ctx) {
    throw new Error("useI18n must be used within I18nProvider");
  }
  return ctx;
}

// src/components/Clock.jsx
var import_react3 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function formatTime(date) {
  const pad = (n) => String(n).padStart(2, "0");
  return `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;
}
function Clock() {
  const [time, setTime] = (0, import_react3.useState)(() => formatTime(/* @__PURE__ */ new Date()));
  (0, import_react3.useEffect)(() => {
    setTime(formatTime(/* @__PURE__ */ new Date()));
    const id = window.setInterval(() => setTime(formatTime(/* @__PURE__ */ new Date())), 1e3);
    return () => window.clearInterval(id);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { id: "now", className: "time", "aria-live": "polite", children: time });
}

// src/components/InstallButton.jsx
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
function InstallButton({ label }) {
  const [promptEvent, setPromptEvent] = (0, import_react4.useState)(null);
  const [visible, setVisible] = (0, import_react4.useState)(false);
  (0, import_react4.useEffect)(() => {
    if (isStandalone()) return void 0;
    const handler = (event) => {
      event.preventDefault();
      setPromptEvent(event);
      setVisible(true);
    };
    const installed = () => {
      setPromptEvent(null);
      setVisible(false);
    };
    window.addEventListener("beforeinstallprompt", handler);
    window.addEventListener("appinstalled", installed);
    return () => {
      window.removeEventListener("beforeinstallprompt", handler);
      window.removeEventListener("appinstalled", installed);
    };
  }, []);
  const handleClick = (0, import_react4.useCallback)(async () => {
    if (!promptEvent) return;
    setVisible(false);
    promptEvent.prompt();
    try {
      await promptEvent.userChoice;
    } finally {
      setPromptEvent(null);
    }
  }, [promptEvent]);
  if (!visible || isStandalone()) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
    "button",
    {
      id: "btn-install",
      type: "button",
      className: "btn small",
      onClick: handleClick,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("i", { className: "fa-solid fa-download", "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { id: "btn-install-txt", children: label || "Install" })
      ]
    }
  );
}

// src/components/LanguageSwitcher.jsx
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var OPTIONS = [
  { value: "ru", label: "RU" },
  { value: "en", label: "EN" },
  { value: "uz", label: "UZ" }
];
function LanguageSwitcher() {
  const { locale, setLocale } = useI18n();
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "lang-switcher", children: [
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("label", { className: "sr-only", htmlFor: "lang-select", children: "Language" }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      "select",
      {
        id: "lang-select",
        className: "lang-select",
        value: locale,
        onChange: (event) => setLocale(event.target.value),
        "aria-label": "Language",
        children: OPTIONS.map((option) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("option", { value: option.value, children: option.label }, option.value))
      }
    )
  ] });
}

// src/components/NavBackButton.jsx
var import_react6 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function NavBackButton({ onClick, label }) {
  if (!onClick) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    "button",
    {
      id: "nav-back",
      type: "button",
      className: "btn icon clear",
      "aria-label": label || "\u041D\u0430\u0437\u0430\u0434",
      title: label || "\u041D\u0430\u0437\u0430\u0434",
      onClick,
      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("i", { className: "fa-solid fa-chevron-left", "aria-hidden": "true" })
    }
  );
}

// src/components/AppLayout.jsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function AppLayout() {
  const { registerSW: registerSW2 } = useApp();
  const { t } = useI18n();
  const location = useLocation();
  const navigate = useNavigate();
  (0, import_react7.useEffect)(() => {
    registerSW2();
  }, [registerSW2]);
  const showBack = location.pathname !== "/home";
  const handleBack = () => {
    if (window.history.length > 1) {
      navigate(-1);
    } else if (location.pathname.startsWith("/doc")) {
      navigate("/docs", { replace: true });
    } else {
      navigate("/home", { replace: true });
    }
  };
  const backLabelRaw = t("nav.back");
  const backLabel = backLabelRaw === "nav.back" ? "\u041D\u0430\u0437\u0430\u0434" : backLabelRaw;
  const installLabelRaw = t("install_app");
  const installLabel = installLabelRaw === "install_app" ? "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C" : installLabelRaw;
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "app-shell", children: [
    /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("header", { className: "appbar", children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "left", children: [
        showBack ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(NavBackButton, { onClick: handleBack, label: backLabel }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(LanguageSwitcher, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "right", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Clock, {}),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InstallButton, { label: installLabel }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { id: "regos-login" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("main", { className: "container content", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Outlet, {}) }) })
  ] });
}

// src/pages/HomePage.jsx
var import_react9 = __toESM(require_react(), 1);

// src/context/ToastContext.jsx
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var ToastContext = (0, import_react8.createContext)({
  showToast: () => {
  },
  hideToast: () => {
  }
});
function ToastProvider({ children }) {
  const [toast, setToast] = (0, import_react8.useState)(null);
  const hideToast = (0, import_react8.useCallback)(() => setToast(null), []);
  const showToast = (0, import_react8.useCallback)((message, options = {}) => {
    if (!message) return;
    const { type = "success", duration = 1800 } = options;
    setToast({ message, type });
    if (duration > 0) {
      window.setTimeout(() => {
        setToast((current) => current && current.message === message ? null : current);
      }, duration);
    }
  }, []);
  const value = (0, import_react8.useMemo)(() => ({ showToast, hideToast }), [showToast, hideToast]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(ToastContext.Provider, { value, children: [
    children,
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      "div",
      {
        id: "toast",
        className: `toast${toast ? " show" : ""}${toast?.type === "error" ? " error" : ""}`,
        role: "status",
        "aria-live": "polite",
        children: toast?.message || ""
      }
    )
  ] });
}
function useToast() {
  const ctx = import_react8.default.useContext(ToastContext);
  if (!ctx) {
    throw new Error("useToast must be used within ToastProvider");
  }
  return ctx;
}

// src/pages/HomePage.jsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
function HomePage() {
  const { t, locale } = useI18n();
  const { setAppTitle: setAppTitle2 } = useApp();
  const { showToast } = useToast();
  const navigate = useNavigate();
  (0, import_react9.useEffect)(() => {
    const raw = t("app.title");
    const title = raw === "app.title" ? "TSD" : raw || "TSD";
    setAppTitle2(title);
  }, [locale, setAppTitle2, t]);
  const soonLabelRaw = t("soon");
  const soonLabel = soonLabelRaw === "soon" ? "\u0421\u043A\u043E\u0440\u043E" : soonLabelRaw || "\u0421\u043A\u043E\u0440\u043E";
  const soon = () => showToast(soonLabel, { duration: 1500, type: "info" });
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("section", { className: "stack", id: "home", children: [
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h1", { id: "home-title", children: t("main_menu") === "main_menu" ? "\u0413\u043B\u0430\u0432\u043D\u043E\u0435 \u043C\u0435\u043D\u044E" : t("main_menu") || "\u0413\u043B\u0430\u0432\u043D\u043E\u0435 \u043C\u0435\u043D\u044E" }),
    /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "button",
        {
          id: "btn-doc-purchase",
          type: "button",
          className: "btn block",
          onClick: () => navigate("/docs"),
          children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { id: "btn-doc-purchase-txt", children: t("doc_purchase") === "doc_purchase" ? "\u041F\u043E\u0441\u0442\u0443\u043F\u043B\u0435\u043D\u0438\u0435 \u043E\u0442 \u043A\u043E\u043D\u0442\u0440\u0430\u0433\u0435\u043D\u0442\u0430" : t("doc_purchase") || "\u041F\u043E\u0441\u0442\u0443\u043F\u043B\u0435\u043D\u0438\u0435 \u043E\u0442 \u043A\u043E\u043D\u0442\u0440\u0430\u0433\u0435\u043D\u0442\u0430" })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "button",
        {
          id: "btn-doc-sales",
          type: "button",
          className: "btn block ghost",
          onClick: soon,
          children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "row", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { id: "btn-doc-sales-txt", children: t("doc_sales") === "doc_sales" ? "\u041E\u0442\u0433\u0440\u0443\u0437\u043A\u0430 \u043A\u043E\u043D\u0442\u0440\u0430\u0433\u0435\u043D\u0442\u0443" : t("doc_sales") || "\u041E\u0442\u0433\u0440\u0443\u0437\u043A\u0430 \u043A\u043E\u043D\u0442\u0440\u0430\u0433\u0435\u043D\u0442\u0443" }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "pill", id: "pill-sales", children: soonLabel })
          ] })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "button",
        {
          id: "btn-doc-inventory",
          type: "button",
          className: "btn block ghost",
          onClick: soon,
          children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "row", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { id: "btn-doc-inventory-txt", children: t("doc_inventory") === "doc_inventory" ? "\u0418\u043D\u0432\u0435\u043D\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044F" : t("doc_inventory") || "\u0418\u043D\u0432\u0435\u043D\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044F" }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "pill", id: "pill-inventory", children: soonLabel })
          ] })
        }
      )
    ] })
  ] });
}

// src/pages/DocsPage.jsx
var import_react10 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
function DocsPage() {
  const { api: api2, unixToLocal: unixToLocal2, setAppTitle: setAppTitle2 } = useApp();
  const { t, locale } = useI18n();
  const [searchParams, setSearchParams] = useSearchParams();
  const navigate = useNavigate();
  const page = Math.max(1, Number.parseInt(searchParams.get("page") || "1", 10) || 1);
  const query = searchParams.get("q") || "";
  const [inputValue, setInputValue] = (0, import_react10.useState)(query);
  const [items, setItems] = (0, import_react10.useState)([]);
  const [totalPages, setTotalPages] = (0, import_react10.useState)(page);
  const [loading, setLoading] = (0, import_react10.useState)(false);
  const [error, setError] = (0, import_react10.useState)(null);
  (0, import_react10.useEffect)(() => {
    setInputValue(query);
  }, [query]);
  (0, import_react10.useEffect)(() => {
    const title = t("docs.title") || "\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u044B \u0437\u0430\u043A\u0443\u043F\u043A\u0438";
    setAppTitle2(`${t("app.title") || "TSD"} \u2022 ${title}`);
  }, [locale, setAppTitle2, t]);
  const fetchDocs = (0, import_react10.useCallback)(async () => {
    setLoading(true);
    setError(null);
    try {
      const { data } = await api2("purchase_list", {
        page,
        page_size: PAGE_SIZE,
        query
      });
      const received = data?.result?.items || [];
      setItems(received);
      const hasMore = received.length === PAGE_SIZE;
      setTotalPages(hasMore ? page + 1 : page);
    } catch (err) {
      setError(err);
      setItems([]);
    } finally {
      setLoading(false);
    }
  }, [api2, page, query]);
  (0, import_react10.useEffect)(() => {
    fetchDocs();
  }, [fetchDocs]);
  const updateSearchParams = (nextPage, nextQuery = query) => {
    const params = new URLSearchParams();
    if (nextPage > 1) params.set("page", String(nextPage));
    if (nextQuery) params.set("q", nextQuery);
    setSearchParams(params);
  };
  const handleSearchSubmit = (event) => {
    event.preventDefault();
    updateSearchParams(1, inputValue.trim());
  };
  const handlePrev = () => {
    if (page > 1) updateSearchParams(page - 1, query);
  };
  const handleNext = () => {
    if (page < totalPages) updateSearchParams(page + 1, query);
  };
  const statusLabel = (0, import_react10.useCallback)((doc) => {
    const normalize = (key, fallback) => {
      const value = t(key);
      return value === key ? fallback : value;
    };
    const parts = [];
    parts.push(doc.performed ? normalize("docs.status.performed", "\u043F\u0440\u043E\u0432\u0435\u0434\u0451\u043D") : normalize("docs.status.new", "\u043D\u043E\u0432\u044B\u0439"));
    if (doc.blocked) parts.push(normalize("docs.status.blocked", "\u0431\u043B\u043E\u043A."));
    return parts.filter(Boolean).join(" \u2022 ");
  }, [t]);
  const nothingLabel = (0, import_react10.useMemo)(() => t("common.nothing") || "\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E", [t]);
  const backLabel = (0, import_react10.useMemo)(() => {
    const value = t("nav.back");
    return value === "nav.back" ? "\u041D\u0430\u0437\u0430\u0434" : value;
  }, [t]);
  const nextLabel = (0, import_react10.useMemo)(() => {
    const value = t("nav.next");
    return value === "nav.next" ? "\u0412\u043F\u0435\u0440\u0451\u0434" : value;
  }, [t]);
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("section", { className: "stack", id: "docs", children: [
    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "row row-start", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h1", { id: "docs-title", children: t("docs.title") || "\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u044B \u0437\u0430\u043A\u0443\u043F\u043A\u0438" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("form", { className: "input-row", onSubmit: handleSearchSubmit, role: "search", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "input",
        {
          id: "search-docs",
          type: "search",
          value: inputValue,
          placeholder: t("docs.search.placeholder") || "\u041F\u043E\u0438\u0441\u043A \u043F\u043E \u043D\u043E\u043C\u0435\u0440\u0443 / \u043F\u043E\u0441\u0442\u0430\u0432\u0449\u0438\u043A\u0443...",
          onChange: (event) => setInputValue(event.target.value)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "button",
        {
          id: "btn-docs-refresh",
          type: "button",
          className: "btn icon ghost",
          onClick: fetchDocs,
          "aria-label": t("docs.refresh") || "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",
          title: t("docs.refresh") || "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",
          children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("i", { className: "fa-solid fa-rotate-right", "aria-hidden": "true" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("span", { id: "page-indicator", className: "muted", children: [
        page,
        " / ",
        totalPages
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "cluster", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { id: "prev-page", type: "button", className: "btn small ghost", onClick: handlePrev, disabled: page <= 1, children: backLabel }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("button", { id: "next-page", type: "button", className: "btn small ghost", onClick: handleNext, disabled: page >= totalPages, children: nextLabel })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { id: "docs-list", className: "list", "aria-live": "polite", children: [
      loading && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "muted", children: t("common.loading") || "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430..." }),
      !loading && error && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "muted", children: String(error.message || error) }),
      !loading && !error && items.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "muted", children: nothingLabel }),
      !loading && !error && items.map((doc) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "button",
        {
          type: "button",
          className: "item",
          onClick: () => navigate(`/doc/${doc.id}`),
          children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "row", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "stack muted", children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("strong", { children: doc.code || doc.id }),
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "muted truncate", children: doc.partner?.name || "" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "stack text-right muted", children: [
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { children: unixToLocal2(doc.date) }),
              /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { children: statusLabel(doc) })
            ] })
          ] })
        },
        doc.id
      ))
    ] })
  ] });
}

// src/pages/DocPage.jsx
var import_react11 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function OperationRow({ op, onDelete, onSave }) {
  const { t, fmt } = useI18n();
  const { toNumber: toNumber2 } = useApp();
  const [editing, setEditing] = (0, import_react11.useState)(false);
  const [form, setForm] = (0, import_react11.useState)({
    quantity: op.quantity,
    cost: op.cost,
    price: op.price ?? "",
    description: op.description ?? ""
  });
  const [saving, setSaving] = (0, import_react11.useState)(false);
  (0, import_react11.useEffect)(() => {
    setForm({
      quantity: op.quantity,
      cost: op.cost,
      price: op.price ?? "",
      description: op.description ?? ""
    });
  }, [op]);
  const item = op.item || {};
  const barcode = item.base_barcode || (item.barcode_list ? String(item.barcode_list).split(",")[0]?.trim() : "");
  const code = (item.code ?? "").toString().padStart(6, "0");
  const unitName = item.unit?.name || t("unit.pcs") || "\u0448\u0442";
  const handleFieldChange = (field) => (event) => {
    setForm((prev) => ({ ...prev, [field]: event.target.value }));
  };
  const handleSave = async () => {
    if (!form.quantity || toNumber2(form.quantity) <= 0) {
      window.alert(t("op.qty.required") || "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E");
      return;
    }
    setSaving(true);
    const payload = {
      quantity: toNumber2(form.quantity),
      cost: toNumber2(form.cost),
      description: form.description || void 0
    };
    const priceNumber = toNumber2(form.price);
    if (Number.isFinite(priceNumber) && priceNumber > 0) {
      payload.price = priceNumber;
    }
    const ok = await onSave(op.id, payload);
    setSaving(false);
    if (ok) {
      setEditing(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "item compact", children: [
    /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: `row top${editing ? " hidden" : ""}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "info", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("strong", { className: "name", children: item.name || "" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "sub", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "muted text-small code", children: code }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "dot" }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "muted text-small barcode", children: barcode }),
          op.description ? /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "dot" }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "muted text-small description", children: op.description })
          ] }) : null
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "button",
          {
            type: "button",
            className: "btn icon clear op-edit",
            onClick: () => setEditing(true),
            "aria-label": t("op.edit") || "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
            title: t("op.edit") || "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
            children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("i", { className: "fa-solid fa-pen", "aria-hidden": "true" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "button",
          {
            type: "button",
            className: "btn icon clear op-del",
            onClick: () => onDelete(op.id),
            "aria-label": t("op.delete") || "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
            title: t("op.delete") || "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
            children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("i", { className: "fa-solid fa-trash", "aria-hidden": "true" })
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: `meta bottom${editing ? " hidden" : ""}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("span", { className: "qty", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("strong", { children: fmt.number(op.quantity) }),
        " ",
        unitName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "dot" }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "cost", children: fmt.money(op.cost) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "dot" }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "price", children: fmt.money(op.price ?? 0) })
    ] }),
    editing && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "form-vert", children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: `qty-${op.id}`, children: t("op.qty") || "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "input",
          {
            id: `qty-${op.id}`,
            type: "number",
            inputMode: "decimal",
            value: form.quantity,
            onChange: handleFieldChange("quantity")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: `cost-${op.id}`, children: t("op.cost") || "\u0421\u0442\u043E\u0438\u043C\u043E\u0441\u0442\u044C" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "input",
          {
            id: `cost-${op.id}`,
            type: "number",
            inputMode: "decimal",
            value: form.cost,
            onChange: handleFieldChange("cost")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: `price-${op.id}`, children: t("op.price") || "\u0426\u0435\u043D\u0430" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "input",
          {
            id: `price-${op.id}`,
            type: "number",
            inputMode: "decimal",
            value: form.price,
            onChange: handleFieldChange("price")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: `description-${op.id}`, children: t("op.description") || "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "input",
          {
            id: `description-${op.id}`,
            type: "text",
            value: form.description,
            onChange: handleFieldChange("description")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "page-actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "button",
          {
            type: "button",
            className: "btn small",
            onClick: handleSave,
            disabled: saving,
            children: saving ? t("op.saving") || "\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435..." : t("common.save") || "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "button",
          {
            type: "button",
            className: "btn small ghost",
            onClick: () => setEditing(false),
            disabled: saving,
            children: t("common.cancel") || "\u041E\u0442\u043C\u0435\u043D\u0430"
          }
        )
      ] })
    ] })
  ] }, op.id);
}
function DocPage() {
  const { id } = useParams();
  const { api: api2, unixToLocal: unixToLocal2, setAppTitle: setAppTitle2 } = useApp();
  const { t, locale, fmt } = useI18n();
  const { showToast } = useToast();
  const navigate = useNavigate();
  const [doc, setDoc] = (0, import_react11.useState)(null);
  const [operations, setOperations] = (0, import_react11.useState)([]);
  const [loading, setLoading] = (0, import_react11.useState)(true);
  const [error, setError] = (0, import_react11.useState)(null);
  (0, import_react11.useEffect)(() => {
    let cancelled = false;
    async function fetchDoc() {
      setLoading(true);
      setError(null);
      try {
        const { data } = await api2("purchase_get", { doc_id: id });
        const docData = data?.result?.doc || {};
        let ops = data?.result?.operations;
        if (!Array.isArray(ops)) {
          const opsResponse = await api2("purchase_ops_get", { doc_id: id });
          ops = opsResponse?.data?.result?.items || [];
        }
        if (!cancelled) {
          setDoc(docData);
          setOperations(ops);
        }
      } catch (err) {
        if (!cancelled) {
          setError(err);
          setDoc(null);
          setOperations([]);
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    }
    fetchDoc();
    return () => {
      cancelled = true;
    };
  }, [api2, id]);
  (0, import_react11.useEffect)(() => {
    const prefix = t("doc.title_prefix") || "\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442";
    const code = doc?.code || id;
    setAppTitle2(`${prefix} ${code}`);
  }, [doc, id, locale, setAppTitle2, t]);
  const handleDelete = async (opId) => {
    const question = t("confirm.delete_op") || "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044E?";
    if (!window.confirm(question)) return;
    try {
      const { ok, data } = await api2("purchase_ops_delete", { items: [{ id: opId }] });
      const affected = data?.result?.row_affected || 0;
      if (ok && affected > 0) {
        setOperations((prev) => prev.filter((op) => op.id !== opId));
        showToast(t("toast.op_deleted") || "\u041E\u043F\u0435\u0440\u0430\u0446\u0438\u044F \u0443\u0434\u0430\u043B\u0435\u043D\u0430", { type: "success" });
      } else {
        throw new Error(data?.description || "Delete failed");
      }
    } catch (err) {
      showToast(err.message || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044E", { type: "error", duration: 2400 });
    }
  };
  const handleSave = async (opId, payload) => {
    try {
      const { ok, data } = await api2("purchase_ops_edit", { items: [{ id: opId, ...payload }] });
      const affected = data?.result?.row_affected || 0;
      if (ok && affected > 0) {
        setOperations((prev) => prev.map((op) => {
          if (op.id !== opId) return op;
          const next = { ...op, ...payload };
          if (!Object.prototype.hasOwnProperty.call(payload, "price")) {
            next.price = op.price;
          }
          if (!Object.prototype.hasOwnProperty.call(payload, "description")) {
            next.description = op.description;
          }
          return next;
        }));
        showToast(t("toast.op_updated") || "\u041E\u043F\u0435\u0440\u0430\u0446\u0438\u044F \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430", { type: "success" });
        return true;
      }
      throw new Error(data?.description || "Save failed");
    } catch (err) {
      showToast(err.message || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044E", { type: "error", duration: 2400 });
      return false;
    }
  };
  const status = (0, import_react11.useMemo)(() => {
    if (!doc) return "";
    const segments = [];
    const performed = t("docs.status.performed");
    const performedLabel = performed === "docs.status.performed" ? "\u043F\u0440\u043E\u0432\u0435\u0434\u0451\u043D" : performed;
    const newLabel = t("docs.status.new");
    const newValue = newLabel === "docs.status.new" ? "\u043D\u043E\u0432\u044B\u0439" : newLabel;
    segments.push(doc.performed ? performedLabel : newValue);
    if (doc.blocked) {
      const blocked = t("docs.status.blocked");
      segments.push(blocked === "docs.status.blocked" ? "\u0431\u043B\u043E\u043A." : blocked);
    }
    return segments.join(" \u2022 ");
  }, [doc, t]);
  if (loading) {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "muted", children: t("common.loading") || "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430..." });
  }
  if (error) {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "muted", children: String(error.message || error) });
  }
  if (!doc) {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "muted", children: t("common.nothing") || "\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E" });
  }
  const metaParts = [
    unixToLocal2(doc.date),
    doc.partner?.name,
    fmt.money(doc.amount ?? 0, doc.currency?.code_chr ?? "UZS")
  ].filter(Boolean).join(" \xB7 ");
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("section", { className: "stack", id: "doc", children: [
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "row row-start", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("h1", { id: "doc-title", children: [
      t("doc.title_prefix") || "\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442",
      " ",
      doc.code || id
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "stack", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { id: "doc-status", className: "muted", children: status }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { id: "doc-meta", className: "muted", children: metaParts })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "button",
        {
          id: "btn-add-op",
          type: "button",
          className: "btn small",
          onClick: () => navigate(`/doc/${id}/op/new`),
          children: t("doc.add_op") || "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { id: "ops-list", className: "list", "aria-live": "polite", children: operations.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "muted", children: t("doc.no_ops") || t("common.nothing") || "\u041E\u043F\u0435\u0440\u0430\u0446\u0438\u0439 \u0435\u0449\u0451 \u043D\u0435\u0442" }) : operations.map((operation) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(OperationRow, { op: operation, onDelete: handleDelete, onSave: handleSave }, operation.id)) })
  ] });
}

// src/pages/OpNewPage.jsx
var import_react12 = __toESM(require_react(), 1);

// node_modules/ts-custom-error/dist/custom-error.mjs
function fixProto(target, prototype) {
  var setPrototypeOf = Object.setPrototypeOf;
  setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;
}
function fixStack(target, fn) {
  if (fn === void 0) {
    fn = target.constructor;
  }
  var captureStackTrace = Error.captureStackTrace;
  captureStackTrace && captureStackTrace(target, fn);
}
var __extends = /* @__PURE__ */ function() {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) {
        if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      }
    };
    return _extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CustomError = function(_super) {
  __extends(CustomError2, _super);
  function CustomError2(message, options) {
    var _newTarget = this.constructor;
    var _this = _super.call(this, message, options) || this;
    Object.defineProperty(_this, "name", {
      value: _newTarget.name,
      enumerable: false,
      configurable: true
    });
    fixProto(_this, _newTarget.prototype);
    fixStack(_this);
    return _this;
  }
  return CustomError2;
}(Error);

// node_modules/@zxing/library/esm/core/Exception.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Exception = (
  /** @class */
  function(_super) {
    __extends2(Exception2, _super);
    function Exception2(message) {
      if (message === void 0) {
        message = void 0;
      }
      var _this = _super.call(this, message) || this;
      _this.message = message;
      return _this;
    }
    Exception2.prototype.getKind = function() {
      var ex = this.constructor;
      return ex.kind;
    };
    Exception2.kind = "Exception";
    return Exception2;
  }(CustomError)
);
var Exception_default = Exception;

// node_modules/@zxing/library/esm/core/ArgumentException.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ArgumentException = (
  /** @class */
  function(_super) {
    __extends3(ArgumentException2, _super);
    function ArgumentException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ArgumentException2.kind = "ArgumentException";
    return ArgumentException2;
  }(Exception_default)
);
var ArgumentException_default = ArgumentException;

// node_modules/@zxing/library/esm/core/IllegalArgumentException.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IllegalArgumentException = (
  /** @class */
  function(_super) {
    __extends4(IllegalArgumentException2, _super);
    function IllegalArgumentException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    IllegalArgumentException2.kind = "IllegalArgumentException";
    return IllegalArgumentException2;
  }(Exception_default)
);
var IllegalArgumentException_default = IllegalArgumentException;

// node_modules/@zxing/library/esm/core/BinaryBitmap.js
var BinaryBitmap = (
  /** @class */
  function() {
    function BinaryBitmap2(binarizer) {
      this.binarizer = binarizer;
      if (binarizer === null) {
        throw new IllegalArgumentException_default("Binarizer must be non-null.");
      }
    }
    BinaryBitmap2.prototype.getWidth = function() {
      return this.binarizer.getWidth();
    };
    BinaryBitmap2.prototype.getHeight = function() {
      return this.binarizer.getHeight();
    };
    BinaryBitmap2.prototype.getBlackRow = function(y, row) {
      return this.binarizer.getBlackRow(y, row);
    };
    BinaryBitmap2.prototype.getBlackMatrix = function() {
      if (this.matrix === null || this.matrix === void 0) {
        this.matrix = this.binarizer.getBlackMatrix();
      }
      return this.matrix;
    };
    BinaryBitmap2.prototype.isCropSupported = function() {
      return this.binarizer.getLuminanceSource().isCropSupported();
    };
    BinaryBitmap2.prototype.crop = function(left, top, width, height) {
      var newSource = this.binarizer.getLuminanceSource().crop(left, top, width, height);
      return new BinaryBitmap2(this.binarizer.createBinarizer(newSource));
    };
    BinaryBitmap2.prototype.isRotateSupported = function() {
      return this.binarizer.getLuminanceSource().isRotateSupported();
    };
    BinaryBitmap2.prototype.rotateCounterClockwise = function() {
      var newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise();
      return new BinaryBitmap2(this.binarizer.createBinarizer(newSource));
    };
    BinaryBitmap2.prototype.rotateCounterClockwise45 = function() {
      var newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise45();
      return new BinaryBitmap2(this.binarizer.createBinarizer(newSource));
    };
    BinaryBitmap2.prototype.toString = function() {
      try {
        return this.getBlackMatrix().toString();
      } catch (e) {
        return "";
      }
    };
    return BinaryBitmap2;
  }()
);
var BinaryBitmap_default = BinaryBitmap;

// node_modules/@zxing/library/esm/core/ChecksumException.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ChecksumException = (
  /** @class */
  function(_super) {
    __extends5(ChecksumException2, _super);
    function ChecksumException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ChecksumException2.getChecksumInstance = function() {
      return new ChecksumException2();
    };
    ChecksumException2.kind = "ChecksumException";
    return ChecksumException2;
  }(Exception_default)
);
var ChecksumException_default = ChecksumException;

// node_modules/@zxing/library/esm/core/Binarizer.js
var Binarizer = (
  /** @class */
  function() {
    function Binarizer2(source) {
      this.source = source;
    }
    Binarizer2.prototype.getLuminanceSource = function() {
      return this.source;
    };
    Binarizer2.prototype.getWidth = function() {
      return this.source.getWidth();
    };
    Binarizer2.prototype.getHeight = function() {
      return this.source.getHeight();
    };
    return Binarizer2;
  }()
);
var Binarizer_default = Binarizer;

// node_modules/@zxing/library/esm/core/util/System.js
var System = (
  /** @class */
  function() {
    function System2() {
    }
    System2.arraycopy = function(src, srcPos, dest, destPos, length) {
      while (length--) {
        dest[destPos++] = src[srcPos++];
      }
    };
    System2.currentTimeMillis = function() {
      return Date.now();
    };
    return System2;
  }()
);
var System_default = System;

// node_modules/@zxing/library/esm/core/IndexOutOfBoundsException.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IndexOutOfBoundsException = (
  /** @class */
  function(_super) {
    __extends6(IndexOutOfBoundsException2, _super);
    function IndexOutOfBoundsException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexOutOfBoundsException2.kind = "IndexOutOfBoundsException";
    return IndexOutOfBoundsException2;
  }(Exception_default)
);
var IndexOutOfBoundsException_default = IndexOutOfBoundsException;

// node_modules/@zxing/library/esm/core/ArrayIndexOutOfBoundsException.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ArrayIndexOutOfBoundsException = (
  /** @class */
  function(_super) {
    __extends7(ArrayIndexOutOfBoundsException2, _super);
    function ArrayIndexOutOfBoundsException2(index, message) {
      if (index === void 0) {
        index = void 0;
      }
      if (message === void 0) {
        message = void 0;
      }
      var _this = _super.call(this, message) || this;
      _this.index = index;
      _this.message = message;
      return _this;
    }
    ArrayIndexOutOfBoundsException2.kind = "ArrayIndexOutOfBoundsException";
    return ArrayIndexOutOfBoundsException2;
  }(IndexOutOfBoundsException_default)
);
var ArrayIndexOutOfBoundsException_default = ArrayIndexOutOfBoundsException;

// node_modules/@zxing/library/esm/core/util/Arrays.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Arrays = (
  /** @class */
  function() {
    function Arrays2() {
    }
    Arrays2.fill = function(a, val) {
      for (var i = 0, len = a.length; i < len; i++)
        a[i] = val;
    };
    Arrays2.fillWithin = function(a, fromIndex, toIndex, val) {
      Arrays2.rangeCheck(a.length, fromIndex, toIndex);
      for (var i = fromIndex; i < toIndex; i++)
        a[i] = val;
    };
    Arrays2.rangeCheck = function(arrayLength, fromIndex, toIndex) {
      if (fromIndex > toIndex) {
        throw new IllegalArgumentException_default("fromIndex(" + fromIndex + ") > toIndex(" + toIndex + ")");
      }
      if (fromIndex < 0) {
        throw new ArrayIndexOutOfBoundsException_default(fromIndex);
      }
      if (toIndex > arrayLength) {
        throw new ArrayIndexOutOfBoundsException_default(toIndex);
      }
    };
    Arrays2.asList = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return args;
    };
    Arrays2.create = function(rows, cols, value) {
      var arr = Array.from({ length: rows });
      return arr.map(function(x) {
        return Array.from({ length: cols }).fill(value);
      });
    };
    Arrays2.createInt32Array = function(rows, cols, value) {
      var arr = Array.from({ length: rows });
      return arr.map(function(x) {
        return Int32Array.from({ length: cols }).fill(value);
      });
    };
    Arrays2.equals = function(first, second) {
      if (!first) {
        return false;
      }
      if (!second) {
        return false;
      }
      if (!first.length) {
        return false;
      }
      if (!second.length) {
        return false;
      }
      if (first.length !== second.length) {
        return false;
      }
      for (var i = 0, length_1 = first.length; i < length_1; i++) {
        if (first[i] !== second[i]) {
          return false;
        }
      }
      return true;
    };
    Arrays2.hashCode = function(a) {
      var e_1, _a2;
      if (a === null) {
        return 0;
      }
      var result = 1;
      try {
        for (var a_1 = __values(a), a_1_1 = a_1.next(); !a_1_1.done; a_1_1 = a_1.next()) {
          var element = a_1_1.value;
          result = 31 * result + element;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (a_1_1 && !a_1_1.done && (_a2 = a_1.return)) _a2.call(a_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return result;
    };
    Arrays2.fillUint8Array = function(a, value) {
      for (var i = 0; i !== a.length; i++) {
        a[i] = value;
      }
    };
    Arrays2.copyOf = function(original, newLength) {
      return original.slice(0, newLength);
    };
    Arrays2.copyOfUint8Array = function(original, newLength) {
      if (original.length <= newLength) {
        var newArray = new Uint8Array(newLength);
        newArray.set(original);
        return newArray;
      }
      return original.slice(0, newLength);
    };
    Arrays2.copyOfRange = function(original, from, to) {
      var newLength = to - from;
      var copy = new Int32Array(newLength);
      System_default.arraycopy(original, from, copy, 0, newLength);
      return copy;
    };
    Arrays2.binarySearch = function(ar, el, comparator) {
      if (void 0 === comparator) {
        comparator = Arrays2.numberComparator;
      }
      var m = 0;
      var n = ar.length - 1;
      while (m <= n) {
        var k = n + m >> 1;
        var cmp = comparator(el, ar[k]);
        if (cmp > 0) {
          m = k + 1;
        } else if (cmp < 0) {
          n = k - 1;
        } else {
          return k;
        }
      }
      return -m - 1;
    };
    Arrays2.numberComparator = function(a, b) {
      return a - b;
    };
    return Arrays2;
  }()
);
var Arrays_default = Arrays;

// node_modules/@zxing/library/esm/core/util/Integer.js
var Integer = (
  /** @class */
  function() {
    function Integer2() {
    }
    Integer2.numberOfTrailingZeros = function(i) {
      var y;
      if (i === 0)
        return 32;
      var n = 31;
      y = i << 16;
      if (y !== 0) {
        n -= 16;
        i = y;
      }
      y = i << 8;
      if (y !== 0) {
        n -= 8;
        i = y;
      }
      y = i << 4;
      if (y !== 0) {
        n -= 4;
        i = y;
      }
      y = i << 2;
      if (y !== 0) {
        n -= 2;
        i = y;
      }
      return n - (i << 1 >>> 31);
    };
    Integer2.numberOfLeadingZeros = function(i) {
      if (i === 0) {
        return 32;
      }
      var n = 1;
      if (i >>> 16 === 0) {
        n += 16;
        i <<= 16;
      }
      if (i >>> 24 === 0) {
        n += 8;
        i <<= 8;
      }
      if (i >>> 28 === 0) {
        n += 4;
        i <<= 4;
      }
      if (i >>> 30 === 0) {
        n += 2;
        i <<= 2;
      }
      n -= i >>> 31;
      return n;
    };
    Integer2.toHexString = function(i) {
      return i.toString(16);
    };
    Integer2.toBinaryString = function(intNumber) {
      return String(parseInt(String(intNumber), 2));
    };
    Integer2.bitCount = function(i) {
      i = i - (i >>> 1 & 1431655765);
      i = (i & 858993459) + (i >>> 2 & 858993459);
      i = i + (i >>> 4) & 252645135;
      i = i + (i >>> 8);
      i = i + (i >>> 16);
      return i & 63;
    };
    Integer2.truncDivision = function(dividend, divisor) {
      return Math.trunc(dividend / divisor);
    };
    Integer2.parseInt = function(num, radix) {
      if (radix === void 0) {
        radix = void 0;
      }
      return parseInt(num, radix);
    };
    Integer2.MIN_VALUE_32_BITS = -2147483648;
    Integer2.MAX_VALUE = Number.MAX_SAFE_INTEGER;
    return Integer2;
  }()
);
var Integer_default = Integer;

// node_modules/@zxing/library/esm/core/common/BitArray.js
var BitArray = (
  /** @class */
  function() {
    function BitArray2(size, bits) {
      if (void 0 === size) {
        this.size = 0;
        this.bits = new Int32Array(1);
      } else {
        this.size = size;
        if (void 0 === bits || null === bits) {
          this.bits = BitArray2.makeArray(size);
        } else {
          this.bits = bits;
        }
      }
    }
    BitArray2.prototype.getSize = function() {
      return this.size;
    };
    BitArray2.prototype.getSizeInBytes = function() {
      return Math.floor((this.size + 7) / 8);
    };
    BitArray2.prototype.ensureCapacity = function(size) {
      if (size > this.bits.length * 32) {
        var newBits = BitArray2.makeArray(size);
        System_default.arraycopy(this.bits, 0, newBits, 0, this.bits.length);
        this.bits = newBits;
      }
    };
    BitArray2.prototype.get = function(i) {
      return (this.bits[Math.floor(i / 32)] & 1 << (i & 31)) !== 0;
    };
    BitArray2.prototype.set = function(i) {
      this.bits[Math.floor(i / 32)] |= 1 << (i & 31);
    };
    BitArray2.prototype.flip = function(i) {
      this.bits[Math.floor(i / 32)] ^= 1 << (i & 31);
    };
    BitArray2.prototype.getNextSet = function(from) {
      var size = this.size;
      if (from >= size) {
        return size;
      }
      var bits = this.bits;
      var bitsOffset = Math.floor(from / 32);
      var currentBits = bits[bitsOffset];
      currentBits &= ~((1 << (from & 31)) - 1);
      var length = bits.length;
      while (currentBits === 0) {
        if (++bitsOffset === length) {
          return size;
        }
        currentBits = bits[bitsOffset];
      }
      var result = bitsOffset * 32 + Integer_default.numberOfTrailingZeros(currentBits);
      return result > size ? size : result;
    };
    BitArray2.prototype.getNextUnset = function(from) {
      var size = this.size;
      if (from >= size) {
        return size;
      }
      var bits = this.bits;
      var bitsOffset = Math.floor(from / 32);
      var currentBits = ~bits[bitsOffset];
      currentBits &= ~((1 << (from & 31)) - 1);
      var length = bits.length;
      while (currentBits === 0) {
        if (++bitsOffset === length) {
          return size;
        }
        currentBits = ~bits[bitsOffset];
      }
      var result = bitsOffset * 32 + Integer_default.numberOfTrailingZeros(currentBits);
      return result > size ? size : result;
    };
    BitArray2.prototype.setBulk = function(i, newBits) {
      this.bits[Math.floor(i / 32)] = newBits;
    };
    BitArray2.prototype.setRange = function(start, end) {
      if (end < start || start < 0 || end > this.size) {
        throw new IllegalArgumentException_default();
      }
      if (end === start) {
        return;
      }
      end--;
      var firstInt = Math.floor(start / 32);
      var lastInt = Math.floor(end / 32);
      var bits = this.bits;
      for (var i = firstInt; i <= lastInt; i++) {
        var firstBit = i > firstInt ? 0 : start & 31;
        var lastBit = i < lastInt ? 31 : end & 31;
        var mask = (2 << lastBit) - (1 << firstBit);
        bits[i] |= mask;
      }
    };
    BitArray2.prototype.clear = function() {
      var max = this.bits.length;
      var bits = this.bits;
      for (var i = 0; i < max; i++) {
        bits[i] = 0;
      }
    };
    BitArray2.prototype.isRange = function(start, end, value) {
      if (end < start || start < 0 || end > this.size) {
        throw new IllegalArgumentException_default();
      }
      if (end === start) {
        return true;
      }
      end--;
      var firstInt = Math.floor(start / 32);
      var lastInt = Math.floor(end / 32);
      var bits = this.bits;
      for (var i = firstInt; i <= lastInt; i++) {
        var firstBit = i > firstInt ? 0 : start & 31;
        var lastBit = i < lastInt ? 31 : end & 31;
        var mask = (2 << lastBit) - (1 << firstBit) & 4294967295;
        if ((bits[i] & mask) !== (value ? mask : 0)) {
          return false;
        }
      }
      return true;
    };
    BitArray2.prototype.appendBit = function(bit) {
      this.ensureCapacity(this.size + 1);
      if (bit) {
        this.bits[Math.floor(this.size / 32)] |= 1 << (this.size & 31);
      }
      this.size++;
    };
    BitArray2.prototype.appendBits = function(value, numBits) {
      if (numBits < 0 || numBits > 32) {
        throw new IllegalArgumentException_default("Num bits must be between 0 and 32");
      }
      this.ensureCapacity(this.size + numBits);
      for (var numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {
        this.appendBit((value >> numBitsLeft - 1 & 1) === 1);
      }
    };
    BitArray2.prototype.appendBitArray = function(other) {
      var otherSize = other.size;
      this.ensureCapacity(this.size + otherSize);
      for (var i = 0; i < otherSize; i++) {
        this.appendBit(other.get(i));
      }
    };
    BitArray2.prototype.xor = function(other) {
      if (this.size !== other.size) {
        throw new IllegalArgumentException_default("Sizes don't match");
      }
      var bits = this.bits;
      for (var i = 0, length_1 = bits.length; i < length_1; i++) {
        bits[i] ^= other.bits[i];
      }
    };
    BitArray2.prototype.toBytes = function(bitOffset, array, offset, numBytes) {
      for (var i = 0; i < numBytes; i++) {
        var theByte = 0;
        for (var j = 0; j < 8; j++) {
          if (this.get(bitOffset)) {
            theByte |= 1 << 7 - j;
          }
          bitOffset++;
        }
        array[offset + i] = /*(byte)*/
        theByte;
      }
    };
    BitArray2.prototype.getBitArray = function() {
      return this.bits;
    };
    BitArray2.prototype.reverse = function() {
      var newBits = new Int32Array(this.bits.length);
      var len = Math.floor((this.size - 1) / 32);
      var oldBitsLen = len + 1;
      var bits = this.bits;
      for (var i = 0; i < oldBitsLen; i++) {
        var x = bits[i];
        x = x >> 1 & 1431655765 | (x & 1431655765) << 1;
        x = x >> 2 & 858993459 | (x & 858993459) << 2;
        x = x >> 4 & 252645135 | (x & 252645135) << 4;
        x = x >> 8 & 16711935 | (x & 16711935) << 8;
        x = x >> 16 & 65535 | (x & 65535) << 16;
        newBits[len - i] = /*(int)*/
        x;
      }
      if (this.size !== oldBitsLen * 32) {
        var leftOffset = oldBitsLen * 32 - this.size;
        var currentInt = newBits[0] >>> leftOffset;
        for (var i = 1; i < oldBitsLen; i++) {
          var nextInt = newBits[i];
          currentInt |= nextInt << 32 - leftOffset;
          newBits[i - 1] = currentInt;
          currentInt = nextInt >>> leftOffset;
        }
        newBits[oldBitsLen - 1] = currentInt;
      }
      this.bits = newBits;
    };
    BitArray2.makeArray = function(size) {
      return new Int32Array(Math.floor((size + 31) / 32));
    };
    BitArray2.prototype.equals = function(o) {
      if (!(o instanceof BitArray2)) {
        return false;
      }
      var other = o;
      return this.size === other.size && Arrays_default.equals(this.bits, other.bits);
    };
    BitArray2.prototype.hashCode = function() {
      return 31 * this.size + Arrays_default.hashCode(this.bits);
    };
    BitArray2.prototype.toString = function() {
      var result = "";
      for (var i = 0, size = this.size; i < size; i++) {
        if ((i & 7) === 0) {
          result += " ";
        }
        result += this.get(i) ? "X" : ".";
      }
      return result;
    };
    BitArray2.prototype.clone = function() {
      return new BitArray2(this.size, this.bits.slice());
    };
    BitArray2.prototype.toArray = function() {
      var result = [];
      for (var i = 0, size = this.size; i < size; i++) {
        result.push(this.get(i));
      }
      return result;
    };
    return BitArray2;
  }()
);
var BitArray_default = BitArray;

// node_modules/@zxing/library/esm/core/DecodeHintType.js
var DecodeHintType;
(function(DecodeHintType2) {
  DecodeHintType2[DecodeHintType2["OTHER"] = 0] = "OTHER";
  DecodeHintType2[DecodeHintType2["PURE_BARCODE"] = 1] = "PURE_BARCODE";
  DecodeHintType2[DecodeHintType2["POSSIBLE_FORMATS"] = 2] = "POSSIBLE_FORMATS";
  DecodeHintType2[DecodeHintType2["TRY_HARDER"] = 3] = "TRY_HARDER";
  DecodeHintType2[DecodeHintType2["CHARACTER_SET"] = 4] = "CHARACTER_SET";
  DecodeHintType2[DecodeHintType2["ALLOWED_LENGTHS"] = 5] = "ALLOWED_LENGTHS";
  DecodeHintType2[DecodeHintType2["ASSUME_CODE_39_CHECK_DIGIT"] = 6] = "ASSUME_CODE_39_CHECK_DIGIT";
  DecodeHintType2[DecodeHintType2["ENABLE_CODE_39_EXTENDED_MODE"] = 7] = "ENABLE_CODE_39_EXTENDED_MODE";
  DecodeHintType2[DecodeHintType2["ASSUME_GS1"] = 8] = "ASSUME_GS1";
  DecodeHintType2[DecodeHintType2["RETURN_CODABAR_START_END"] = 9] = "RETURN_CODABAR_START_END";
  DecodeHintType2[DecodeHintType2["NEED_RESULT_POINT_CALLBACK"] = 10] = "NEED_RESULT_POINT_CALLBACK";
  DecodeHintType2[DecodeHintType2["ALLOWED_EAN_EXTENSIONS"] = 11] = "ALLOWED_EAN_EXTENSIONS";
})(DecodeHintType || (DecodeHintType = {}));
var DecodeHintType_default = DecodeHintType;

// node_modules/@zxing/library/esm/core/FormatException.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FormatException = (
  /** @class */
  function(_super) {
    __extends8(FormatException2, _super);
    function FormatException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FormatException2.getFormatInstance = function() {
      return new FormatException2();
    };
    FormatException2.kind = "FormatException";
    return FormatException2;
  }(Exception_default)
);
var FormatException_default = FormatException;

// node_modules/@zxing/library/esm/core/common/CharacterSetECI.js
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var CharacterSetValueIdentifiers;
(function(CharacterSetValueIdentifiers2) {
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Cp437"] = 0] = "Cp437";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_1"] = 1] = "ISO8859_1";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_2"] = 2] = "ISO8859_2";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_3"] = 3] = "ISO8859_3";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_4"] = 4] = "ISO8859_4";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_5"] = 5] = "ISO8859_5";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_6"] = 6] = "ISO8859_6";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_7"] = 7] = "ISO8859_7";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_8"] = 8] = "ISO8859_8";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_9"] = 9] = "ISO8859_9";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_10"] = 10] = "ISO8859_10";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_11"] = 11] = "ISO8859_11";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_13"] = 12] = "ISO8859_13";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_14"] = 13] = "ISO8859_14";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_15"] = 14] = "ISO8859_15";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ISO8859_16"] = 15] = "ISO8859_16";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["SJIS"] = 16] = "SJIS";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Cp1250"] = 17] = "Cp1250";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Cp1251"] = 18] = "Cp1251";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Cp1252"] = 19] = "Cp1252";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Cp1256"] = 20] = "Cp1256";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["UnicodeBigUnmarked"] = 21] = "UnicodeBigUnmarked";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["UTF8"] = 22] = "UTF8";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["ASCII"] = 23] = "ASCII";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["Big5"] = 24] = "Big5";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["GB18030"] = 25] = "GB18030";
  CharacterSetValueIdentifiers2[CharacterSetValueIdentifiers2["EUC_KR"] = 26] = "EUC_KR";
})(CharacterSetValueIdentifiers || (CharacterSetValueIdentifiers = {}));
var CharacterSetECI = (
  /** @class */
  function() {
    function CharacterSetECI2(valueIdentifier, valuesParam, name) {
      var e_1, _a2;
      var otherEncodingNames = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        otherEncodingNames[_i - 3] = arguments[_i];
      }
      this.valueIdentifier = valueIdentifier;
      this.name = name;
      if (typeof valuesParam === "number") {
        this.values = Int32Array.from([valuesParam]);
      } else {
        this.values = valuesParam;
      }
      this.otherEncodingNames = otherEncodingNames;
      CharacterSetECI2.VALUE_IDENTIFIER_TO_ECI.set(valueIdentifier, this);
      CharacterSetECI2.NAME_TO_ECI.set(name, this);
      var values = this.values;
      for (var i = 0, length_1 = values.length; i !== length_1; i++) {
        var v = values[i];
        CharacterSetECI2.VALUES_TO_ECI.set(v, this);
      }
      try {
        for (var otherEncodingNames_1 = __values2(otherEncodingNames), otherEncodingNames_1_1 = otherEncodingNames_1.next(); !otherEncodingNames_1_1.done; otherEncodingNames_1_1 = otherEncodingNames_1.next()) {
          var otherName = otherEncodingNames_1_1.value;
          CharacterSetECI2.NAME_TO_ECI.set(otherName, this);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (otherEncodingNames_1_1 && !otherEncodingNames_1_1.done && (_a2 = otherEncodingNames_1.return)) _a2.call(otherEncodingNames_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
    CharacterSetECI2.prototype.getValueIdentifier = function() {
      return this.valueIdentifier;
    };
    CharacterSetECI2.prototype.getName = function() {
      return this.name;
    };
    CharacterSetECI2.prototype.getValue = function() {
      return this.values[0];
    };
    CharacterSetECI2.getCharacterSetECIByValue = function(value) {
      if (value < 0 || value >= 900) {
        throw new FormatException_default("incorect value");
      }
      var characterSet = CharacterSetECI2.VALUES_TO_ECI.get(value);
      if (void 0 === characterSet) {
        throw new FormatException_default("incorect value");
      }
      return characterSet;
    };
    CharacterSetECI2.getCharacterSetECIByName = function(name) {
      var characterSet = CharacterSetECI2.NAME_TO_ECI.get(name);
      if (void 0 === characterSet) {
        throw new FormatException_default("incorect value");
      }
      return characterSet;
    };
    CharacterSetECI2.prototype.equals = function(o) {
      if (!(o instanceof CharacterSetECI2)) {
        return false;
      }
      var other = o;
      return this.getName() === other.getName();
    };
    CharacterSetECI2.VALUE_IDENTIFIER_TO_ECI = /* @__PURE__ */ new Map();
    CharacterSetECI2.VALUES_TO_ECI = /* @__PURE__ */ new Map();
    CharacterSetECI2.NAME_TO_ECI = /* @__PURE__ */ new Map();
    CharacterSetECI2.Cp437 = new CharacterSetECI2(CharacterSetValueIdentifiers.Cp437, Int32Array.from([0, 2]), "Cp437");
    CharacterSetECI2.ISO8859_1 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_1, Int32Array.from([1, 3]), "ISO-8859-1", "ISO88591", "ISO8859_1");
    CharacterSetECI2.ISO8859_2 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_2, 4, "ISO-8859-2", "ISO88592", "ISO8859_2");
    CharacterSetECI2.ISO8859_3 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_3, 5, "ISO-8859-3", "ISO88593", "ISO8859_3");
    CharacterSetECI2.ISO8859_4 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_4, 6, "ISO-8859-4", "ISO88594", "ISO8859_4");
    CharacterSetECI2.ISO8859_5 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_5, 7, "ISO-8859-5", "ISO88595", "ISO8859_5");
    CharacterSetECI2.ISO8859_6 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_6, 8, "ISO-8859-6", "ISO88596", "ISO8859_6");
    CharacterSetECI2.ISO8859_7 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_7, 9, "ISO-8859-7", "ISO88597", "ISO8859_7");
    CharacterSetECI2.ISO8859_8 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_8, 10, "ISO-8859-8", "ISO88598", "ISO8859_8");
    CharacterSetECI2.ISO8859_9 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_9, 11, "ISO-8859-9", "ISO88599", "ISO8859_9");
    CharacterSetECI2.ISO8859_10 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_10, 12, "ISO-8859-10", "ISO885910", "ISO8859_10");
    CharacterSetECI2.ISO8859_11 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_11, 13, "ISO-8859-11", "ISO885911", "ISO8859_11");
    CharacterSetECI2.ISO8859_13 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_13, 15, "ISO-8859-13", "ISO885913", "ISO8859_13");
    CharacterSetECI2.ISO8859_14 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_14, 16, "ISO-8859-14", "ISO885914", "ISO8859_14");
    CharacterSetECI2.ISO8859_15 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_15, 17, "ISO-8859-15", "ISO885915", "ISO8859_15");
    CharacterSetECI2.ISO8859_16 = new CharacterSetECI2(CharacterSetValueIdentifiers.ISO8859_16, 18, "ISO-8859-16", "ISO885916", "ISO8859_16");
    CharacterSetECI2.SJIS = new CharacterSetECI2(CharacterSetValueIdentifiers.SJIS, 20, "SJIS", "Shift_JIS");
    CharacterSetECI2.Cp1250 = new CharacterSetECI2(CharacterSetValueIdentifiers.Cp1250, 21, "Cp1250", "windows-1250");
    CharacterSetECI2.Cp1251 = new CharacterSetECI2(CharacterSetValueIdentifiers.Cp1251, 22, "Cp1251", "windows-1251");
    CharacterSetECI2.Cp1252 = new CharacterSetECI2(CharacterSetValueIdentifiers.Cp1252, 23, "Cp1252", "windows-1252");
    CharacterSetECI2.Cp1256 = new CharacterSetECI2(CharacterSetValueIdentifiers.Cp1256, 24, "Cp1256", "windows-1256");
    CharacterSetECI2.UnicodeBigUnmarked = new CharacterSetECI2(CharacterSetValueIdentifiers.UnicodeBigUnmarked, 25, "UnicodeBigUnmarked", "UTF-16BE", "UnicodeBig");
    CharacterSetECI2.UTF8 = new CharacterSetECI2(CharacterSetValueIdentifiers.UTF8, 26, "UTF8", "UTF-8");
    CharacterSetECI2.ASCII = new CharacterSetECI2(CharacterSetValueIdentifiers.ASCII, Int32Array.from([27, 170]), "ASCII", "US-ASCII");
    CharacterSetECI2.Big5 = new CharacterSetECI2(CharacterSetValueIdentifiers.Big5, 28, "Big5");
    CharacterSetECI2.GB18030 = new CharacterSetECI2(CharacterSetValueIdentifiers.GB18030, 29, "GB18030", "GB2312", "EUC_CN", "GBK");
    CharacterSetECI2.EUC_KR = new CharacterSetECI2(CharacterSetValueIdentifiers.EUC_KR, 30, "EUC_KR", "EUC-KR");
    return CharacterSetECI2;
  }()
);
var CharacterSetECI_default = CharacterSetECI;

// node_modules/@zxing/library/esm/core/UnsupportedOperationException.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UnsupportedOperationException = (
  /** @class */
  function(_super) {
    __extends9(UnsupportedOperationException2, _super);
    function UnsupportedOperationException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UnsupportedOperationException2.kind = "UnsupportedOperationException";
    return UnsupportedOperationException2;
  }(Exception_default)
);
var UnsupportedOperationException_default = UnsupportedOperationException;

// node_modules/@zxing/library/esm/core/util/StringEncoding.js
var StringEncoding = (
  /** @class */
  function() {
    function StringEncoding2() {
    }
    StringEncoding2.decode = function(bytes, encoding) {
      var encodingName = this.encodingName(encoding);
      if (this.customDecoder) {
        return this.customDecoder(bytes, encodingName);
      }
      if (typeof TextDecoder === "undefined" || this.shouldDecodeOnFallback(encodingName)) {
        return this.decodeFallback(bytes, encodingName);
      }
      return new TextDecoder(encodingName).decode(bytes);
    };
    StringEncoding2.shouldDecodeOnFallback = function(encodingName) {
      return !StringEncoding2.isBrowser() && encodingName === "ISO-8859-1";
    };
    StringEncoding2.encode = function(s, encoding) {
      var encodingName = this.encodingName(encoding);
      if (this.customEncoder) {
        return this.customEncoder(s, encodingName);
      }
      if (typeof TextEncoder === "undefined") {
        return this.encodeFallback(s);
      }
      return new TextEncoder().encode(s);
    };
    StringEncoding2.isBrowser = function() {
      return typeof window !== "undefined" && {}.toString.call(window) === "[object Window]";
    };
    StringEncoding2.encodingName = function(encoding) {
      return typeof encoding === "string" ? encoding : encoding.getName();
    };
    StringEncoding2.encodingCharacterSet = function(encoding) {
      if (encoding instanceof CharacterSetECI_default) {
        return encoding;
      }
      return CharacterSetECI_default.getCharacterSetECIByName(encoding);
    };
    StringEncoding2.decodeFallback = function(bytes, encoding) {
      var characterSet = this.encodingCharacterSet(encoding);
      if (StringEncoding2.isDecodeFallbackSupported(characterSet)) {
        var s = "";
        for (var i = 0, length_1 = bytes.length; i < length_1; i++) {
          var h = bytes[i].toString(16);
          if (h.length < 2) {
            h = "0" + h;
          }
          s += "%" + h;
        }
        return decodeURIComponent(s);
      }
      if (characterSet.equals(CharacterSetECI_default.UnicodeBigUnmarked)) {
        return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
      }
      throw new UnsupportedOperationException_default("Encoding " + this.encodingName(encoding) + " not supported by fallback.");
    };
    StringEncoding2.isDecodeFallbackSupported = function(characterSet) {
      return characterSet.equals(CharacterSetECI_default.UTF8) || characterSet.equals(CharacterSetECI_default.ISO8859_1) || characterSet.equals(CharacterSetECI_default.ASCII);
    };
    StringEncoding2.encodeFallback = function(s) {
      var encodedURIstring = btoa(unescape(encodeURIComponent(s)));
      var charList = encodedURIstring.split("");
      var uintArray = [];
      for (var i = 0; i < charList.length; i++) {
        uintArray.push(charList[i].charCodeAt(0));
      }
      return new Uint8Array(uintArray);
    };
    return StringEncoding2;
  }()
);
var StringEncoding_default = StringEncoding;

// node_modules/@zxing/library/esm/core/common/StringUtils.js
var StringUtils = (
  /** @class */
  function() {
    function StringUtils2() {
    }
    StringUtils2.castAsNonUtf8Char = function(code, encoding) {
      if (encoding === void 0) {
        encoding = null;
      }
      var e = encoding ? encoding.getName() : this.ISO88591;
      return StringEncoding_default.decode(new Uint8Array([code]), e);
    };
    StringUtils2.guessEncoding = function(bytes, hints) {
      if (hints !== null && hints !== void 0 && void 0 !== hints.get(DecodeHintType_default.CHARACTER_SET)) {
        return hints.get(DecodeHintType_default.CHARACTER_SET).toString();
      }
      var length = bytes.length;
      var canBeISO88591 = true;
      var canBeShiftJIS = true;
      var canBeUTF8 = true;
      var utf8BytesLeft = 0;
      var utf2BytesChars = 0;
      var utf3BytesChars = 0;
      var utf4BytesChars = 0;
      var sjisBytesLeft = 0;
      var sjisKatakanaChars = 0;
      var sjisCurKatakanaWordLength = 0;
      var sjisCurDoubleBytesWordLength = 0;
      var sjisMaxKatakanaWordLength = 0;
      var sjisMaxDoubleBytesWordLength = 0;
      var isoHighOther = 0;
      var utf8bom = bytes.length > 3 && bytes[0] === /*(byte) */
      239 && bytes[1] === /*(byte) */
      187 && bytes[2] === /*(byte) */
      191;
      for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {
        var value = bytes[i] & 255;
        if (canBeUTF8) {
          if (utf8BytesLeft > 0) {
            if ((value & 128) === 0) {
              canBeUTF8 = false;
            } else {
              utf8BytesLeft--;
            }
          } else if ((value & 128) !== 0) {
            if ((value & 64) === 0) {
              canBeUTF8 = false;
            } else {
              utf8BytesLeft++;
              if ((value & 32) === 0) {
                utf2BytesChars++;
              } else {
                utf8BytesLeft++;
                if ((value & 16) === 0) {
                  utf3BytesChars++;
                } else {
                  utf8BytesLeft++;
                  if ((value & 8) === 0) {
                    utf4BytesChars++;
                  } else {
                    canBeUTF8 = false;
                  }
                }
              }
            }
          }
        }
        if (canBeISO88591) {
          if (value > 127 && value < 160) {
            canBeISO88591 = false;
          } else if (value > 159) {
            if (value < 192 || value === 215 || value === 247) {
              isoHighOther++;
            }
          }
        }
        if (canBeShiftJIS) {
          if (sjisBytesLeft > 0) {
            if (value < 64 || value === 127 || value > 252) {
              canBeShiftJIS = false;
            } else {
              sjisBytesLeft--;
            }
          } else if (value === 128 || value === 160 || value > 239) {
            canBeShiftJIS = false;
          } else if (value > 160 && value < 224) {
            sjisKatakanaChars++;
            sjisCurDoubleBytesWordLength = 0;
            sjisCurKatakanaWordLength++;
            if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {
              sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;
            }
          } else if (value > 127) {
            sjisBytesLeft++;
            sjisCurKatakanaWordLength = 0;
            sjisCurDoubleBytesWordLength++;
            if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {
              sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;
            }
          } else {
            sjisCurKatakanaWordLength = 0;
            sjisCurDoubleBytesWordLength = 0;
          }
        }
      }
      if (canBeUTF8 && utf8BytesLeft > 0) {
        canBeUTF8 = false;
      }
      if (canBeShiftJIS && sjisBytesLeft > 0) {
        canBeShiftJIS = false;
      }
      if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {
        return StringUtils2.UTF8;
      }
      if (canBeShiftJIS && (StringUtils2.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {
        return StringUtils2.SHIFT_JIS;
      }
      if (canBeISO88591 && canBeShiftJIS) {
        return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils2.SHIFT_JIS : StringUtils2.ISO88591;
      }
      if (canBeISO88591) {
        return StringUtils2.ISO88591;
      }
      if (canBeShiftJIS) {
        return StringUtils2.SHIFT_JIS;
      }
      if (canBeUTF8) {
        return StringUtils2.UTF8;
      }
      return StringUtils2.PLATFORM_DEFAULT_ENCODING;
    };
    StringUtils2.format = function(append) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var i = -1;
      function callback(exp, p0, p1, p2, p3, p4) {
        if (exp === "%%")
          return "%";
        if (args[++i] === void 0)
          return void 0;
        exp = p2 ? parseInt(p2.substr(1)) : void 0;
        var base = p3 ? parseInt(p3.substr(1)) : void 0;
        var val;
        switch (p4) {
          case "s":
            val = args[i];
            break;
          case "c":
            val = args[i][0];
            break;
          case "f":
            val = parseFloat(args[i]).toFixed(exp);
            break;
          case "p":
            val = parseFloat(args[i]).toPrecision(exp);
            break;
          case "e":
            val = parseFloat(args[i]).toExponential(exp);
            break;
          case "x":
            val = parseInt(args[i]).toString(base ? base : 16);
            break;
          case "d":
            val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);
            break;
        }
        val = typeof val === "object" ? JSON.stringify(val) : (+val).toString(base);
        var size = parseInt(p1);
        var ch = p1 && p1[0] + "" === "0" ? "0" : " ";
        while (val.length < size)
          val = p0 !== void 0 ? val + ch : ch + val;
        return val;
      }
      var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
      return append.replace(regex, callback);
    };
    StringUtils2.getBytes = function(str, encoding) {
      return StringEncoding_default.encode(str, encoding);
    };
    StringUtils2.getCharCode = function(str, index) {
      if (index === void 0) {
        index = 0;
      }
      return str.charCodeAt(index);
    };
    StringUtils2.getCharAt = function(charCode) {
      return String.fromCharCode(charCode);
    };
    StringUtils2.SHIFT_JIS = CharacterSetECI_default.SJIS.getName();
    StringUtils2.GB2312 = "GB2312";
    StringUtils2.ISO88591 = CharacterSetECI_default.ISO8859_1.getName();
    StringUtils2.EUC_JP = "EUC_JP";
    StringUtils2.UTF8 = CharacterSetECI_default.UTF8.getName();
    StringUtils2.PLATFORM_DEFAULT_ENCODING = StringUtils2.UTF8;
    StringUtils2.ASSUME_SHIFT_JIS = false;
    return StringUtils2;
  }()
);
var StringUtils_default = StringUtils;

// node_modules/@zxing/library/esm/core/util/StringBuilder.js
var StringBuilder = (
  /** @class */
  function() {
    function StringBuilder2(value) {
      if (value === void 0) {
        value = "";
      }
      this.value = value;
    }
    StringBuilder2.prototype.enableDecoding = function(encoding) {
      this.encoding = encoding;
      return this;
    };
    StringBuilder2.prototype.append = function(s) {
      if (typeof s === "string") {
        this.value += s.toString();
      } else if (this.encoding) {
        this.value += StringUtils_default.castAsNonUtf8Char(s, this.encoding);
      } else {
        this.value += String.fromCharCode(s);
      }
      return this;
    };
    StringBuilder2.prototype.appendChars = function(str, offset, len) {
      for (var i = offset; offset < offset + len; i++) {
        this.append(str[i]);
      }
      return this;
    };
    StringBuilder2.prototype.length = function() {
      return this.value.length;
    };
    StringBuilder2.prototype.charAt = function(n) {
      return this.value.charAt(n);
    };
    StringBuilder2.prototype.deleteCharAt = function(n) {
      this.value = this.value.substr(0, n) + this.value.substring(n + 1);
    };
    StringBuilder2.prototype.setCharAt = function(n, c) {
      this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);
    };
    StringBuilder2.prototype.substring = function(start, end) {
      return this.value.substring(start, end);
    };
    StringBuilder2.prototype.setLengthToZero = function() {
      this.value = "";
    };
    StringBuilder2.prototype.toString = function() {
      return this.value;
    };
    StringBuilder2.prototype.insert = function(n, c) {
      this.value = this.value.substring(0, n) + c + this.value.substring(n);
    };
    return StringBuilder2;
  }()
);
var StringBuilder_default = StringBuilder;

// node_modules/@zxing/library/esm/core/common/BitMatrix.js
var BitMatrix = (
  /** @class */
  function() {
    function BitMatrix2(width, height, rowSize, bits) {
      this.width = width;
      this.height = height;
      this.rowSize = rowSize;
      this.bits = bits;
      if (void 0 === height || null === height) {
        height = width;
      }
      this.height = height;
      if (width < 1 || height < 1) {
        throw new IllegalArgumentException_default("Both dimensions must be greater than 0");
      }
      if (void 0 === rowSize || null === rowSize) {
        rowSize = Math.floor((width + 31) / 32);
      }
      this.rowSize = rowSize;
      if (void 0 === bits || null === bits) {
        this.bits = new Int32Array(this.rowSize * this.height);
      }
    }
    BitMatrix2.parseFromBooleanArray = function(image) {
      var height = image.length;
      var width = image[0].length;
      var bits = new BitMatrix2(width, height);
      for (var i = 0; i < height; i++) {
        var imageI = image[i];
        for (var j = 0; j < width; j++) {
          if (imageI[j]) {
            bits.set(j, i);
          }
        }
      }
      return bits;
    };
    BitMatrix2.parseFromString = function(stringRepresentation, setString, unsetString) {
      if (stringRepresentation === null) {
        throw new IllegalArgumentException_default("stringRepresentation cannot be null");
      }
      var bits = new Array(stringRepresentation.length);
      var bitsPos = 0;
      var rowStartPos = 0;
      var rowLength = -1;
      var nRows = 0;
      var pos = 0;
      while (pos < stringRepresentation.length) {
        if (stringRepresentation.charAt(pos) === "\n" || stringRepresentation.charAt(pos) === "\r") {
          if (bitsPos > rowStartPos) {
            if (rowLength === -1) {
              rowLength = bitsPos - rowStartPos;
            } else if (bitsPos - rowStartPos !== rowLength) {
              throw new IllegalArgumentException_default("row lengths do not match");
            }
            rowStartPos = bitsPos;
            nRows++;
          }
          pos++;
        } else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {
          pos += setString.length;
          bits[bitsPos] = true;
          bitsPos++;
        } else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {
          pos += unsetString.length;
          bits[bitsPos] = false;
          bitsPos++;
        } else {
          throw new IllegalArgumentException_default("illegal character encountered: " + stringRepresentation.substring(pos));
        }
      }
      if (bitsPos > rowStartPos) {
        if (rowLength === -1) {
          rowLength = bitsPos - rowStartPos;
        } else if (bitsPos - rowStartPos !== rowLength) {
          throw new IllegalArgumentException_default("row lengths do not match");
        }
        nRows++;
      }
      var matrix = new BitMatrix2(rowLength, nRows);
      for (var i = 0; i < bitsPos; i++) {
        if (bits[i]) {
          matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));
        }
      }
      return matrix;
    };
    BitMatrix2.prototype.get = function(x, y) {
      var offset = y * this.rowSize + Math.floor(x / 32);
      return (this.bits[offset] >>> (x & 31) & 1) !== 0;
    };
    BitMatrix2.prototype.set = function(x, y) {
      var offset = y * this.rowSize + Math.floor(x / 32);
      this.bits[offset] |= 1 << (x & 31) & 4294967295;
    };
    BitMatrix2.prototype.unset = function(x, y) {
      var offset = y * this.rowSize + Math.floor(x / 32);
      this.bits[offset] &= ~(1 << (x & 31) & 4294967295);
    };
    BitMatrix2.prototype.flip = function(x, y) {
      var offset = y * this.rowSize + Math.floor(x / 32);
      this.bits[offset] ^= 1 << (x & 31) & 4294967295;
    };
    BitMatrix2.prototype.xor = function(mask) {
      if (this.width !== mask.getWidth() || this.height !== mask.getHeight() || this.rowSize !== mask.getRowSize()) {
        throw new IllegalArgumentException_default("input matrix dimensions do not match");
      }
      var rowArray = new BitArray_default(Math.floor(this.width / 32) + 1);
      var rowSize = this.rowSize;
      var bits = this.bits;
      for (var y = 0, height = this.height; y < height; y++) {
        var offset = y * rowSize;
        var row = mask.getRow(y, rowArray).getBitArray();
        for (var x = 0; x < rowSize; x++) {
          bits[offset + x] ^= row[x];
        }
      }
    };
    BitMatrix2.prototype.clear = function() {
      var bits = this.bits;
      var max = bits.length;
      for (var i = 0; i < max; i++) {
        bits[i] = 0;
      }
    };
    BitMatrix2.prototype.setRegion = function(left, top, width, height) {
      if (top < 0 || left < 0) {
        throw new IllegalArgumentException_default("Left and top must be nonnegative");
      }
      if (height < 1 || width < 1) {
        throw new IllegalArgumentException_default("Height and width must be at least 1");
      }
      var right = left + width;
      var bottom = top + height;
      if (bottom > this.height || right > this.width) {
        throw new IllegalArgumentException_default("The region must fit inside the matrix");
      }
      var rowSize = this.rowSize;
      var bits = this.bits;
      for (var y = top; y < bottom; y++) {
        var offset = y * rowSize;
        for (var x = left; x < right; x++) {
          bits[offset + Math.floor(x / 32)] |= 1 << (x & 31) & 4294967295;
        }
      }
    };
    BitMatrix2.prototype.getRow = function(y, row) {
      if (row === null || row === void 0 || row.getSize() < this.width) {
        row = new BitArray_default(this.width);
      } else {
        row.clear();
      }
      var rowSize = this.rowSize;
      var bits = this.bits;
      var offset = y * rowSize;
      for (var x = 0; x < rowSize; x++) {
        row.setBulk(x * 32, bits[offset + x]);
      }
      return row;
    };
    BitMatrix2.prototype.setRow = function(y, row) {
      System_default.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);
    };
    BitMatrix2.prototype.rotate180 = function() {
      var width = this.getWidth();
      var height = this.getHeight();
      var topRow = new BitArray_default(width);
      var bottomRow = new BitArray_default(width);
      for (var i = 0, length_1 = Math.floor((height + 1) / 2); i < length_1; i++) {
        topRow = this.getRow(i, topRow);
        bottomRow = this.getRow(height - 1 - i, bottomRow);
        topRow.reverse();
        bottomRow.reverse();
        this.setRow(i, bottomRow);
        this.setRow(height - 1 - i, topRow);
      }
    };
    BitMatrix2.prototype.getEnclosingRectangle = function() {
      var width = this.width;
      var height = this.height;
      var rowSize = this.rowSize;
      var bits = this.bits;
      var left = width;
      var top = height;
      var right = -1;
      var bottom = -1;
      for (var y = 0; y < height; y++) {
        for (var x32 = 0; x32 < rowSize; x32++) {
          var theBits = bits[y * rowSize + x32];
          if (theBits !== 0) {
            if (y < top) {
              top = y;
            }
            if (y > bottom) {
              bottom = y;
            }
            if (x32 * 32 < left) {
              var bit = 0;
              while ((theBits << 31 - bit & 4294967295) === 0) {
                bit++;
              }
              if (x32 * 32 + bit < left) {
                left = x32 * 32 + bit;
              }
            }
            if (x32 * 32 + 31 > right) {
              var bit = 31;
              while (theBits >>> bit === 0) {
                bit--;
              }
              if (x32 * 32 + bit > right) {
                right = x32 * 32 + bit;
              }
            }
          }
        }
      }
      if (right < left || bottom < top) {
        return null;
      }
      return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);
    };
    BitMatrix2.prototype.getTopLeftOnBit = function() {
      var rowSize = this.rowSize;
      var bits = this.bits;
      var bitsOffset = 0;
      while (bitsOffset < bits.length && bits[bitsOffset] === 0) {
        bitsOffset++;
      }
      if (bitsOffset === bits.length) {
        return null;
      }
      var y = bitsOffset / rowSize;
      var x = bitsOffset % rowSize * 32;
      var theBits = bits[bitsOffset];
      var bit = 0;
      while ((theBits << 31 - bit & 4294967295) === 0) {
        bit++;
      }
      x += bit;
      return Int32Array.from([x, y]);
    };
    BitMatrix2.prototype.getBottomRightOnBit = function() {
      var rowSize = this.rowSize;
      var bits = this.bits;
      var bitsOffset = bits.length - 1;
      while (bitsOffset >= 0 && bits[bitsOffset] === 0) {
        bitsOffset--;
      }
      if (bitsOffset < 0) {
        return null;
      }
      var y = Math.floor(bitsOffset / rowSize);
      var x = Math.floor(bitsOffset % rowSize) * 32;
      var theBits = bits[bitsOffset];
      var bit = 31;
      while (theBits >>> bit === 0) {
        bit--;
      }
      x += bit;
      return Int32Array.from([x, y]);
    };
    BitMatrix2.prototype.getWidth = function() {
      return this.width;
    };
    BitMatrix2.prototype.getHeight = function() {
      return this.height;
    };
    BitMatrix2.prototype.getRowSize = function() {
      return this.rowSize;
    };
    BitMatrix2.prototype.equals = function(o) {
      if (!(o instanceof BitMatrix2)) {
        return false;
      }
      var other = o;
      return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize && Arrays_default.equals(this.bits, other.bits);
    };
    BitMatrix2.prototype.hashCode = function() {
      var hash = this.width;
      hash = 31 * hash + this.width;
      hash = 31 * hash + this.height;
      hash = 31 * hash + this.rowSize;
      hash = 31 * hash + Arrays_default.hashCode(this.bits);
      return hash;
    };
    BitMatrix2.prototype.toString = function(setString, unsetString, lineSeparator) {
      if (setString === void 0) {
        setString = "X ";
      }
      if (unsetString === void 0) {
        unsetString = "  ";
      }
      if (lineSeparator === void 0) {
        lineSeparator = "\n";
      }
      return this.buildToString(setString, unsetString, lineSeparator);
    };
    BitMatrix2.prototype.buildToString = function(setString, unsetString, lineSeparator) {
      var result = new StringBuilder_default();
      for (var y = 0, height = this.height; y < height; y++) {
        for (var x = 0, width = this.width; x < width; x++) {
          result.append(this.get(x, y) ? setString : unsetString);
        }
        result.append(lineSeparator);
      }
      return result.toString();
    };
    BitMatrix2.prototype.clone = function() {
      return new BitMatrix2(this.width, this.height, this.rowSize, this.bits.slice());
    };
    return BitMatrix2;
  }()
);
var BitMatrix_default = BitMatrix;

// node_modules/@zxing/library/esm/core/NotFoundException.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NotFoundException = (
  /** @class */
  function(_super) {
    __extends10(NotFoundException2, _super);
    function NotFoundException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NotFoundException2.getNotFoundInstance = function() {
      return new NotFoundException2();
    };
    NotFoundException2.kind = "NotFoundException";
    return NotFoundException2;
  }(Exception_default)
);
var NotFoundException_default = NotFoundException;

// node_modules/@zxing/library/esm/core/common/GlobalHistogramBinarizer.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GlobalHistogramBinarizer = (
  /** @class */
  function(_super) {
    __extends11(GlobalHistogramBinarizer2, _super);
    function GlobalHistogramBinarizer2(source) {
      var _this = _super.call(this, source) || this;
      _this.luminances = GlobalHistogramBinarizer2.EMPTY;
      _this.buckets = new Int32Array(GlobalHistogramBinarizer2.LUMINANCE_BUCKETS);
      return _this;
    }
    GlobalHistogramBinarizer2.prototype.getBlackRow = function(y, row) {
      var source = this.getLuminanceSource();
      var width = source.getWidth();
      if (row === void 0 || row === null || row.getSize() < width) {
        row = new BitArray_default(width);
      } else {
        row.clear();
      }
      this.initArrays(width);
      var localLuminances = source.getRow(y, this.luminances);
      var localBuckets = this.buckets;
      for (var x = 0; x < width; x++) {
        localBuckets[(localLuminances[x] & 255) >> GlobalHistogramBinarizer2.LUMINANCE_SHIFT]++;
      }
      var blackPoint = GlobalHistogramBinarizer2.estimateBlackPoint(localBuckets);
      if (width < 3) {
        for (var x = 0; x < width; x++) {
          if ((localLuminances[x] & 255) < blackPoint) {
            row.set(x);
          }
        }
      } else {
        var left = localLuminances[0] & 255;
        var center = localLuminances[1] & 255;
        for (var x = 1; x < width - 1; x++) {
          var right = localLuminances[x + 1] & 255;
          if ((center * 4 - left - right) / 2 < blackPoint) {
            row.set(x);
          }
          left = center;
          center = right;
        }
      }
      return row;
    };
    GlobalHistogramBinarizer2.prototype.getBlackMatrix = function() {
      var source = this.getLuminanceSource();
      var width = source.getWidth();
      var height = source.getHeight();
      var matrix = new BitMatrix_default(width, height);
      this.initArrays(width);
      var localBuckets = this.buckets;
      for (var y = 1; y < 5; y++) {
        var row = Math.floor(height * y / 5);
        var localLuminances_1 = source.getRow(row, this.luminances);
        var right = Math.floor(width * 4 / 5);
        for (var x = Math.floor(width / 5); x < right; x++) {
          var pixel = localLuminances_1[x] & 255;
          localBuckets[pixel >> GlobalHistogramBinarizer2.LUMINANCE_SHIFT]++;
        }
      }
      var blackPoint = GlobalHistogramBinarizer2.estimateBlackPoint(localBuckets);
      var localLuminances = source.getMatrix();
      for (var y = 0; y < height; y++) {
        var offset = y * width;
        for (var x = 0; x < width; x++) {
          var pixel = localLuminances[offset + x] & 255;
          if (pixel < blackPoint) {
            matrix.set(x, y);
          }
        }
      }
      return matrix;
    };
    GlobalHistogramBinarizer2.prototype.createBinarizer = function(source) {
      return new GlobalHistogramBinarizer2(source);
    };
    GlobalHistogramBinarizer2.prototype.initArrays = function(luminanceSize) {
      if (this.luminances.length < luminanceSize) {
        this.luminances = new Uint8ClampedArray(luminanceSize);
      }
      var buckets = this.buckets;
      for (var x = 0; x < GlobalHistogramBinarizer2.LUMINANCE_BUCKETS; x++) {
        buckets[x] = 0;
      }
    };
    GlobalHistogramBinarizer2.estimateBlackPoint = function(buckets) {
      var numBuckets = buckets.length;
      var maxBucketCount = 0;
      var firstPeak = 0;
      var firstPeakSize = 0;
      for (var x = 0; x < numBuckets; x++) {
        if (buckets[x] > firstPeakSize) {
          firstPeak = x;
          firstPeakSize = buckets[x];
        }
        if (buckets[x] > maxBucketCount) {
          maxBucketCount = buckets[x];
        }
      }
      var secondPeak = 0;
      var secondPeakScore = 0;
      for (var x = 0; x < numBuckets; x++) {
        var distanceToBiggest = x - firstPeak;
        var score = buckets[x] * distanceToBiggest * distanceToBiggest;
        if (score > secondPeakScore) {
          secondPeak = x;
          secondPeakScore = score;
        }
      }
      if (firstPeak > secondPeak) {
        var temp = firstPeak;
        firstPeak = secondPeak;
        secondPeak = temp;
      }
      if (secondPeak - firstPeak <= numBuckets / 16) {
        throw new NotFoundException_default();
      }
      var bestValley = secondPeak - 1;
      var bestValleyScore = -1;
      for (var x = secondPeak - 1; x > firstPeak; x--) {
        var fromFirst = x - firstPeak;
        var score = fromFirst * fromFirst * (secondPeak - x) * (maxBucketCount - buckets[x]);
        if (score > bestValleyScore) {
          bestValley = x;
          bestValleyScore = score;
        }
      }
      return bestValley << GlobalHistogramBinarizer2.LUMINANCE_SHIFT;
    };
    GlobalHistogramBinarizer2.LUMINANCE_BITS = 5;
    GlobalHistogramBinarizer2.LUMINANCE_SHIFT = 8 - GlobalHistogramBinarizer2.LUMINANCE_BITS;
    GlobalHistogramBinarizer2.LUMINANCE_BUCKETS = 1 << GlobalHistogramBinarizer2.LUMINANCE_BITS;
    GlobalHistogramBinarizer2.EMPTY = Uint8ClampedArray.from([0]);
    return GlobalHistogramBinarizer2;
  }(Binarizer_default)
);
var GlobalHistogramBinarizer_default = GlobalHistogramBinarizer;

// node_modules/@zxing/library/esm/core/common/HybridBinarizer.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HybridBinarizer = (
  /** @class */
  function(_super) {
    __extends12(HybridBinarizer2, _super);
    function HybridBinarizer2(source) {
      var _this = _super.call(this, source) || this;
      _this.matrix = null;
      return _this;
    }
    HybridBinarizer2.prototype.getBlackMatrix = function() {
      if (this.matrix !== null) {
        return this.matrix;
      }
      var source = this.getLuminanceSource();
      var width = source.getWidth();
      var height = source.getHeight();
      if (width >= HybridBinarizer2.MINIMUM_DIMENSION && height >= HybridBinarizer2.MINIMUM_DIMENSION) {
        var luminances = source.getMatrix();
        var subWidth = width >> HybridBinarizer2.BLOCK_SIZE_POWER;
        if ((width & HybridBinarizer2.BLOCK_SIZE_MASK) !== 0) {
          subWidth++;
        }
        var subHeight = height >> HybridBinarizer2.BLOCK_SIZE_POWER;
        if ((height & HybridBinarizer2.BLOCK_SIZE_MASK) !== 0) {
          subHeight++;
        }
        var blackPoints = HybridBinarizer2.calculateBlackPoints(luminances, subWidth, subHeight, width, height);
        var newMatrix = new BitMatrix_default(width, height);
        HybridBinarizer2.calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints, newMatrix);
        this.matrix = newMatrix;
      } else {
        this.matrix = _super.prototype.getBlackMatrix.call(this);
      }
      return this.matrix;
    };
    HybridBinarizer2.prototype.createBinarizer = function(source) {
      return new HybridBinarizer2(source);
    };
    HybridBinarizer2.calculateThresholdForBlock = function(luminances, subWidth, subHeight, width, height, blackPoints, matrix) {
      var maxYOffset = height - HybridBinarizer2.BLOCK_SIZE;
      var maxXOffset = width - HybridBinarizer2.BLOCK_SIZE;
      for (var y = 0; y < subHeight; y++) {
        var yoffset = y << HybridBinarizer2.BLOCK_SIZE_POWER;
        if (yoffset > maxYOffset) {
          yoffset = maxYOffset;
        }
        var top_1 = HybridBinarizer2.cap(y, 2, subHeight - 3);
        for (var x = 0; x < subWidth; x++) {
          var xoffset = x << HybridBinarizer2.BLOCK_SIZE_POWER;
          if (xoffset > maxXOffset) {
            xoffset = maxXOffset;
          }
          var left = HybridBinarizer2.cap(x, 2, subWidth - 3);
          var sum = 0;
          for (var z = -2; z <= 2; z++) {
            var blackRow = blackPoints[top_1 + z];
            sum += blackRow[left - 2] + blackRow[left - 1] + blackRow[left] + blackRow[left + 1] + blackRow[left + 2];
          }
          var average = sum / 25;
          HybridBinarizer2.thresholdBlock(luminances, xoffset, yoffset, average, width, matrix);
        }
      }
    };
    HybridBinarizer2.cap = function(value, min, max) {
      return value < min ? min : value > max ? max : value;
    };
    HybridBinarizer2.thresholdBlock = function(luminances, xoffset, yoffset, threshold, stride, matrix) {
      for (var y = 0, offset = yoffset * stride + xoffset; y < HybridBinarizer2.BLOCK_SIZE; y++, offset += stride) {
        for (var x = 0; x < HybridBinarizer2.BLOCK_SIZE; x++) {
          if ((luminances[offset + x] & 255) <= threshold) {
            matrix.set(xoffset + x, yoffset + y);
          }
        }
      }
    };
    HybridBinarizer2.calculateBlackPoints = function(luminances, subWidth, subHeight, width, height) {
      var maxYOffset = height - HybridBinarizer2.BLOCK_SIZE;
      var maxXOffset = width - HybridBinarizer2.BLOCK_SIZE;
      var blackPoints = new Array(subHeight);
      for (var y = 0; y < subHeight; y++) {
        blackPoints[y] = new Int32Array(subWidth);
        var yoffset = y << HybridBinarizer2.BLOCK_SIZE_POWER;
        if (yoffset > maxYOffset) {
          yoffset = maxYOffset;
        }
        for (var x = 0; x < subWidth; x++) {
          var xoffset = x << HybridBinarizer2.BLOCK_SIZE_POWER;
          if (xoffset > maxXOffset) {
            xoffset = maxXOffset;
          }
          var sum = 0;
          var min = 255;
          var max = 0;
          for (var yy = 0, offset = yoffset * width + xoffset; yy < HybridBinarizer2.BLOCK_SIZE; yy++, offset += width) {
            for (var xx = 0; xx < HybridBinarizer2.BLOCK_SIZE; xx++) {
              var pixel = luminances[offset + xx] & 255;
              sum += pixel;
              if (pixel < min) {
                min = pixel;
              }
              if (pixel > max) {
                max = pixel;
              }
            }
            if (max - min > HybridBinarizer2.MIN_DYNAMIC_RANGE) {
              for (yy++, offset += width; yy < HybridBinarizer2.BLOCK_SIZE; yy++, offset += width) {
                for (var xx = 0; xx < HybridBinarizer2.BLOCK_SIZE; xx++) {
                  sum += luminances[offset + xx] & 255;
                }
              }
            }
          }
          var average = sum >> HybridBinarizer2.BLOCK_SIZE_POWER * 2;
          if (max - min <= HybridBinarizer2.MIN_DYNAMIC_RANGE) {
            average = min / 2;
            if (y > 0 && x > 0) {
              var averageNeighborBlackPoint = (blackPoints[y - 1][x] + 2 * blackPoints[y][x - 1] + blackPoints[y - 1][x - 1]) / 4;
              if (min < averageNeighborBlackPoint) {
                average = averageNeighborBlackPoint;
              }
            }
          }
          blackPoints[y][x] = average;
        }
      }
      return blackPoints;
    };
    HybridBinarizer2.BLOCK_SIZE_POWER = 3;
    HybridBinarizer2.BLOCK_SIZE = 1 << HybridBinarizer2.BLOCK_SIZE_POWER;
    HybridBinarizer2.BLOCK_SIZE_MASK = HybridBinarizer2.BLOCK_SIZE - 1;
    HybridBinarizer2.MINIMUM_DIMENSION = HybridBinarizer2.BLOCK_SIZE * 5;
    HybridBinarizer2.MIN_DYNAMIC_RANGE = 24;
    return HybridBinarizer2;
  }(GlobalHistogramBinarizer_default)
);
var HybridBinarizer_default = HybridBinarizer;

// node_modules/@zxing/library/esm/core/LuminanceSource.js
var LuminanceSource = (
  /** @class */
  function() {
    function LuminanceSource2(width, height) {
      this.width = width;
      this.height = height;
    }
    LuminanceSource2.prototype.getWidth = function() {
      return this.width;
    };
    LuminanceSource2.prototype.getHeight = function() {
      return this.height;
    };
    LuminanceSource2.prototype.isCropSupported = function() {
      return false;
    };
    LuminanceSource2.prototype.crop = function(left, top, width, height) {
      throw new UnsupportedOperationException_default("This luminance source does not support cropping.");
    };
    LuminanceSource2.prototype.isRotateSupported = function() {
      return false;
    };
    LuminanceSource2.prototype.rotateCounterClockwise = function() {
      throw new UnsupportedOperationException_default("This luminance source does not support rotation by 90 degrees.");
    };
    LuminanceSource2.prototype.rotateCounterClockwise45 = function() {
      throw new UnsupportedOperationException_default("This luminance source does not support rotation by 45 degrees.");
    };
    LuminanceSource2.prototype.toString = function() {
      var row = new Uint8ClampedArray(this.width);
      var result = new StringBuilder_default();
      for (var y = 0; y < this.height; y++) {
        var sourceRow = this.getRow(y, row);
        for (var x = 0; x < this.width; x++) {
          var luminance = sourceRow[x] & 255;
          var c = void 0;
          if (luminance < 64) {
            c = "#";
          } else if (luminance < 128) {
            c = "+";
          } else if (luminance < 192) {
            c = ".";
          } else {
            c = " ";
          }
          result.append(c);
        }
        result.append("\n");
      }
      return result.toString();
    };
    return LuminanceSource2;
  }()
);
var LuminanceSource_default = LuminanceSource;

// node_modules/@zxing/library/esm/core/InvertedLuminanceSource.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var InvertedLuminanceSource = (
  /** @class */
  function(_super) {
    __extends13(InvertedLuminanceSource2, _super);
    function InvertedLuminanceSource2(delegate) {
      var _this = _super.call(this, delegate.getWidth(), delegate.getHeight()) || this;
      _this.delegate = delegate;
      return _this;
    }
    InvertedLuminanceSource2.prototype.getRow = function(y, row) {
      var sourceRow = this.delegate.getRow(y, row);
      var width = this.getWidth();
      for (var i = 0; i < width; i++) {
        sourceRow[i] = /*(byte)*/
        255 - (sourceRow[i] & 255);
      }
      return sourceRow;
    };
    InvertedLuminanceSource2.prototype.getMatrix = function() {
      var matrix = this.delegate.getMatrix();
      var length = this.getWidth() * this.getHeight();
      var invertedMatrix = new Uint8ClampedArray(length);
      for (var i = 0; i < length; i++) {
        invertedMatrix[i] = /*(byte)*/
        255 - (matrix[i] & 255);
      }
      return invertedMatrix;
    };
    InvertedLuminanceSource2.prototype.isCropSupported = function() {
      return this.delegate.isCropSupported();
    };
    InvertedLuminanceSource2.prototype.crop = function(left, top, width, height) {
      return new InvertedLuminanceSource2(this.delegate.crop(left, top, width, height));
    };
    InvertedLuminanceSource2.prototype.isRotateSupported = function() {
      return this.delegate.isRotateSupported();
    };
    InvertedLuminanceSource2.prototype.invert = function() {
      return this.delegate;
    };
    InvertedLuminanceSource2.prototype.rotateCounterClockwise = function() {
      return new InvertedLuminanceSource2(this.delegate.rotateCounterClockwise());
    };
    InvertedLuminanceSource2.prototype.rotateCounterClockwise45 = function() {
      return new InvertedLuminanceSource2(this.delegate.rotateCounterClockwise45());
    };
    return InvertedLuminanceSource2;
  }(LuminanceSource_default)
);
var InvertedLuminanceSource_default = InvertedLuminanceSource;

// node_modules/@zxing/library/esm/browser/HTMLCanvasElementLuminanceSource.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HTMLCanvasElementLuminanceSource = (
  /** @class */
  function(_super) {
    __extends14(HTMLCanvasElementLuminanceSource3, _super);
    function HTMLCanvasElementLuminanceSource3(canvas, doAutoInvert) {
      if (doAutoInvert === void 0) {
        doAutoInvert = false;
      }
      var _this = _super.call(this, canvas.width, canvas.height) || this;
      _this.canvas = canvas;
      _this.tempCanvasElement = null;
      _this.buffer = HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData(canvas, doAutoInvert);
      return _this;
    }
    HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData = function(canvas, doAutoInvert) {
      if (doAutoInvert === void 0) {
        doAutoInvert = false;
      }
      var imageData = canvas.getContext("2d").getImageData(0, 0, canvas.width, canvas.height);
      return HTMLCanvasElementLuminanceSource3.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height, doAutoInvert);
    };
    HTMLCanvasElementLuminanceSource3.toGrayscaleBuffer = function(imageBuffer, width, height, doAutoInvert) {
      if (doAutoInvert === void 0) {
        doAutoInvert = false;
      }
      var grayscaleBuffer = new Uint8ClampedArray(width * height);
      HTMLCanvasElementLuminanceSource3.FRAME_INDEX = !HTMLCanvasElementLuminanceSource3.FRAME_INDEX;
      if (HTMLCanvasElementLuminanceSource3.FRAME_INDEX || !doAutoInvert) {
        for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {
          var gray = void 0;
          var alpha = imageBuffer[i + 3];
          if (alpha === 0) {
            gray = 255;
          } else {
            var pixelR = imageBuffer[i];
            var pixelG = imageBuffer[i + 1];
            var pixelB = imageBuffer[i + 2];
            gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 512 >> 10;
          }
          grayscaleBuffer[j] = gray;
        }
      } else {
        for (var i = 0, j = 0, length_2 = imageBuffer.length; i < length_2; i += 4, j++) {
          var gray = void 0;
          var alpha = imageBuffer[i + 3];
          if (alpha === 0) {
            gray = 255;
          } else {
            var pixelR = imageBuffer[i];
            var pixelG = imageBuffer[i + 1];
            var pixelB = imageBuffer[i + 2];
            gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 512 >> 10;
          }
          grayscaleBuffer[j] = 255 - gray;
        }
      }
      return grayscaleBuffer;
    };
    HTMLCanvasElementLuminanceSource3.prototype.getRow = function(y, row) {
      if (y < 0 || y >= this.getHeight()) {
        throw new IllegalArgumentException_default("Requested row is outside the image: " + y);
      }
      var width = this.getWidth();
      var start = y * width;
      if (row === null) {
        row = this.buffer.slice(start, start + width);
      } else {
        if (row.length < width) {
          row = new Uint8ClampedArray(width);
        }
        row.set(this.buffer.slice(start, start + width));
      }
      return row;
    };
    HTMLCanvasElementLuminanceSource3.prototype.getMatrix = function() {
      return this.buffer;
    };
    HTMLCanvasElementLuminanceSource3.prototype.isCropSupported = function() {
      return true;
    };
    HTMLCanvasElementLuminanceSource3.prototype.crop = function(left, top, width, height) {
      _super.prototype.crop.call(this, left, top, width, height);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.isRotateSupported = function() {
      return true;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotateCounterClockwise = function() {
      this.rotate(-90);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotateCounterClockwise45 = function() {
      this.rotate(-45);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.getTempCanvasElement = function() {
      if (null === this.tempCanvasElement) {
        var tempCanvasElement = this.canvas.ownerDocument.createElement("canvas");
        tempCanvasElement.width = this.canvas.width;
        tempCanvasElement.height = this.canvas.height;
        this.tempCanvasElement = tempCanvasElement;
      }
      return this.tempCanvasElement;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotate = function(angle) {
      var tempCanvasElement = this.getTempCanvasElement();
      var tempContext = tempCanvasElement.getContext("2d");
      var angleRadians = angle * HTMLCanvasElementLuminanceSource3.DEGREE_TO_RADIANS;
      var width = this.canvas.width;
      var height = this.canvas.height;
      var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);
      var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);
      tempCanvasElement.width = newWidth;
      tempCanvasElement.height = newHeight;
      tempContext.translate(newWidth / 2, newHeight / 2);
      tempContext.rotate(angleRadians);
      tempContext.drawImage(this.canvas, width / -2, height / -2);
      this.buffer = HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData(tempCanvasElement);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.invert = function() {
      return new InvertedLuminanceSource_default(this);
    };
    HTMLCanvasElementLuminanceSource3.DEGREE_TO_RADIANS = Math.PI / 180;
    HTMLCanvasElementLuminanceSource3.FRAME_INDEX = true;
    return HTMLCanvasElementLuminanceSource3;
  }(LuminanceSource_default)
);

// node_modules/@zxing/library/esm/browser/VideoInputDevice.js
var VideoInputDevice = (
  /** @class */
  function() {
    function VideoInputDevice2(deviceId, label, groupId) {
      this.deviceId = deviceId;
      this.label = label;
      this.kind = "videoinput";
      this.groupId = groupId || void 0;
    }
    VideoInputDevice2.prototype.toJSON = function() {
      return {
        kind: this.kind,
        groupId: this.groupId,
        deviceId: this.deviceId,
        label: this.label
      };
    };
    return VideoInputDevice2;
  }()
);

// node_modules/@zxing/library/esm/browser/BrowserCodeReader.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __values3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BrowserCodeReader = (
  /** @class */
  function() {
    function BrowserCodeReader3(reader, timeBetweenScansMillis, _hints) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      this.reader = reader;
      this.timeBetweenScansMillis = timeBetweenScansMillis;
      this._hints = _hints;
      this._stopContinuousDecode = false;
      this._stopAsyncDecode = false;
      this._timeBetweenDecodingAttempts = 0;
    }
    Object.defineProperty(BrowserCodeReader3.prototype, "hasNavigator", {
      /**
       * If navigator is present.
       */
      get: function() {
        return typeof navigator !== "undefined";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BrowserCodeReader3.prototype, "isMediaDevicesSuported", {
      /**
       * If mediaDevices under navigator is supported.
       */
      get: function() {
        return this.hasNavigator && !!navigator.mediaDevices;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BrowserCodeReader3.prototype, "canEnumerateDevices", {
      /**
       * If enumerateDevices under navigator is supported.
       */
      get: function() {
        return !!(this.isMediaDevicesSuported && navigator.mediaDevices.enumerateDevices);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BrowserCodeReader3.prototype, "timeBetweenDecodingAttempts", {
      /** Time between two decoding tries in milli seconds. */
      get: function() {
        return this._timeBetweenDecodingAttempts;
      },
      /**
       * Change the time span the decoder waits between two decoding tries.
       *
       * @param {number} millis Time between two decoding tries in milli seconds.
       */
      set: function(millis) {
        this._timeBetweenDecodingAttempts = millis < 0 ? 0 : millis;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BrowserCodeReader3.prototype, "hints", {
      /**
       * Sets the hints.
       */
      get: function() {
        return this._hints;
      },
      /**
       * Sets the hints.
       */
      set: function(hints) {
        this._hints = hints || null;
      },
      enumerable: false,
      configurable: true
    });
    BrowserCodeReader3.prototype.listVideoInputDevices = function() {
      return __awaiter(this, void 0, void 0, function() {
        var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;
        var e_1, _a2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!this.hasNavigator) {
                throw new Error("Can't enumerate devices, navigator is not present.");
              }
              if (!this.canEnumerateDevices) {
                throw new Error("Can't enumerate devices, method not supported.");
              }
              return [4, navigator.mediaDevices.enumerateDevices()];
            case 1:
              devices = _b.sent();
              videoDevices = [];
              try {
                for (devices_1 = __values3(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
                  device = devices_1_1.value;
                  kind = device.kind === "video" ? "videoinput" : device.kind;
                  if (kind !== "videoinput") {
                    continue;
                  }
                  deviceId = device.deviceId || device.id;
                  label = device.label || "Video device " + (videoDevices.length + 1);
                  groupId = device.groupId;
                  videoDevice = { deviceId, label, kind, groupId };
                  videoDevices.push(videoDevice);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (devices_1_1 && !devices_1_1.done && (_a2 = devices_1.return)) _a2.call(devices_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
              return [2, videoDevices];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.getVideoInputDevices = function() {
      return __awaiter(this, void 0, void 0, function() {
        var devices;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.listVideoInputDevices()];
            case 1:
              devices = _a2.sent();
              return [2, devices.map(function(d) {
                return new VideoInputDevice(d.deviceId, d.label);
              })];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.findDeviceById = function(deviceId) {
      return __awaiter(this, void 0, void 0, function() {
        var devices;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.listVideoInputDevices()];
            case 1:
              devices = _a2.sent();
              if (!devices) {
                return [2, null];
              }
              return [2, devices.find(function(x) {
                return x.deviceId === deviceId;
              })];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromInputVideoDevice = function(deviceId, videoSource) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.decodeOnceFromVideoDevice(deviceId, videoSource)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromVideoDevice = function(deviceId, videoSource) {
      return __awaiter(this, void 0, void 0, function() {
        var videoConstraints, constraints;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.reset();
              if (!deviceId) {
                videoConstraints = { facingMode: "environment" };
              } else {
                videoConstraints = { deviceId: { exact: deviceId } };
              }
              constraints = { video: videoConstraints };
              return [4, this.decodeOnceFromConstraints(constraints, videoSource)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromConstraints = function(constraints, videoSource) {
      return __awaiter(this, void 0, void 0, function() {
        var stream;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, navigator.mediaDevices.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              return [4, this.decodeOnceFromStream(stream, videoSource)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromStream = function(stream, videoSource) {
      return __awaiter(this, void 0, void 0, function() {
        var video, result;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.reset();
              return [4, this.attachStreamToVideo(stream, videoSource)];
            case 1:
              video = _a2.sent();
              return [4, this.decodeOnce(video)];
            case 2:
              result = _a2.sent();
              return [2, result];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromInputVideoDeviceContinuously = function(deviceId, videoSource, callbackFn) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.decodeFromVideoDevice(deviceId, videoSource, callbackFn)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromVideoDevice = function(deviceId, videoSource, callbackFn) {
      return __awaiter(this, void 0, void 0, function() {
        var videoConstraints, constraints;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!deviceId) {
                videoConstraints = { facingMode: "environment" };
              } else {
                videoConstraints = { deviceId: { exact: deviceId } };
              }
              constraints = { video: videoConstraints };
              return [4, this.decodeFromConstraints(constraints, videoSource, callbackFn)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromConstraints = function(constraints, videoSource, callbackFn) {
      return __awaiter(this, void 0, void 0, function() {
        var stream;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, navigator.mediaDevices.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              return [4, this.decodeFromStream(stream, videoSource, callbackFn)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromStream = function(stream, videoSource, callbackFn) {
      return __awaiter(this, void 0, void 0, function() {
        var video;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.reset();
              return [4, this.attachStreamToVideo(stream, videoSource)];
            case 1:
              video = _a2.sent();
              return [4, this.decodeContinuously(video, callbackFn)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.stopAsyncDecode = function() {
      this._stopAsyncDecode = true;
    };
    BrowserCodeReader3.prototype.stopContinuousDecode = function() {
      this._stopContinuousDecode = true;
    };
    BrowserCodeReader3.prototype.attachStreamToVideo = function(stream, videoSource) {
      return __awaiter(this, void 0, void 0, function() {
        var videoElement;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              videoElement = this.prepareVideoElement(videoSource);
              this.addVideoSource(videoElement, stream);
              this.videoElement = videoElement;
              this.stream = stream;
              return [4, this.playVideoOnLoadAsync(videoElement)];
            case 1:
              _a2.sent();
              return [2, videoElement];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.playVideoOnLoadAsync = function(videoElement) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        return _this.playVideoOnLoad(videoElement, function() {
          return resolve();
        });
      });
    };
    BrowserCodeReader3.prototype.playVideoOnLoad = function(element, callbackFn) {
      var _this = this;
      this.videoEndedListener = function() {
        return _this.stopStreams();
      };
      this.videoCanPlayListener = function() {
        return _this.tryPlayVideo(element);
      };
      element.addEventListener("ended", this.videoEndedListener);
      element.addEventListener("canplay", this.videoCanPlayListener);
      element.addEventListener("playing", callbackFn);
      this.tryPlayVideo(element);
    };
    BrowserCodeReader3.prototype.isVideoPlaying = function(video) {
      return video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2;
    };
    BrowserCodeReader3.prototype.tryPlayVideo = function(videoElement) {
      return __awaiter(this, void 0, void 0, function() {
        var _a2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (this.isVideoPlaying(videoElement)) {
                console.warn("Trying to play video that is already playing.");
                return [
                  2
                  /*return*/
                ];
              }
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, videoElement.play()];
            case 2:
              _b.sent();
              return [3, 4];
            case 3:
              _a2 = _b.sent();
              console.warn("It was not possible to play the video.");
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.getMediaElement = function(mediaElementId, type) {
      var mediaElement = document.getElementById(mediaElementId);
      if (!mediaElement) {
        throw new ArgumentException_default("element with id '" + mediaElementId + "' not found");
      }
      if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {
        throw new ArgumentException_default("element with id '" + mediaElementId + "' must be an " + type + " element");
      }
      return mediaElement;
    };
    BrowserCodeReader3.prototype.decodeFromImage = function(source, url) {
      if (!source && !url) {
        throw new ArgumentException_default("either imageElement with a src set or an url must be provided");
      }
      if (url && !source) {
        return this.decodeFromImageUrl(url);
      }
      return this.decodeFromImageElement(source);
    };
    BrowserCodeReader3.prototype.decodeFromVideo = function(source, url) {
      if (!source && !url) {
        throw new ArgumentException_default("Either an element with a src set or an URL must be provided");
      }
      if (url && !source) {
        return this.decodeFromVideoUrl(url);
      }
      return this.decodeFromVideoElement(source);
    };
    BrowserCodeReader3.prototype.decodeFromVideoContinuously = function(source, url, callbackFn) {
      if (void 0 === source && void 0 === url) {
        throw new ArgumentException_default("Either an element with a src set or an URL must be provided");
      }
      if (url && !source) {
        return this.decodeFromVideoUrlContinuously(url, callbackFn);
      }
      return this.decodeFromVideoElementContinuously(source, callbackFn);
    };
    BrowserCodeReader3.prototype.decodeFromImageElement = function(source) {
      if (!source) {
        throw new ArgumentException_default("An image element must be provided.");
      }
      this.reset();
      var element = this.prepareImageElement(source);
      this.imageElement = element;
      var task;
      if (this.isImageLoaded(element)) {
        task = this.decodeOnce(element, false, true);
      } else {
        task = this._decodeOnLoadImage(element);
      }
      return task;
    };
    BrowserCodeReader3.prototype.decodeFromVideoElement = function(source) {
      var element = this._decodeFromVideoElementSetup(source);
      return this._decodeOnLoadVideo(element);
    };
    BrowserCodeReader3.prototype.decodeFromVideoElementContinuously = function(source, callbackFn) {
      var element = this._decodeFromVideoElementSetup(source);
      return this._decodeOnLoadVideoContinuously(element, callbackFn);
    };
    BrowserCodeReader3.prototype._decodeFromVideoElementSetup = function(source) {
      if (!source) {
        throw new ArgumentException_default("A video element must be provided.");
      }
      this.reset();
      var element = this.prepareVideoElement(source);
      this.videoElement = element;
      return element;
    };
    BrowserCodeReader3.prototype.decodeFromImageUrl = function(url) {
      if (!url) {
        throw new ArgumentException_default("An URL must be provided.");
      }
      this.reset();
      var element = this.prepareImageElement();
      this.imageElement = element;
      var decodeTask = this._decodeOnLoadImage(element);
      element.src = url;
      return decodeTask;
    };
    BrowserCodeReader3.prototype.decodeFromVideoUrl = function(url) {
      if (!url) {
        throw new ArgumentException_default("An URL must be provided.");
      }
      this.reset();
      var element = this.prepareVideoElement();
      var decodeTask = this.decodeFromVideoElement(element);
      element.src = url;
      return decodeTask;
    };
    BrowserCodeReader3.prototype.decodeFromVideoUrlContinuously = function(url, callbackFn) {
      if (!url) {
        throw new ArgumentException_default("An URL must be provided.");
      }
      this.reset();
      var element = this.prepareVideoElement();
      var decodeTask = this.decodeFromVideoElementContinuously(element, callbackFn);
      element.src = url;
      return decodeTask;
    };
    BrowserCodeReader3.prototype._decodeOnLoadImage = function(element) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        _this.imageLoadedListener = function() {
          return _this.decodeOnce(element, false, true).then(resolve, reject);
        };
        element.addEventListener("load", _this.imageLoadedListener);
      });
    };
    BrowserCodeReader3.prototype._decodeOnLoadVideo = function(videoElement) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.playVideoOnLoadAsync(videoElement)];
            case 1:
              _a2.sent();
              return [4, this.decodeOnce(videoElement)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype._decodeOnLoadVideoContinuously = function(videoElement, callbackFn) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.playVideoOnLoadAsync(videoElement)];
            case 1:
              _a2.sent();
              this.decodeContinuously(videoElement, callbackFn);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.isImageLoaded = function(img) {
      if (!img.complete) {
        return false;
      }
      if (img.naturalWidth === 0) {
        return false;
      }
      return true;
    };
    BrowserCodeReader3.prototype.prepareImageElement = function(imageSource) {
      var imageElement;
      if (typeof imageSource === "undefined") {
        imageElement = document.createElement("img");
        imageElement.width = 200;
        imageElement.height = 200;
      }
      if (typeof imageSource === "string") {
        imageElement = this.getMediaElement(imageSource, "img");
      }
      if (imageSource instanceof HTMLImageElement) {
        imageElement = imageSource;
      }
      return imageElement;
    };
    BrowserCodeReader3.prototype.prepareVideoElement = function(videoSource) {
      var videoElement;
      if (!videoSource && typeof document !== "undefined") {
        videoElement = document.createElement("video");
        videoElement.width = 200;
        videoElement.height = 200;
      }
      if (typeof videoSource === "string") {
        videoElement = this.getMediaElement(videoSource, "video");
      }
      if (videoSource instanceof HTMLVideoElement) {
        videoElement = videoSource;
      }
      videoElement.setAttribute("autoplay", "true");
      videoElement.setAttribute("muted", "true");
      videoElement.setAttribute("playsinline", "true");
      return videoElement;
    };
    BrowserCodeReader3.prototype.decodeOnce = function(element, retryIfNotFound, retryIfChecksumOrFormatError) {
      var _this = this;
      if (retryIfNotFound === void 0) {
        retryIfNotFound = true;
      }
      if (retryIfChecksumOrFormatError === void 0) {
        retryIfChecksumOrFormatError = true;
      }
      this._stopAsyncDecode = false;
      var loop = function(resolve, reject) {
        if (_this._stopAsyncDecode) {
          reject(new NotFoundException_default("Video stream has ended before any code could be detected."));
          _this._stopAsyncDecode = void 0;
          return;
        }
        try {
          var result = _this.decode(element);
          resolve(result);
        } catch (e) {
          var ifNotFound = retryIfNotFound && e instanceof NotFoundException_default;
          var isChecksumOrFormatError = e instanceof ChecksumException_default || e instanceof FormatException_default;
          var ifChecksumOrFormat = isChecksumOrFormatError && retryIfChecksumOrFormatError;
          if (ifNotFound || ifChecksumOrFormat) {
            return setTimeout(loop, _this._timeBetweenDecodingAttempts, resolve, reject);
          }
          reject(e);
        }
      };
      return new Promise(function(resolve, reject) {
        return loop(resolve, reject);
      });
    };
    BrowserCodeReader3.prototype.decodeContinuously = function(element, callbackFn) {
      var _this = this;
      this._stopContinuousDecode = false;
      var loop = function() {
        if (_this._stopContinuousDecode) {
          _this._stopContinuousDecode = void 0;
          return;
        }
        try {
          var result = _this.decode(element);
          callbackFn(result, null);
          setTimeout(loop, _this.timeBetweenScansMillis);
        } catch (e) {
          callbackFn(null, e);
          var isChecksumOrFormatError = e instanceof ChecksumException_default || e instanceof FormatException_default;
          var isNotFound = e instanceof NotFoundException_default;
          if (isChecksumOrFormatError || isNotFound) {
            setTimeout(loop, _this._timeBetweenDecodingAttempts);
          }
        }
      };
      loop();
    };
    BrowserCodeReader3.prototype.decode = function(element) {
      var binaryBitmap = this.createBinaryBitmap(element);
      return this.decodeBitmap(binaryBitmap);
    };
    BrowserCodeReader3.prototype.createBinaryBitmap = function(mediaElement) {
      var ctx = this.getCaptureCanvasContext(mediaElement);
      var doAutoInvert = false;
      if (mediaElement instanceof HTMLVideoElement) {
        this.drawFrameOnCanvas(mediaElement);
        doAutoInvert = true;
      } else {
        this.drawImageOnCanvas(mediaElement);
      }
      var canvas = this.getCaptureCanvas(mediaElement);
      var luminanceSource = new HTMLCanvasElementLuminanceSource(canvas, doAutoInvert);
      var hybridBinarizer = new HybridBinarizer_default(luminanceSource);
      return new BinaryBitmap_default(hybridBinarizer);
    };
    BrowserCodeReader3.prototype.getCaptureCanvasContext = function(mediaElement) {
      if (!this.captureCanvasContext) {
        var elem = this.getCaptureCanvas(mediaElement);
        var ctx = void 0;
        try {
          ctx = elem.getContext("2d", { willReadFrequently: true });
        } catch (e) {
          ctx = elem.getContext("2d");
        }
        this.captureCanvasContext = ctx;
      }
      return this.captureCanvasContext;
    };
    BrowserCodeReader3.prototype.getCaptureCanvas = function(mediaElement) {
      if (!this.captureCanvas) {
        var elem = this.createCaptureCanvas(mediaElement);
        this.captureCanvas = elem;
      }
      return this.captureCanvas;
    };
    BrowserCodeReader3.prototype.drawFrameOnCanvas = function(srcElement, dimensions, canvasElementContext) {
      if (dimensions === void 0) {
        dimensions = {
          sx: 0,
          sy: 0,
          sWidth: srcElement.videoWidth,
          sHeight: srcElement.videoHeight,
          dx: 0,
          dy: 0,
          dWidth: srcElement.videoWidth,
          dHeight: srcElement.videoHeight
        };
      }
      if (canvasElementContext === void 0) {
        canvasElementContext = this.captureCanvasContext;
      }
      canvasElementContext.drawImage(srcElement, dimensions.sx, dimensions.sy, dimensions.sWidth, dimensions.sHeight, dimensions.dx, dimensions.dy, dimensions.dWidth, dimensions.dHeight);
    };
    BrowserCodeReader3.prototype.drawImageOnCanvas = function(srcElement, dimensions, canvasElementContext) {
      if (dimensions === void 0) {
        dimensions = {
          sx: 0,
          sy: 0,
          sWidth: srcElement.naturalWidth,
          sHeight: srcElement.naturalHeight,
          dx: 0,
          dy: 0,
          dWidth: srcElement.naturalWidth,
          dHeight: srcElement.naturalHeight
        };
      }
      if (canvasElementContext === void 0) {
        canvasElementContext = this.captureCanvasContext;
      }
      canvasElementContext.drawImage(srcElement, dimensions.sx, dimensions.sy, dimensions.sWidth, dimensions.sHeight, dimensions.dx, dimensions.dy, dimensions.dWidth, dimensions.dHeight);
    };
    BrowserCodeReader3.prototype.decodeBitmap = function(binaryBitmap) {
      return this.reader.decode(binaryBitmap, this._hints);
    };
    BrowserCodeReader3.prototype.createCaptureCanvas = function(mediaElement) {
      if (typeof document === "undefined") {
        this._destroyCaptureCanvas();
        return null;
      }
      var canvasElement = document.createElement("canvas");
      var width;
      var height;
      if (typeof mediaElement !== "undefined") {
        if (mediaElement instanceof HTMLVideoElement) {
          width = mediaElement.videoWidth;
          height = mediaElement.videoHeight;
        } else if (mediaElement instanceof HTMLImageElement) {
          width = mediaElement.naturalWidth || mediaElement.width;
          height = mediaElement.naturalHeight || mediaElement.height;
        }
      }
      canvasElement.style.width = width + "px";
      canvasElement.style.height = height + "px";
      canvasElement.width = width;
      canvasElement.height = height;
      return canvasElement;
    };
    BrowserCodeReader3.prototype.stopStreams = function() {
      if (this.stream) {
        this.stream.getVideoTracks().forEach(function(t) {
          return t.stop();
        });
        this.stream = void 0;
      }
      if (this._stopAsyncDecode === false) {
        this.stopAsyncDecode();
      }
      if (this._stopContinuousDecode === false) {
        this.stopContinuousDecode();
      }
    };
    BrowserCodeReader3.prototype.reset = function() {
      this.stopStreams();
      this._destroyVideoElement();
      this._destroyImageElement();
      this._destroyCaptureCanvas();
    };
    BrowserCodeReader3.prototype._destroyVideoElement = function() {
      if (!this.videoElement) {
        return;
      }
      if (typeof this.videoEndedListener !== "undefined") {
        this.videoElement.removeEventListener("ended", this.videoEndedListener);
      }
      if (typeof this.videoPlayingEventListener !== "undefined") {
        this.videoElement.removeEventListener("playing", this.videoPlayingEventListener);
      }
      if (typeof this.videoCanPlayListener !== "undefined") {
        this.videoElement.removeEventListener("loadedmetadata", this.videoCanPlayListener);
      }
      this.cleanVideoSource(this.videoElement);
      this.videoElement = void 0;
    };
    BrowserCodeReader3.prototype._destroyImageElement = function() {
      if (!this.imageElement) {
        return;
      }
      if (void 0 !== this.imageLoadedListener) {
        this.imageElement.removeEventListener("load", this.imageLoadedListener);
      }
      this.imageElement.src = void 0;
      this.imageElement.removeAttribute("src");
      this.imageElement = void 0;
    };
    BrowserCodeReader3.prototype._destroyCaptureCanvas = function() {
      this.captureCanvasContext = void 0;
      this.captureCanvas = void 0;
    };
    BrowserCodeReader3.prototype.addVideoSource = function(videoElement, stream) {
      try {
        videoElement.srcObject = stream;
      } catch (err) {
        videoElement.src = URL.createObjectURL(stream);
      }
    };
    BrowserCodeReader3.prototype.cleanVideoSource = function(videoElement) {
      try {
        videoElement.srcObject = null;
      } catch (err) {
        videoElement.src = "";
      }
      this.videoElement.removeAttribute("src");
    };
    return BrowserCodeReader3;
  }()
);

// node_modules/@zxing/library/esm/core/Result.js
var Result = (
  /** @class */
  function() {
    function Result3(text, rawBytes, numBits, resultPoints, format, timestamp) {
      if (numBits === void 0) {
        numBits = rawBytes == null ? 0 : 8 * rawBytes.length;
      }
      if (timestamp === void 0) {
        timestamp = System_default.currentTimeMillis();
      }
      this.text = text;
      this.rawBytes = rawBytes;
      this.numBits = numBits;
      this.resultPoints = resultPoints;
      this.format = format;
      this.timestamp = timestamp;
      this.text = text;
      this.rawBytes = rawBytes;
      if (void 0 === numBits || null === numBits) {
        this.numBits = rawBytes === null || rawBytes === void 0 ? 0 : 8 * rawBytes.length;
      } else {
        this.numBits = numBits;
      }
      this.resultPoints = resultPoints;
      this.format = format;
      this.resultMetadata = null;
      if (void 0 === timestamp || null === timestamp) {
        this.timestamp = System_default.currentTimeMillis();
      } else {
        this.timestamp = timestamp;
      }
    }
    Result3.prototype.getText = function() {
      return this.text;
    };
    Result3.prototype.getRawBytes = function() {
      return this.rawBytes;
    };
    Result3.prototype.getNumBits = function() {
      return this.numBits;
    };
    Result3.prototype.getResultPoints = function() {
      return this.resultPoints;
    };
    Result3.prototype.getBarcodeFormat = function() {
      return this.format;
    };
    Result3.prototype.getResultMetadata = function() {
      return this.resultMetadata;
    };
    Result3.prototype.putMetadata = function(type, value) {
      if (this.resultMetadata === null) {
        this.resultMetadata = /* @__PURE__ */ new Map();
      }
      this.resultMetadata.set(type, value);
    };
    Result3.prototype.putAllMetadata = function(metadata) {
      if (metadata !== null) {
        if (this.resultMetadata === null) {
          this.resultMetadata = metadata;
        } else {
          this.resultMetadata = new Map(metadata);
        }
      }
    };
    Result3.prototype.addResultPoints = function(newPoints) {
      var oldPoints = this.resultPoints;
      if (oldPoints === null) {
        this.resultPoints = newPoints;
      } else if (newPoints !== null && newPoints.length > 0) {
        var allPoints = new Array(oldPoints.length + newPoints.length);
        System_default.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);
        System_default.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);
        this.resultPoints = allPoints;
      }
    };
    Result3.prototype.getTimestamp = function() {
      return this.timestamp;
    };
    Result3.prototype.toString = function() {
      return this.text;
    };
    return Result3;
  }()
);
var Result_default = Result;

// node_modules/@zxing/library/esm/core/BarcodeFormat.js
var BarcodeFormat;
(function(BarcodeFormat2) {
  BarcodeFormat2[BarcodeFormat2["AZTEC"] = 0] = "AZTEC";
  BarcodeFormat2[BarcodeFormat2["CODABAR"] = 1] = "CODABAR";
  BarcodeFormat2[BarcodeFormat2["CODE_39"] = 2] = "CODE_39";
  BarcodeFormat2[BarcodeFormat2["CODE_93"] = 3] = "CODE_93";
  BarcodeFormat2[BarcodeFormat2["CODE_128"] = 4] = "CODE_128";
  BarcodeFormat2[BarcodeFormat2["DATA_MATRIX"] = 5] = "DATA_MATRIX";
  BarcodeFormat2[BarcodeFormat2["EAN_8"] = 6] = "EAN_8";
  BarcodeFormat2[BarcodeFormat2["EAN_13"] = 7] = "EAN_13";
  BarcodeFormat2[BarcodeFormat2["ITF"] = 8] = "ITF";
  BarcodeFormat2[BarcodeFormat2["MAXICODE"] = 9] = "MAXICODE";
  BarcodeFormat2[BarcodeFormat2["PDF_417"] = 10] = "PDF_417";
  BarcodeFormat2[BarcodeFormat2["QR_CODE"] = 11] = "QR_CODE";
  BarcodeFormat2[BarcodeFormat2["RSS_14"] = 12] = "RSS_14";
  BarcodeFormat2[BarcodeFormat2["RSS_EXPANDED"] = 13] = "RSS_EXPANDED";
  BarcodeFormat2[BarcodeFormat2["UPC_A"] = 14] = "UPC_A";
  BarcodeFormat2[BarcodeFormat2["UPC_E"] = 15] = "UPC_E";
  BarcodeFormat2[BarcodeFormat2["UPC_EAN_EXTENSION"] = 16] = "UPC_EAN_EXTENSION";
})(BarcodeFormat || (BarcodeFormat = {}));
var BarcodeFormat_default = BarcodeFormat;

// node_modules/@zxing/library/esm/core/ResultMetadataType.js
var ResultMetadataType;
(function(ResultMetadataType2) {
  ResultMetadataType2[ResultMetadataType2["OTHER"] = 0] = "OTHER";
  ResultMetadataType2[ResultMetadataType2["ORIENTATION"] = 1] = "ORIENTATION";
  ResultMetadataType2[ResultMetadataType2["BYTE_SEGMENTS"] = 2] = "BYTE_SEGMENTS";
  ResultMetadataType2[ResultMetadataType2["ERROR_CORRECTION_LEVEL"] = 3] = "ERROR_CORRECTION_LEVEL";
  ResultMetadataType2[ResultMetadataType2["ISSUE_NUMBER"] = 4] = "ISSUE_NUMBER";
  ResultMetadataType2[ResultMetadataType2["SUGGESTED_PRICE"] = 5] = "SUGGESTED_PRICE";
  ResultMetadataType2[ResultMetadataType2["POSSIBLE_COUNTRY"] = 6] = "POSSIBLE_COUNTRY";
  ResultMetadataType2[ResultMetadataType2["UPC_EAN_EXTENSION"] = 7] = "UPC_EAN_EXTENSION";
  ResultMetadataType2[ResultMetadataType2["PDF417_EXTRA_METADATA"] = 8] = "PDF417_EXTRA_METADATA";
  ResultMetadataType2[ResultMetadataType2["STRUCTURED_APPEND_SEQUENCE"] = 9] = "STRUCTURED_APPEND_SEQUENCE";
  ResultMetadataType2[ResultMetadataType2["STRUCTURED_APPEND_PARITY"] = 10] = "STRUCTURED_APPEND_PARITY";
})(ResultMetadataType || (ResultMetadataType = {}));
var ResultMetadataType_default = ResultMetadataType;

// node_modules/@zxing/library/esm/core/common/DecoderResult.js
var DecoderResult = (
  /** @class */
  function() {
    function DecoderResult2(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {
      if (structuredAppendSequenceNumber === void 0) {
        structuredAppendSequenceNumber = -1;
      }
      if (structuredAppendParity === void 0) {
        structuredAppendParity = -1;
      }
      this.rawBytes = rawBytes;
      this.text = text;
      this.byteSegments = byteSegments;
      this.ecLevel = ecLevel;
      this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;
      this.structuredAppendParity = structuredAppendParity;
      this.numBits = rawBytes === void 0 || rawBytes === null ? 0 : 8 * rawBytes.length;
    }
    DecoderResult2.prototype.getRawBytes = function() {
      return this.rawBytes;
    };
    DecoderResult2.prototype.getNumBits = function() {
      return this.numBits;
    };
    DecoderResult2.prototype.setNumBits = function(numBits) {
      this.numBits = numBits;
    };
    DecoderResult2.prototype.getText = function() {
      return this.text;
    };
    DecoderResult2.prototype.getByteSegments = function() {
      return this.byteSegments;
    };
    DecoderResult2.prototype.getECLevel = function() {
      return this.ecLevel;
    };
    DecoderResult2.prototype.getErrorsCorrected = function() {
      return this.errorsCorrected;
    };
    DecoderResult2.prototype.setErrorsCorrected = function(errorsCorrected) {
      this.errorsCorrected = errorsCorrected;
    };
    DecoderResult2.prototype.getErasures = function() {
      return this.erasures;
    };
    DecoderResult2.prototype.setErasures = function(erasures) {
      this.erasures = erasures;
    };
    DecoderResult2.prototype.getOther = function() {
      return this.other;
    };
    DecoderResult2.prototype.setOther = function(other) {
      this.other = other;
    };
    DecoderResult2.prototype.hasStructuredAppend = function() {
      return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;
    };
    DecoderResult2.prototype.getStructuredAppendParity = function() {
      return this.structuredAppendParity;
    };
    DecoderResult2.prototype.getStructuredAppendSequenceNumber = function() {
      return this.structuredAppendSequenceNumber;
    };
    return DecoderResult2;
  }()
);
var DecoderResult_default = DecoderResult;

// node_modules/@zxing/library/esm/core/common/reedsolomon/AbstractGenericGF.js
var AbstractGenericGF = (
  /** @class */
  function() {
    function AbstractGenericGF2() {
    }
    AbstractGenericGF2.prototype.exp = function(a) {
      return this.expTable[a];
    };
    AbstractGenericGF2.prototype.log = function(a) {
      if (a === 0) {
        throw new IllegalArgumentException_default();
      }
      return this.logTable[a];
    };
    AbstractGenericGF2.addOrSubtract = function(a, b) {
      return a ^ b;
    };
    return AbstractGenericGF2;
  }()
);
var AbstractGenericGF_default = AbstractGenericGF;

// node_modules/@zxing/library/esm/core/common/reedsolomon/GenericGFPoly.js
var GenericGFPoly = (
  /** @class */
  function() {
    function GenericGFPoly2(field, coefficients) {
      if (coefficients.length === 0) {
        throw new IllegalArgumentException_default();
      }
      this.field = field;
      var coefficientsLength = coefficients.length;
      if (coefficientsLength > 1 && coefficients[0] === 0) {
        var firstNonZero = 1;
        while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
          firstNonZero++;
        }
        if (firstNonZero === coefficientsLength) {
          this.coefficients = Int32Array.from([0]);
        } else {
          this.coefficients = new Int32Array(coefficientsLength - firstNonZero);
          System_default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);
        }
      } else {
        this.coefficients = coefficients;
      }
    }
    GenericGFPoly2.prototype.getCoefficients = function() {
      return this.coefficients;
    };
    GenericGFPoly2.prototype.getDegree = function() {
      return this.coefficients.length - 1;
    };
    GenericGFPoly2.prototype.isZero = function() {
      return this.coefficients[0] === 0;
    };
    GenericGFPoly2.prototype.getCoefficient = function(degree) {
      return this.coefficients[this.coefficients.length - 1 - degree];
    };
    GenericGFPoly2.prototype.evaluateAt = function(a) {
      if (a === 0) {
        return this.getCoefficient(0);
      }
      var coefficients = this.coefficients;
      var result;
      if (a === 1) {
        result = 0;
        for (var i = 0, length_1 = coefficients.length; i !== length_1; i++) {
          var coefficient = coefficients[i];
          result = AbstractGenericGF_default.addOrSubtract(result, coefficient);
        }
        return result;
      }
      result = coefficients[0];
      var size = coefficients.length;
      var field = this.field;
      for (var i = 1; i < size; i++) {
        result = AbstractGenericGF_default.addOrSubtract(field.multiply(a, result), coefficients[i]);
      }
      return result;
    };
    GenericGFPoly2.prototype.addOrSubtract = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("GenericGFPolys do not have same GenericGF field");
      }
      if (this.isZero()) {
        return other;
      }
      if (other.isZero()) {
        return this;
      }
      var smallerCoefficients = this.coefficients;
      var largerCoefficients = other.coefficients;
      if (smallerCoefficients.length > largerCoefficients.length) {
        var temp = smallerCoefficients;
        smallerCoefficients = largerCoefficients;
        largerCoefficients = temp;
      }
      var sumDiff = new Int32Array(largerCoefficients.length);
      var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
      System_default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);
      for (var i = lengthDiff; i < largerCoefficients.length; i++) {
        sumDiff[i] = AbstractGenericGF_default.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
      }
      return new GenericGFPoly2(this.field, sumDiff);
    };
    GenericGFPoly2.prototype.multiply = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("GenericGFPolys do not have same GenericGF field");
      }
      if (this.isZero() || other.isZero()) {
        return this.field.getZero();
      }
      var aCoefficients = this.coefficients;
      var aLength = aCoefficients.length;
      var bCoefficients = other.coefficients;
      var bLength = bCoefficients.length;
      var product = new Int32Array(aLength + bLength - 1);
      var field = this.field;
      for (var i = 0; i < aLength; i++) {
        var aCoeff = aCoefficients[i];
        for (var j = 0; j < bLength; j++) {
          product[i + j] = AbstractGenericGF_default.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));
        }
      }
      return new GenericGFPoly2(field, product);
    };
    GenericGFPoly2.prototype.multiplyScalar = function(scalar) {
      if (scalar === 0) {
        return this.field.getZero();
      }
      if (scalar === 1) {
        return this;
      }
      var size = this.coefficients.length;
      var field = this.field;
      var product = new Int32Array(size);
      var coefficients = this.coefficients;
      for (var i = 0; i < size; i++) {
        product[i] = field.multiply(coefficients[i], scalar);
      }
      return new GenericGFPoly2(field, product);
    };
    GenericGFPoly2.prototype.multiplyByMonomial = function(degree, coefficient) {
      if (degree < 0) {
        throw new IllegalArgumentException_default();
      }
      if (coefficient === 0) {
        return this.field.getZero();
      }
      var coefficients = this.coefficients;
      var size = coefficients.length;
      var product = new Int32Array(size + degree);
      var field = this.field;
      for (var i = 0; i < size; i++) {
        product[i] = field.multiply(coefficients[i], coefficient);
      }
      return new GenericGFPoly2(field, product);
    };
    GenericGFPoly2.prototype.divide = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("GenericGFPolys do not have same GenericGF field");
      }
      if (other.isZero()) {
        throw new IllegalArgumentException_default("Divide by 0");
      }
      var field = this.field;
      var quotient = field.getZero();
      var remainder = this;
      var denominatorLeadingTerm = other.getCoefficient(other.getDegree());
      var inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);
      while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {
        var degreeDifference = remainder.getDegree() - other.getDegree();
        var scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);
        var term = other.multiplyByMonomial(degreeDifference, scale);
        var iterationQuotient = field.buildMonomial(degreeDifference, scale);
        quotient = quotient.addOrSubtract(iterationQuotient);
        remainder = remainder.addOrSubtract(term);
      }
      return [quotient, remainder];
    };
    GenericGFPoly2.prototype.toString = function() {
      var result = "";
      for (var degree = this.getDegree(); degree >= 0; degree--) {
        var coefficient = this.getCoefficient(degree);
        if (coefficient !== 0) {
          if (coefficient < 0) {
            result += " - ";
            coefficient = -coefficient;
          } else {
            if (result.length > 0) {
              result += " + ";
            }
          }
          if (degree === 0 || coefficient !== 1) {
            var alphaPower = this.field.log(coefficient);
            if (alphaPower === 0) {
              result += "1";
            } else if (alphaPower === 1) {
              result += "a";
            } else {
              result += "a^";
              result += alphaPower;
            }
          }
          if (degree !== 0) {
            if (degree === 1) {
              result += "x";
            } else {
              result += "x^";
              result += degree;
            }
          }
        }
      }
      return result;
    };
    return GenericGFPoly2;
  }()
);
var GenericGFPoly_default = GenericGFPoly;

// node_modules/@zxing/library/esm/core/ArithmeticException.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ArithmeticException = (
  /** @class */
  function(_super) {
    __extends15(ArithmeticException2, _super);
    function ArithmeticException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ArithmeticException2.kind = "ArithmeticException";
    return ArithmeticException2;
  }(Exception_default)
);
var ArithmeticException_default = ArithmeticException;

// node_modules/@zxing/library/esm/core/common/reedsolomon/GenericGF.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GenericGF = (
  /** @class */
  function(_super) {
    __extends16(GenericGF2, _super);
    function GenericGF2(primitive, size, generatorBase) {
      var _this = _super.call(this) || this;
      _this.primitive = primitive;
      _this.size = size;
      _this.generatorBase = generatorBase;
      var expTable = new Int32Array(size);
      var x = 1;
      for (var i = 0; i < size; i++) {
        expTable[i] = x;
        x *= 2;
        if (x >= size) {
          x ^= primitive;
          x &= size - 1;
        }
      }
      _this.expTable = expTable;
      var logTable = new Int32Array(size);
      for (var i = 0; i < size - 1; i++) {
        logTable[expTable[i]] = i;
      }
      _this.logTable = logTable;
      _this.zero = new GenericGFPoly_default(_this, Int32Array.from([0]));
      _this.one = new GenericGFPoly_default(_this, Int32Array.from([1]));
      return _this;
    }
    GenericGF2.prototype.getZero = function() {
      return this.zero;
    };
    GenericGF2.prototype.getOne = function() {
      return this.one;
    };
    GenericGF2.prototype.buildMonomial = function(degree, coefficient) {
      if (degree < 0) {
        throw new IllegalArgumentException_default();
      }
      if (coefficient === 0) {
        return this.zero;
      }
      var coefficients = new Int32Array(degree + 1);
      coefficients[0] = coefficient;
      return new GenericGFPoly_default(this, coefficients);
    };
    GenericGF2.prototype.inverse = function(a) {
      if (a === 0) {
        throw new ArithmeticException_default();
      }
      return this.expTable[this.size - this.logTable[a] - 1];
    };
    GenericGF2.prototype.multiply = function(a, b) {
      if (a === 0 || b === 0) {
        return 0;
      }
      return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
    };
    GenericGF2.prototype.getSize = function() {
      return this.size;
    };
    GenericGF2.prototype.getGeneratorBase = function() {
      return this.generatorBase;
    };
    GenericGF2.prototype.toString = function() {
      return "GF(0x" + Integer_default.toHexString(this.primitive) + "," + this.size + ")";
    };
    GenericGF2.prototype.equals = function(o) {
      return o === this;
    };
    GenericGF2.AZTEC_DATA_12 = new GenericGF2(4201, 4096, 1);
    GenericGF2.AZTEC_DATA_10 = new GenericGF2(1033, 1024, 1);
    GenericGF2.AZTEC_DATA_6 = new GenericGF2(67, 64, 1);
    GenericGF2.AZTEC_PARAM = new GenericGF2(19, 16, 1);
    GenericGF2.QR_CODE_FIELD_256 = new GenericGF2(285, 256, 0);
    GenericGF2.DATA_MATRIX_FIELD_256 = new GenericGF2(301, 256, 1);
    GenericGF2.AZTEC_DATA_8 = GenericGF2.DATA_MATRIX_FIELD_256;
    GenericGF2.MAXICODE_FIELD_64 = GenericGF2.AZTEC_DATA_6;
    return GenericGF2;
  }(AbstractGenericGF_default)
);
var GenericGF_default = GenericGF;

// node_modules/@zxing/library/esm/core/ReedSolomonException.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ReedSolomonException = (
  /** @class */
  function(_super) {
    __extends17(ReedSolomonException2, _super);
    function ReedSolomonException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ReedSolomonException2.kind = "ReedSolomonException";
    return ReedSolomonException2;
  }(Exception_default)
);
var ReedSolomonException_default = ReedSolomonException;

// node_modules/@zxing/library/esm/core/IllegalStateException.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IllegalStateException = (
  /** @class */
  function(_super) {
    __extends18(IllegalStateException2, _super);
    function IllegalStateException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    IllegalStateException2.kind = "IllegalStateException";
    return IllegalStateException2;
  }(Exception_default)
);
var IllegalStateException_default = IllegalStateException;

// node_modules/@zxing/library/esm/core/common/reedsolomon/ReedSolomonDecoder.js
var ReedSolomonDecoder = (
  /** @class */
  function() {
    function ReedSolomonDecoder2(field) {
      this.field = field;
    }
    ReedSolomonDecoder2.prototype.decode = function(received, twoS) {
      var field = this.field;
      var poly = new GenericGFPoly_default(field, received);
      var syndromeCoefficients = new Int32Array(twoS);
      var noError = true;
      for (var i = 0; i < twoS; i++) {
        var evalResult = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));
        syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalResult;
        if (evalResult !== 0) {
          noError = false;
        }
      }
      if (noError) {
        return;
      }
      var syndrome = new GenericGFPoly_default(field, syndromeCoefficients);
      var sigmaOmega = this.runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);
      var sigma = sigmaOmega[0];
      var omega = sigmaOmega[1];
      var errorLocations = this.findErrorLocations(sigma);
      var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);
      for (var i = 0; i < errorLocations.length; i++) {
        var position = received.length - 1 - field.log(errorLocations[i]);
        if (position < 0) {
          throw new ReedSolomonException_default("Bad error location");
        }
        received[position] = GenericGF_default.addOrSubtract(received[position], errorMagnitudes[i]);
      }
    };
    ReedSolomonDecoder2.prototype.runEuclideanAlgorithm = function(a, b, R) {
      if (a.getDegree() < b.getDegree()) {
        var temp = a;
        a = b;
        b = temp;
      }
      var field = this.field;
      var rLast = a;
      var r = b;
      var tLast = field.getZero();
      var t = field.getOne();
      while (r.getDegree() >= (R / 2 | 0)) {
        var rLastLast = rLast;
        var tLastLast = tLast;
        rLast = r;
        tLast = t;
        if (rLast.isZero()) {
          throw new ReedSolomonException_default("r_{i-1} was zero");
        }
        r = rLastLast;
        var q = field.getZero();
        var denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());
        var dltInverse = field.inverse(denominatorLeadingTerm);
        while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {
          var degreeDiff = r.getDegree() - rLast.getDegree();
          var scale = field.multiply(r.getCoefficient(r.getDegree()), dltInverse);
          q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
          r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
        }
        t = q.multiply(tLast).addOrSubtract(tLastLast);
        if (r.getDegree() >= rLast.getDegree()) {
          throw new IllegalStateException_default("Division algorithm failed to reduce polynomial?");
        }
      }
      var sigmaTildeAtZero = t.getCoefficient(0);
      if (sigmaTildeAtZero === 0) {
        throw new ReedSolomonException_default("sigmaTilde(0) was zero");
      }
      var inverse = field.inverse(sigmaTildeAtZero);
      var sigma = t.multiplyScalar(inverse);
      var omega = r.multiplyScalar(inverse);
      return [sigma, omega];
    };
    ReedSolomonDecoder2.prototype.findErrorLocations = function(errorLocator) {
      var numErrors = errorLocator.getDegree();
      if (numErrors === 1) {
        return Int32Array.from([errorLocator.getCoefficient(1)]);
      }
      var result = new Int32Array(numErrors);
      var e = 0;
      var field = this.field;
      for (var i = 1; i < field.getSize() && e < numErrors; i++) {
        if (errorLocator.evaluateAt(i) === 0) {
          result[e] = field.inverse(i);
          e++;
        }
      }
      if (e !== numErrors) {
        throw new ReedSolomonException_default("Error locator degree does not match number of roots");
      }
      return result;
    };
    ReedSolomonDecoder2.prototype.findErrorMagnitudes = function(errorEvaluator, errorLocations) {
      var s = errorLocations.length;
      var result = new Int32Array(s);
      var field = this.field;
      for (var i = 0; i < s; i++) {
        var xiInverse = field.inverse(errorLocations[i]);
        var denominator = 1;
        for (var j = 0; j < s; j++) {
          if (i !== j) {
            var term = field.multiply(errorLocations[j], xiInverse);
            var termPlus1 = (term & 1) === 0 ? term | 1 : term & ~1;
            denominator = field.multiply(denominator, termPlus1);
          }
        }
        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
        if (field.getGeneratorBase() !== 0) {
          result[i] = field.multiply(result[i], xiInverse);
        }
      }
      return result;
    };
    return ReedSolomonDecoder2;
  }()
);
var ReedSolomonDecoder_default = ReedSolomonDecoder;

// node_modules/@zxing/library/esm/core/aztec/decoder/Decoder.js
var Table;
(function(Table2) {
  Table2[Table2["UPPER"] = 0] = "UPPER";
  Table2[Table2["LOWER"] = 1] = "LOWER";
  Table2[Table2["MIXED"] = 2] = "MIXED";
  Table2[Table2["DIGIT"] = 3] = "DIGIT";
  Table2[Table2["PUNCT"] = 4] = "PUNCT";
  Table2[Table2["BINARY"] = 5] = "BINARY";
})(Table || (Table = {}));
var Decoder = (
  /** @class */
  function() {
    function Decoder4() {
    }
    Decoder4.prototype.decode = function(detectorResult) {
      this.ddata = detectorResult;
      var matrix = detectorResult.getBits();
      var rawbits = this.extractBits(matrix);
      var correctedBits = this.correctBits(rawbits);
      var rawBytes = Decoder4.convertBoolArrayToByteArray(correctedBits);
      var result = Decoder4.getEncodedData(correctedBits);
      var decoderResult = new DecoderResult_default(rawBytes, result, null, null);
      decoderResult.setNumBits(correctedBits.length);
      return decoderResult;
    };
    Decoder4.highLevelDecode = function(correctedBits) {
      return this.getEncodedData(correctedBits);
    };
    Decoder4.getEncodedData = function(correctedBits) {
      var endIndex = correctedBits.length;
      var latchTable = Table.UPPER;
      var shiftTable = Table.UPPER;
      var result = "";
      var index = 0;
      while (index < endIndex) {
        if (shiftTable === Table.BINARY) {
          if (endIndex - index < 5) {
            break;
          }
          var length_1 = Decoder4.readCode(correctedBits, index, 5);
          index += 5;
          if (length_1 === 0) {
            if (endIndex - index < 11) {
              break;
            }
            length_1 = Decoder4.readCode(correctedBits, index, 11) + 31;
            index += 11;
          }
          for (var charCount = 0; charCount < length_1; charCount++) {
            if (endIndex - index < 8) {
              index = endIndex;
              break;
            }
            var code = Decoder4.readCode(correctedBits, index, 8);
            result += /*(char)*/
            StringUtils_default.castAsNonUtf8Char(code);
            index += 8;
          }
          shiftTable = latchTable;
        } else {
          var size = shiftTable === Table.DIGIT ? 4 : 5;
          if (endIndex - index < size) {
            break;
          }
          var code = Decoder4.readCode(correctedBits, index, size);
          index += size;
          var str = Decoder4.getCharacter(shiftTable, code);
          if (str.startsWith("CTRL_")) {
            latchTable = shiftTable;
            shiftTable = Decoder4.getTable(str.charAt(5));
            if (str.charAt(6) === "L") {
              latchTable = shiftTable;
            }
          } else {
            result += str;
            shiftTable = latchTable;
          }
        }
      }
      return result;
    };
    Decoder4.getTable = function(t) {
      switch (t) {
        case "L":
          return Table.LOWER;
        case "P":
          return Table.PUNCT;
        case "M":
          return Table.MIXED;
        case "D":
          return Table.DIGIT;
        case "B":
          return Table.BINARY;
        case "U":
        default:
          return Table.UPPER;
      }
    };
    Decoder4.getCharacter = function(table, code) {
      switch (table) {
        case Table.UPPER:
          return Decoder4.UPPER_TABLE[code];
        case Table.LOWER:
          return Decoder4.LOWER_TABLE[code];
        case Table.MIXED:
          return Decoder4.MIXED_TABLE[code];
        case Table.PUNCT:
          return Decoder4.PUNCT_TABLE[code];
        case Table.DIGIT:
          return Decoder4.DIGIT_TABLE[code];
        default:
          throw new IllegalStateException_default("Bad table");
      }
    };
    Decoder4.prototype.correctBits = function(rawbits) {
      var gf;
      var codewordSize;
      if (this.ddata.getNbLayers() <= 2) {
        codewordSize = 6;
        gf = GenericGF_default.AZTEC_DATA_6;
      } else if (this.ddata.getNbLayers() <= 8) {
        codewordSize = 8;
        gf = GenericGF_default.AZTEC_DATA_8;
      } else if (this.ddata.getNbLayers() <= 22) {
        codewordSize = 10;
        gf = GenericGF_default.AZTEC_DATA_10;
      } else {
        codewordSize = 12;
        gf = GenericGF_default.AZTEC_DATA_12;
      }
      var numDataCodewords = this.ddata.getNbDatablocks();
      var numCodewords = rawbits.length / codewordSize;
      if (numCodewords < numDataCodewords) {
        throw new FormatException_default();
      }
      var offset = rawbits.length % codewordSize;
      var dataWords = new Int32Array(numCodewords);
      for (var i = 0; i < numCodewords; i++, offset += codewordSize) {
        dataWords[i] = Decoder4.readCode(rawbits, offset, codewordSize);
      }
      try {
        var rsDecoder = new ReedSolomonDecoder_default(gf);
        rsDecoder.decode(dataWords, numCodewords - numDataCodewords);
      } catch (ex) {
        throw new FormatException_default(ex);
      }
      var mask = (1 << codewordSize) - 1;
      var stuffedBits = 0;
      for (var i = 0; i < numDataCodewords; i++) {
        var dataWord = dataWords[i];
        if (dataWord === 0 || dataWord === mask) {
          throw new FormatException_default();
        } else if (dataWord === 1 || dataWord === mask - 1) {
          stuffedBits++;
        }
      }
      var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);
      var index = 0;
      for (var i = 0; i < numDataCodewords; i++) {
        var dataWord = dataWords[i];
        if (dataWord === 1 || dataWord === mask - 1) {
          correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);
          index += codewordSize - 1;
        } else {
          for (var bit = codewordSize - 1; bit >= 0; --bit) {
            correctedBits[index++] = (dataWord & 1 << bit) !== 0;
          }
        }
      }
      return correctedBits;
    };
    Decoder4.prototype.extractBits = function(matrix) {
      var compact = this.ddata.isCompact();
      var layers = this.ddata.getNbLayers();
      var baseMatrixSize = (compact ? 11 : 14) + layers * 4;
      var alignmentMap = new Int32Array(baseMatrixSize);
      var rawbits = new Array(this.totalBitsInLayer(layers, compact));
      if (compact) {
        for (var i = 0; i < alignmentMap.length; i++) {
          alignmentMap[i] = i;
        }
      } else {
        var matrixSize = baseMatrixSize + 1 + 2 * Integer_default.truncDivision(Integer_default.truncDivision(baseMatrixSize, 2) - 1, 15);
        var origCenter = baseMatrixSize / 2;
        var center = Integer_default.truncDivision(matrixSize, 2);
        for (var i = 0; i < origCenter; i++) {
          var newOffset = i + Integer_default.truncDivision(i, 15);
          alignmentMap[origCenter - i - 1] = center - newOffset - 1;
          alignmentMap[origCenter + i] = center + newOffset + 1;
        }
      }
      for (var i = 0, rowOffset = 0; i < layers; i++) {
        var rowSize = (layers - i) * 4 + (compact ? 9 : 12);
        var low = i * 2;
        var high = baseMatrixSize - 1 - low;
        for (var j = 0; j < rowSize; j++) {
          var columnOffset = j * 2;
          for (var k = 0; k < 2; k++) {
            rawbits[rowOffset + columnOffset + k] = matrix.get(alignmentMap[low + k], alignmentMap[low + j]);
            rawbits[rowOffset + 2 * rowSize + columnOffset + k] = matrix.get(alignmentMap[low + j], alignmentMap[high - k]);
            rawbits[rowOffset + 4 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - k], alignmentMap[high - j]);
            rawbits[rowOffset + 6 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - j], alignmentMap[low + k]);
          }
        }
        rowOffset += rowSize * 8;
      }
      return rawbits;
    };
    Decoder4.readCode = function(rawbits, startIndex, length) {
      var res = 0;
      for (var i = startIndex; i < startIndex + length; i++) {
        res <<= 1;
        if (rawbits[i]) {
          res |= 1;
        }
      }
      return res;
    };
    Decoder4.readByte = function(rawbits, startIndex) {
      var n = rawbits.length - startIndex;
      if (n >= 8) {
        return Decoder4.readCode(rawbits, startIndex, 8);
      }
      return Decoder4.readCode(rawbits, startIndex, n) << 8 - n;
    };
    Decoder4.convertBoolArrayToByteArray = function(boolArr) {
      var byteArr = new Uint8Array((boolArr.length + 7) / 8);
      for (var i = 0; i < byteArr.length; i++) {
        byteArr[i] = Decoder4.readByte(boolArr, 8 * i);
      }
      return byteArr;
    };
    Decoder4.prototype.totalBitsInLayer = function(layers, compact) {
      return ((compact ? 88 : 112) + 16 * layers) * layers;
    };
    Decoder4.UPPER_TABLE = [
      "CTRL_PS",
      " ",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "CTRL_LL",
      "CTRL_ML",
      "CTRL_DL",
      "CTRL_BS"
    ];
    Decoder4.LOWER_TABLE = [
      "CTRL_PS",
      " ",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "CTRL_US",
      "CTRL_ML",
      "CTRL_DL",
      "CTRL_BS"
    ];
    Decoder4.MIXED_TABLE = [
      "CTRL_PS",
      " ",
      "",
      "",
      "",
      "",
      "",
      "",
      "\x07",
      "\b",
      "	",
      "\n",
      "\v",
      "\f",
      "\r",
      "\x1B",
      "",
      "",
      "",
      "",
      "@",
      "\\",
      "^",
      "_",
      "`",
      "|",
      "~",
      "\x7F",
      "CTRL_LL",
      "CTRL_UL",
      "CTRL_PL",
      "CTRL_BS"
    ];
    Decoder4.PUNCT_TABLE = [
      "",
      "\r",
      "\r\n",
      ". ",
      ", ",
      ": ",
      "!",
      '"',
      "#",
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "?",
      "[",
      "]",
      "{",
      "}",
      "CTRL_UL"
    ];
    Decoder4.DIGIT_TABLE = [
      "CTRL_PS",
      " ",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ",",
      ".",
      "CTRL_UL",
      "CTRL_US"
    ];
    return Decoder4;
  }()
);
var Decoder_default = Decoder;

// node_modules/@zxing/library/esm/core/common/detector/MathUtils.js
var MathUtils = (
  /** @class */
  function() {
    function MathUtils2() {
    }
    MathUtils2.round = function(d) {
      if (isNaN(d))
        return 0;
      if (d <= Number.MIN_SAFE_INTEGER)
        return Number.MIN_SAFE_INTEGER;
      if (d >= Number.MAX_SAFE_INTEGER)
        return Number.MAX_SAFE_INTEGER;
      return (
        /*(int) */
        d + (d < 0 ? -0.5 : 0.5) | 0
      );
    };
    MathUtils2.distance = function(aX, aY, bX, bY) {
      var xDiff = aX - bX;
      var yDiff = aY - bY;
      return (
        /*(float) */
        Math.sqrt(xDiff * xDiff + yDiff * yDiff)
      );
    };
    MathUtils2.sum = function(array) {
      var count = 0;
      for (var i = 0, length_1 = array.length; i !== length_1; i++) {
        var a = array[i];
        count += a;
      }
      return count;
    };
    return MathUtils2;
  }()
);
var MathUtils_default = MathUtils;

// node_modules/@zxing/library/esm/core/util/Float.js
var Float = (
  /** @class */
  function() {
    function Float2() {
    }
    Float2.floatToIntBits = function(f) {
      return f;
    };
    Float2.MAX_VALUE = Number.MAX_SAFE_INTEGER;
    return Float2;
  }()
);
var Float_default = Float;

// node_modules/@zxing/library/esm/core/ResultPoint.js
var ResultPoint = (
  /** @class */
  function() {
    function ResultPoint2(x, y) {
      this.x = x;
      this.y = y;
    }
    ResultPoint2.prototype.getX = function() {
      return this.x;
    };
    ResultPoint2.prototype.getY = function() {
      return this.y;
    };
    ResultPoint2.prototype.equals = function(other) {
      if (other instanceof ResultPoint2) {
        var otherPoint = other;
        return this.x === otherPoint.x && this.y === otherPoint.y;
      }
      return false;
    };
    ResultPoint2.prototype.hashCode = function() {
      return 31 * Float_default.floatToIntBits(this.x) + Float_default.floatToIntBits(this.y);
    };
    ResultPoint2.prototype.toString = function() {
      return "(" + this.x + "," + this.y + ")";
    };
    ResultPoint2.orderBestPatterns = function(patterns) {
      var zeroOneDistance = this.distance(patterns[0], patterns[1]);
      var oneTwoDistance = this.distance(patterns[1], patterns[2]);
      var zeroTwoDistance = this.distance(patterns[0], patterns[2]);
      var pointA;
      var pointB;
      var pointC;
      if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {
        pointB = patterns[0];
        pointA = patterns[1];
        pointC = patterns[2];
      } else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {
        pointB = patterns[1];
        pointA = patterns[0];
        pointC = patterns[2];
      } else {
        pointB = patterns[2];
        pointA = patterns[0];
        pointC = patterns[1];
      }
      if (this.crossProductZ(pointA, pointB, pointC) < 0) {
        var temp = pointA;
        pointA = pointC;
        pointC = temp;
      }
      patterns[0] = pointA;
      patterns[1] = pointB;
      patterns[2] = pointC;
    };
    ResultPoint2.distance = function(pattern1, pattern2) {
      return MathUtils_default.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);
    };
    ResultPoint2.crossProductZ = function(pointA, pointB, pointC) {
      var bX = pointB.x;
      var bY = pointB.y;
      return (pointC.x - bX) * (pointA.y - bY) - (pointC.y - bY) * (pointA.x - bX);
    };
    return ResultPoint2;
  }()
);
var ResultPoint_default = ResultPoint;

// node_modules/@zxing/library/esm/core/common/DetectorResult.js
var DetectorResult = (
  /** @class */
  function() {
    function DetectorResult2(bits, points) {
      this.bits = bits;
      this.points = points;
    }
    DetectorResult2.prototype.getBits = function() {
      return this.bits;
    };
    DetectorResult2.prototype.getPoints = function() {
      return this.points;
    };
    return DetectorResult2;
  }()
);
var DetectorResult_default = DetectorResult;

// node_modules/@zxing/library/esm/core/aztec/AztecDetectorResult.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AztecDetectorResult = (
  /** @class */
  function(_super) {
    __extends19(AztecDetectorResult2, _super);
    function AztecDetectorResult2(bits, points, compact, nbDatablocks, nbLayers) {
      var _this = _super.call(this, bits, points) || this;
      _this.compact = compact;
      _this.nbDatablocks = nbDatablocks;
      _this.nbLayers = nbLayers;
      return _this;
    }
    AztecDetectorResult2.prototype.getNbLayers = function() {
      return this.nbLayers;
    };
    AztecDetectorResult2.prototype.getNbDatablocks = function() {
      return this.nbDatablocks;
    };
    AztecDetectorResult2.prototype.isCompact = function() {
      return this.compact;
    };
    return AztecDetectorResult2;
  }(DetectorResult_default)
);
var AztecDetectorResult_default = AztecDetectorResult;

// node_modules/@zxing/library/esm/core/common/detector/WhiteRectangleDetector.js
var WhiteRectangleDetector = (
  /** @class */
  function() {
    function WhiteRectangleDetector2(image, initSize, x, y) {
      this.image = image;
      this.height = image.getHeight();
      this.width = image.getWidth();
      if (void 0 === initSize || null === initSize) {
        initSize = WhiteRectangleDetector2.INIT_SIZE;
      }
      if (void 0 === x || null === x) {
        x = image.getWidth() / 2 | 0;
      }
      if (void 0 === y || null === y) {
        y = image.getHeight() / 2 | 0;
      }
      var halfsize = initSize / 2 | 0;
      this.leftInit = x - halfsize;
      this.rightInit = x + halfsize;
      this.upInit = y - halfsize;
      this.downInit = y + halfsize;
      if (this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) {
        throw new NotFoundException_default();
      }
    }
    WhiteRectangleDetector2.prototype.detect = function() {
      var left = this.leftInit;
      var right = this.rightInit;
      var up = this.upInit;
      var down = this.downInit;
      var sizeExceeded = false;
      var aBlackPointFoundOnBorder = true;
      var atLeastOneBlackPointFoundOnBorder = false;
      var atLeastOneBlackPointFoundOnRight = false;
      var atLeastOneBlackPointFoundOnBottom = false;
      var atLeastOneBlackPointFoundOnLeft = false;
      var atLeastOneBlackPointFoundOnTop = false;
      var width = this.width;
      var height = this.height;
      while (aBlackPointFoundOnBorder) {
        aBlackPointFoundOnBorder = false;
        var rightBorderNotWhite = true;
        while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {
          rightBorderNotWhite = this.containsBlackPoint(up, down, right, false);
          if (rightBorderNotWhite) {
            right++;
            aBlackPointFoundOnBorder = true;
            atLeastOneBlackPointFoundOnRight = true;
          } else if (!atLeastOneBlackPointFoundOnRight) {
            right++;
          }
        }
        if (right >= width) {
          sizeExceeded = true;
          break;
        }
        var bottomBorderNotWhite = true;
        while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {
          bottomBorderNotWhite = this.containsBlackPoint(left, right, down, true);
          if (bottomBorderNotWhite) {
            down++;
            aBlackPointFoundOnBorder = true;
            atLeastOneBlackPointFoundOnBottom = true;
          } else if (!atLeastOneBlackPointFoundOnBottom) {
            down++;
          }
        }
        if (down >= height) {
          sizeExceeded = true;
          break;
        }
        var leftBorderNotWhite = true;
        while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {
          leftBorderNotWhite = this.containsBlackPoint(up, down, left, false);
          if (leftBorderNotWhite) {
            left--;
            aBlackPointFoundOnBorder = true;
            atLeastOneBlackPointFoundOnLeft = true;
          } else if (!atLeastOneBlackPointFoundOnLeft) {
            left--;
          }
        }
        if (left < 0) {
          sizeExceeded = true;
          break;
        }
        var topBorderNotWhite = true;
        while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {
          topBorderNotWhite = this.containsBlackPoint(left, right, up, true);
          if (topBorderNotWhite) {
            up--;
            aBlackPointFoundOnBorder = true;
            atLeastOneBlackPointFoundOnTop = true;
          } else if (!atLeastOneBlackPointFoundOnTop) {
            up--;
          }
        }
        if (up < 0) {
          sizeExceeded = true;
          break;
        }
        if (aBlackPointFoundOnBorder) {
          atLeastOneBlackPointFoundOnBorder = true;
        }
      }
      if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {
        var maxSize = right - left;
        var z = null;
        for (var i = 1; z === null && i < maxSize; i++) {
          z = this.getBlackPointOnSegment(left, down - i, left + i, down);
        }
        if (z == null) {
          throw new NotFoundException_default();
        }
        var t = null;
        for (var i = 1; t === null && i < maxSize; i++) {
          t = this.getBlackPointOnSegment(left, up + i, left + i, up);
        }
        if (t == null) {
          throw new NotFoundException_default();
        }
        var x = null;
        for (var i = 1; x === null && i < maxSize; i++) {
          x = this.getBlackPointOnSegment(right, up + i, right - i, up);
        }
        if (x == null) {
          throw new NotFoundException_default();
        }
        var y = null;
        for (var i = 1; y === null && i < maxSize; i++) {
          y = this.getBlackPointOnSegment(right, down - i, right - i, down);
        }
        if (y == null) {
          throw new NotFoundException_default();
        }
        return this.centerEdges(y, z, x, t);
      } else {
        throw new NotFoundException_default();
      }
    };
    WhiteRectangleDetector2.prototype.getBlackPointOnSegment = function(aX, aY, bX, bY) {
      var dist = MathUtils_default.round(MathUtils_default.distance(aX, aY, bX, bY));
      var xStep = (bX - aX) / dist;
      var yStep = (bY - aY) / dist;
      var image = this.image;
      for (var i = 0; i < dist; i++) {
        var x = MathUtils_default.round(aX + i * xStep);
        var y = MathUtils_default.round(aY + i * yStep);
        if (image.get(x, y)) {
          return new ResultPoint_default(x, y);
        }
      }
      return null;
    };
    WhiteRectangleDetector2.prototype.centerEdges = function(y, z, x, t) {
      var yi = y.getX();
      var yj = y.getY();
      var zi = z.getX();
      var zj = z.getY();
      var xi = x.getX();
      var xj = x.getY();
      var ti = t.getX();
      var tj = t.getY();
      var CORR = WhiteRectangleDetector2.CORR;
      if (yi < this.width / 2) {
        return [
          new ResultPoint_default(ti - CORR, tj + CORR),
          new ResultPoint_default(zi + CORR, zj + CORR),
          new ResultPoint_default(xi - CORR, xj - CORR),
          new ResultPoint_default(yi + CORR, yj - CORR)
        ];
      } else {
        return [
          new ResultPoint_default(ti + CORR, tj + CORR),
          new ResultPoint_default(zi + CORR, zj - CORR),
          new ResultPoint_default(xi - CORR, xj + CORR),
          new ResultPoint_default(yi - CORR, yj - CORR)
        ];
      }
    };
    WhiteRectangleDetector2.prototype.containsBlackPoint = function(a, b, fixed, horizontal) {
      var image = this.image;
      if (horizontal) {
        for (var x = a; x <= b; x++) {
          if (image.get(x, fixed)) {
            return true;
          }
        }
      } else {
        for (var y = a; y <= b; y++) {
          if (image.get(fixed, y)) {
            return true;
          }
        }
      }
      return false;
    };
    WhiteRectangleDetector2.INIT_SIZE = 10;
    WhiteRectangleDetector2.CORR = 1;
    return WhiteRectangleDetector2;
  }()
);
var WhiteRectangleDetector_default = WhiteRectangleDetector;

// node_modules/@zxing/library/esm/core/common/GridSampler.js
var GridSampler = (
  /** @class */
  function() {
    function GridSampler2() {
    }
    GridSampler2.checkAndNudgePoints = function(image, points) {
      var width = image.getWidth();
      var height = image.getHeight();
      var nudged = true;
      for (var offset = 0; offset < points.length && nudged; offset += 2) {
        var x = Math.floor(points[offset]);
        var y = Math.floor(points[offset + 1]);
        if (x < -1 || x > width || y < -1 || y > height) {
          throw new NotFoundException_default();
        }
        nudged = false;
        if (x === -1) {
          points[offset] = 0;
          nudged = true;
        } else if (x === width) {
          points[offset] = width - 1;
          nudged = true;
        }
        if (y === -1) {
          points[offset + 1] = 0;
          nudged = true;
        } else if (y === height) {
          points[offset + 1] = height - 1;
          nudged = true;
        }
      }
      nudged = true;
      for (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {
        var x = Math.floor(points[offset]);
        var y = Math.floor(points[offset + 1]);
        if (x < -1 || x > width || y < -1 || y > height) {
          throw new NotFoundException_default();
        }
        nudged = false;
        if (x === -1) {
          points[offset] = 0;
          nudged = true;
        } else if (x === width) {
          points[offset] = width - 1;
          nudged = true;
        }
        if (y === -1) {
          points[offset + 1] = 0;
          nudged = true;
        } else if (y === height) {
          points[offset + 1] = height - 1;
          nudged = true;
        }
      }
    };
    return GridSampler2;
  }()
);
var GridSampler_default = GridSampler;

// node_modules/@zxing/library/esm/core/common/PerspectiveTransform.js
var PerspectiveTransform = (
  /** @class */
  function() {
    function PerspectiveTransform2(a11, a21, a31, a12, a22, a32, a13, a23, a33) {
      this.a11 = a11;
      this.a21 = a21;
      this.a31 = a31;
      this.a12 = a12;
      this.a22 = a22;
      this.a32 = a32;
      this.a13 = a13;
      this.a23 = a23;
      this.a33 = a33;
    }
    PerspectiveTransform2.quadrilateralToQuadrilateral = function(x0, y0, x1, y1, x2, y2, x3, y3, x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p) {
      var qToS = PerspectiveTransform2.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);
      var sToQ = PerspectiveTransform2.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);
      return sToQ.times(qToS);
    };
    PerspectiveTransform2.prototype.transformPoints = function(points) {
      var max = points.length;
      var a11 = this.a11;
      var a12 = this.a12;
      var a13 = this.a13;
      var a21 = this.a21;
      var a22 = this.a22;
      var a23 = this.a23;
      var a31 = this.a31;
      var a32 = this.a32;
      var a33 = this.a33;
      for (var i = 0; i < max; i += 2) {
        var x = points[i];
        var y = points[i + 1];
        var denominator = a13 * x + a23 * y + a33;
        points[i] = (a11 * x + a21 * y + a31) / denominator;
        points[i + 1] = (a12 * x + a22 * y + a32) / denominator;
      }
    };
    PerspectiveTransform2.prototype.transformPointsWithValues = function(xValues, yValues) {
      var a11 = this.a11;
      var a12 = this.a12;
      var a13 = this.a13;
      var a21 = this.a21;
      var a22 = this.a22;
      var a23 = this.a23;
      var a31 = this.a31;
      var a32 = this.a32;
      var a33 = this.a33;
      var n = xValues.length;
      for (var i = 0; i < n; i++) {
        var x = xValues[i];
        var y = yValues[i];
        var denominator = a13 * x + a23 * y + a33;
        xValues[i] = (a11 * x + a21 * y + a31) / denominator;
        yValues[i] = (a12 * x + a22 * y + a32) / denominator;
      }
    };
    PerspectiveTransform2.squareToQuadrilateral = function(x0, y0, x1, y1, x2, y2, x3, y3) {
      var dx3 = x0 - x1 + x2 - x3;
      var dy3 = y0 - y1 + y2 - y3;
      if (dx3 === 0 && dy3 === 0) {
        return new PerspectiveTransform2(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0, 0, 1);
      } else {
        var dx1 = x1 - x2;
        var dx2 = x3 - x2;
        var dy1 = y1 - y2;
        var dy2 = y3 - y2;
        var denominator = dx1 * dy2 - dx2 * dy1;
        var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
        var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
        return new PerspectiveTransform2(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1);
      }
    };
    PerspectiveTransform2.quadrilateralToSquare = function(x0, y0, x1, y1, x2, y2, x3, y3) {
      return PerspectiveTransform2.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();
    };
    PerspectiveTransform2.prototype.buildAdjoint = function() {
      return new PerspectiveTransform2(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);
    };
    PerspectiveTransform2.prototype.times = function(other) {
      return new PerspectiveTransform2(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);
    };
    return PerspectiveTransform2;
  }()
);
var PerspectiveTransform_default = PerspectiveTransform;

// node_modules/@zxing/library/esm/core/common/DefaultGridSampler.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DefaultGridSampler = (
  /** @class */
  function(_super) {
    __extends20(DefaultGridSampler2, _super);
    function DefaultGridSampler2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultGridSampler2.prototype.sampleGrid = function(image, dimensionX, dimensionY, p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY) {
      var transform = PerspectiveTransform_default.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);
      return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);
    };
    DefaultGridSampler2.prototype.sampleGridWithTransform = function(image, dimensionX, dimensionY, transform) {
      if (dimensionX <= 0 || dimensionY <= 0) {
        throw new NotFoundException_default();
      }
      var bits = new BitMatrix_default(dimensionX, dimensionY);
      var points = new Float32Array(2 * dimensionX);
      for (var y = 0; y < dimensionY; y++) {
        var max = points.length;
        var iValue = y + 0.5;
        for (var x = 0; x < max; x += 2) {
          points[x] = x / 2 + 0.5;
          points[x + 1] = iValue;
        }
        transform.transformPoints(points);
        GridSampler_default.checkAndNudgePoints(image, points);
        try {
          for (var x = 0; x < max; x += 2) {
            if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {
              bits.set(x / 2, y);
            }
          }
        } catch (aioobe) {
          throw new NotFoundException_default();
        }
      }
      return bits;
    };
    return DefaultGridSampler2;
  }(GridSampler_default)
);
var DefaultGridSampler_default = DefaultGridSampler;

// node_modules/@zxing/library/esm/core/common/GridSamplerInstance.js
var GridSamplerInstance = (
  /** @class */
  function() {
    function GridSamplerInstance2() {
    }
    GridSamplerInstance2.setGridSampler = function(newGridSampler) {
      GridSamplerInstance2.gridSampler = newGridSampler;
    };
    GridSamplerInstance2.getInstance = function() {
      return GridSamplerInstance2.gridSampler;
    };
    GridSamplerInstance2.gridSampler = new DefaultGridSampler_default();
    return GridSamplerInstance2;
  }()
);
var GridSamplerInstance_default = GridSamplerInstance;

// node_modules/@zxing/library/esm/core/aztec/detector/Detector.js
var Point = (
  /** @class */
  function() {
    function Point2(x, y) {
      this.x = x;
      this.y = y;
    }
    Point2.prototype.toResultPoint = function() {
      return new ResultPoint_default(this.getX(), this.getY());
    };
    Point2.prototype.getX = function() {
      return this.x;
    };
    Point2.prototype.getY = function() {
      return this.y;
    };
    return Point2;
  }()
);
var Detector = (
  /** @class */
  function() {
    function Detector5(image) {
      this.EXPECTED_CORNER_BITS = new Int32Array([
        3808,
        476,
        2107,
        1799
      ]);
      this.image = image;
    }
    Detector5.prototype.detect = function() {
      return this.detectMirror(false);
    };
    Detector5.prototype.detectMirror = function(isMirror) {
      var pCenter = this.getMatrixCenter();
      var bullsEyeCorners = this.getBullsEyeCorners(pCenter);
      if (isMirror) {
        var temp = bullsEyeCorners[0];
        bullsEyeCorners[0] = bullsEyeCorners[2];
        bullsEyeCorners[2] = temp;
      }
      this.extractParameters(bullsEyeCorners);
      var bits = this.sampleGrid(this.image, bullsEyeCorners[this.shift % 4], bullsEyeCorners[(this.shift + 1) % 4], bullsEyeCorners[(this.shift + 2) % 4], bullsEyeCorners[(this.shift + 3) % 4]);
      var corners = this.getMatrixCornerPoints(bullsEyeCorners);
      return new AztecDetectorResult_default(bits, corners, this.compact, this.nbDataBlocks, this.nbLayers);
    };
    Detector5.prototype.extractParameters = function(bullsEyeCorners) {
      if (!this.isValidPoint(bullsEyeCorners[0]) || !this.isValidPoint(bullsEyeCorners[1]) || !this.isValidPoint(bullsEyeCorners[2]) || !this.isValidPoint(bullsEyeCorners[3])) {
        throw new NotFoundException_default();
      }
      var length = 2 * this.nbCenterLayers;
      var sides = new Int32Array([
        this.sampleLine(bullsEyeCorners[0], bullsEyeCorners[1], length),
        this.sampleLine(bullsEyeCorners[1], bullsEyeCorners[2], length),
        this.sampleLine(bullsEyeCorners[2], bullsEyeCorners[3], length),
        this.sampleLine(bullsEyeCorners[3], bullsEyeCorners[0], length)
        // Top
      ]);
      this.shift = this.getRotation(sides, length);
      var parameterData = 0;
      for (var i = 0; i < 4; i++) {
        var side = sides[(this.shift + i) % 4];
        if (this.compact) {
          parameterData <<= 7;
          parameterData += side >> 1 & 127;
        } else {
          parameterData <<= 10;
          parameterData += (side >> 2 & 31 << 5) + (side >> 1 & 31);
        }
      }
      var correctedData = this.getCorrectedParameterData(parameterData, this.compact);
      if (this.compact) {
        this.nbLayers = (correctedData >> 6) + 1;
        this.nbDataBlocks = (correctedData & 63) + 1;
      } else {
        this.nbLayers = (correctedData >> 11) + 1;
        this.nbDataBlocks = (correctedData & 2047) + 1;
      }
    };
    Detector5.prototype.getRotation = function(sides, length) {
      var cornerBits = 0;
      sides.forEach(function(side, idx, arr) {
        var t = (side >> length - 2 << 1) + (side & 1);
        cornerBits = (cornerBits << 3) + t;
      });
      cornerBits = ((cornerBits & 1) << 11) + (cornerBits >> 1);
      for (var shift = 0; shift < 4; shift++) {
        if (Integer_default.bitCount(cornerBits ^ this.EXPECTED_CORNER_BITS[shift]) <= 2) {
          return shift;
        }
      }
      throw new NotFoundException_default();
    };
    Detector5.prototype.getCorrectedParameterData = function(parameterData, compact) {
      var numCodewords;
      var numDataCodewords;
      if (compact) {
        numCodewords = 7;
        numDataCodewords = 2;
      } else {
        numCodewords = 10;
        numDataCodewords = 4;
      }
      var numECCodewords = numCodewords - numDataCodewords;
      var parameterWords = new Int32Array(numCodewords);
      for (var i = numCodewords - 1; i >= 0; --i) {
        parameterWords[i] = parameterData & 15;
        parameterData >>= 4;
      }
      try {
        var rsDecoder = new ReedSolomonDecoder_default(GenericGF_default.AZTEC_PARAM);
        rsDecoder.decode(parameterWords, numECCodewords);
      } catch (ignored) {
        throw new NotFoundException_default();
      }
      var result = 0;
      for (var i = 0; i < numDataCodewords; i++) {
        result = (result << 4) + parameterWords[i];
      }
      return result;
    };
    Detector5.prototype.getBullsEyeCorners = function(pCenter) {
      var pina = pCenter;
      var pinb = pCenter;
      var pinc = pCenter;
      var pind = pCenter;
      var color = true;
      for (this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++) {
        var pouta = this.getFirstDifferent(pina, color, 1, -1);
        var poutb = this.getFirstDifferent(pinb, color, 1, 1);
        var poutc = this.getFirstDifferent(pinc, color, -1, 1);
        var poutd = this.getFirstDifferent(pind, color, -1, -1);
        if (this.nbCenterLayers > 2) {
          var q = this.distancePoint(poutd, pouta) * this.nbCenterLayers / (this.distancePoint(pind, pina) * (this.nbCenterLayers + 2));
          if (q < 0.75 || q > 1.25 || !this.isWhiteOrBlackRectangle(pouta, poutb, poutc, poutd)) {
            break;
          }
        }
        pina = pouta;
        pinb = poutb;
        pinc = poutc;
        pind = poutd;
        color = !color;
      }
      if (this.nbCenterLayers !== 5 && this.nbCenterLayers !== 7) {
        throw new NotFoundException_default();
      }
      this.compact = this.nbCenterLayers === 5;
      var pinax = new ResultPoint_default(pina.getX() + 0.5, pina.getY() - 0.5);
      var pinbx = new ResultPoint_default(pinb.getX() + 0.5, pinb.getY() + 0.5);
      var pincx = new ResultPoint_default(pinc.getX() - 0.5, pinc.getY() + 0.5);
      var pindx = new ResultPoint_default(pind.getX() - 0.5, pind.getY() - 0.5);
      return this.expandSquare([pinax, pinbx, pincx, pindx], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);
    };
    Detector5.prototype.getMatrixCenter = function() {
      var pointA;
      var pointB;
      var pointC;
      var pointD;
      try {
        var cornerPoints = new WhiteRectangleDetector_default(this.image).detect();
        pointA = cornerPoints[0];
        pointB = cornerPoints[1];
        pointC = cornerPoints[2];
        pointD = cornerPoints[3];
      } catch (e) {
        var cx_1 = this.image.getWidth() / 2;
        var cy_1 = this.image.getHeight() / 2;
        pointA = this.getFirstDifferent(new Point(cx_1 + 7, cy_1 - 7), false, 1, -1).toResultPoint();
        pointB = this.getFirstDifferent(new Point(cx_1 + 7, cy_1 + 7), false, 1, 1).toResultPoint();
        pointC = this.getFirstDifferent(new Point(cx_1 - 7, cy_1 + 7), false, -1, 1).toResultPoint();
        pointD = this.getFirstDifferent(new Point(cx_1 - 7, cy_1 - 7), false, -1, -1).toResultPoint();
      }
      var cx = MathUtils_default.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4);
      var cy = MathUtils_default.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4);
      try {
        var cornerPoints = new WhiteRectangleDetector_default(this.image, 15, cx, cy).detect();
        pointA = cornerPoints[0];
        pointB = cornerPoints[1];
        pointC = cornerPoints[2];
        pointD = cornerPoints[3];
      } catch (e) {
        pointA = this.getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();
        pointB = this.getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();
        pointC = this.getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();
        pointD = this.getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();
      }
      cx = MathUtils_default.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4);
      cy = MathUtils_default.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4);
      return new Point(cx, cy);
    };
    Detector5.prototype.getMatrixCornerPoints = function(bullsEyeCorners) {
      return this.expandSquare(bullsEyeCorners, 2 * this.nbCenterLayers, this.getDimension());
    };
    Detector5.prototype.sampleGrid = function(image, topLeft, topRight, bottomRight, bottomLeft) {
      var sampler = GridSamplerInstance_default.getInstance();
      var dimension = this.getDimension();
      var low = dimension / 2 - this.nbCenterLayers;
      var high = dimension / 2 + this.nbCenterLayers;
      return sampler.sampleGrid(
        image,
        dimension,
        dimension,
        low,
        low,
        // topleft
        high,
        low,
        // topright
        high,
        high,
        // bottomright
        low,
        high,
        // bottomleft
        topLeft.getX(),
        topLeft.getY(),
        topRight.getX(),
        topRight.getY(),
        bottomRight.getX(),
        bottomRight.getY(),
        bottomLeft.getX(),
        bottomLeft.getY()
      );
    };
    Detector5.prototype.sampleLine = function(p1, p2, size) {
      var result = 0;
      var d = this.distanceResultPoint(p1, p2);
      var moduleSize = d / size;
      var px = p1.getX();
      var py = p1.getY();
      var dx = moduleSize * (p2.getX() - p1.getX()) / d;
      var dy = moduleSize * (p2.getY() - p1.getY()) / d;
      for (var i = 0; i < size; i++) {
        if (this.image.get(MathUtils_default.round(px + i * dx), MathUtils_default.round(py + i * dy))) {
          result |= 1 << size - i - 1;
        }
      }
      return result;
    };
    Detector5.prototype.isWhiteOrBlackRectangle = function(p1, p2, p3, p4) {
      var corr = 3;
      p1 = new Point(p1.getX() - corr, p1.getY() + corr);
      p2 = new Point(p2.getX() - corr, p2.getY() - corr);
      p3 = new Point(p3.getX() + corr, p3.getY() - corr);
      p4 = new Point(p4.getX() + corr, p4.getY() + corr);
      var cInit = this.getColor(p4, p1);
      if (cInit === 0) {
        return false;
      }
      var c = this.getColor(p1, p2);
      if (c !== cInit) {
        return false;
      }
      c = this.getColor(p2, p3);
      if (c !== cInit) {
        return false;
      }
      c = this.getColor(p3, p4);
      return c === cInit;
    };
    Detector5.prototype.getColor = function(p1, p2) {
      var d = this.distancePoint(p1, p2);
      var dx = (p2.getX() - p1.getX()) / d;
      var dy = (p2.getY() - p1.getY()) / d;
      var error = 0;
      var px = p1.getX();
      var py = p1.getY();
      var colorModel = this.image.get(p1.getX(), p1.getY());
      var iMax = Math.ceil(d);
      for (var i = 0; i < iMax; i++) {
        px += dx;
        py += dy;
        if (this.image.get(MathUtils_default.round(px), MathUtils_default.round(py)) !== colorModel) {
          error++;
        }
      }
      var errRatio = error / d;
      if (errRatio > 0.1 && errRatio < 0.9) {
        return 0;
      }
      return errRatio <= 0.1 === colorModel ? 1 : -1;
    };
    Detector5.prototype.getFirstDifferent = function(init, color, dx, dy) {
      var x = init.getX() + dx;
      var y = init.getY() + dy;
      while (this.isValid(x, y) && this.image.get(x, y) === color) {
        x += dx;
        y += dy;
      }
      x -= dx;
      y -= dy;
      while (this.isValid(x, y) && this.image.get(x, y) === color) {
        x += dx;
      }
      x -= dx;
      while (this.isValid(x, y) && this.image.get(x, y) === color) {
        y += dy;
      }
      y -= dy;
      return new Point(x, y);
    };
    Detector5.prototype.expandSquare = function(cornerPoints, oldSide, newSide) {
      var ratio = newSide / (2 * oldSide);
      var dx = cornerPoints[0].getX() - cornerPoints[2].getX();
      var dy = cornerPoints[0].getY() - cornerPoints[2].getY();
      var centerx = (cornerPoints[0].getX() + cornerPoints[2].getX()) / 2;
      var centery = (cornerPoints[0].getY() + cornerPoints[2].getY()) / 2;
      var result0 = new ResultPoint_default(centerx + ratio * dx, centery + ratio * dy);
      var result2 = new ResultPoint_default(centerx - ratio * dx, centery - ratio * dy);
      dx = cornerPoints[1].getX() - cornerPoints[3].getX();
      dy = cornerPoints[1].getY() - cornerPoints[3].getY();
      centerx = (cornerPoints[1].getX() + cornerPoints[3].getX()) / 2;
      centery = (cornerPoints[1].getY() + cornerPoints[3].getY()) / 2;
      var result1 = new ResultPoint_default(centerx + ratio * dx, centery + ratio * dy);
      var result3 = new ResultPoint_default(centerx - ratio * dx, centery - ratio * dy);
      var results = [result0, result1, result2, result3];
      return results;
    };
    Detector5.prototype.isValid = function(x, y) {
      return x >= 0 && x < this.image.getWidth() && y > 0 && y < this.image.getHeight();
    };
    Detector5.prototype.isValidPoint = function(point) {
      var x = MathUtils_default.round(point.getX());
      var y = MathUtils_default.round(point.getY());
      return this.isValid(x, y);
    };
    Detector5.prototype.distancePoint = function(a, b) {
      return MathUtils_default.distance(a.getX(), a.getY(), b.getX(), b.getY());
    };
    Detector5.prototype.distanceResultPoint = function(a, b) {
      return MathUtils_default.distance(a.getX(), a.getY(), b.getX(), b.getY());
    };
    Detector5.prototype.getDimension = function() {
      if (this.compact) {
        return 4 * this.nbLayers + 11;
      }
      if (this.nbLayers <= 4) {
        return 4 * this.nbLayers + 15;
      }
      return 4 * this.nbLayers + 2 * (Integer_default.truncDivision(this.nbLayers - 4, 8) + 1) + 15;
    };
    return Detector5;
  }()
);
var Detector_default = Detector;

// node_modules/@zxing/library/esm/core/aztec/AztecReader.js
var AztecReader = (
  /** @class */
  function() {
    function AztecReader2() {
    }
    AztecReader2.prototype.decode = function(image, hints) {
      if (hints === void 0) {
        hints = null;
      }
      var exception = null;
      var detector = new Detector_default(image.getBlackMatrix());
      var points = null;
      var decoderResult = null;
      try {
        var detectorResult = detector.detectMirror(false);
        points = detectorResult.getPoints();
        this.reportFoundResultPoints(hints, points);
        decoderResult = new Decoder_default().decode(detectorResult);
      } catch (e) {
        exception = e;
      }
      if (decoderResult == null) {
        try {
          var detectorResult = detector.detectMirror(true);
          points = detectorResult.getPoints();
          this.reportFoundResultPoints(hints, points);
          decoderResult = new Decoder_default().decode(detectorResult);
        } catch (e) {
          if (exception != null) {
            throw exception;
          }
          throw e;
        }
      }
      var result = new Result_default(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat_default.AZTEC, System_default.currentTimeMillis());
      var byteSegments = decoderResult.getByteSegments();
      if (byteSegments != null) {
        result.putMetadata(ResultMetadataType_default.BYTE_SEGMENTS, byteSegments);
      }
      var ecLevel = decoderResult.getECLevel();
      if (ecLevel != null) {
        result.putMetadata(ResultMetadataType_default.ERROR_CORRECTION_LEVEL, ecLevel);
      }
      return result;
    };
    AztecReader2.prototype.reportFoundResultPoints = function(hints, points) {
      if (hints != null) {
        var rpcb_1 = hints.get(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK);
        if (rpcb_1 != null) {
          points.forEach(function(point, idx, arr) {
            rpcb_1.foundPossibleResultPoint(point);
          });
        }
      }
    };
    AztecReader2.prototype.reset = function() {
    };
    return AztecReader2;
  }()
);
var AztecReader_default = AztecReader;

// node_modules/@zxing/library/esm/browser/BrowserAztecCodeReader.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserAztecCodeReader = (
  /** @class */
  function(_super) {
    __extends21(BrowserAztecCodeReader3, _super);
    function BrowserAztecCodeReader3(timeBetweenScansMillis) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      return _super.call(this, new AztecReader_default(), timeBetweenScansMillis) || this;
    }
    return BrowserAztecCodeReader3;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/core/oned/OneDReader.js
var OneDReader = (
  /** @class */
  function() {
    function OneDReader2() {
    }
    OneDReader2.prototype.decode = function(image, hints) {
      try {
        return this.doDecode(image, hints);
      } catch (nfe) {
        var tryHarder = hints && hints.get(DecodeHintType_default.TRY_HARDER) === true;
        if (tryHarder && image.isRotateSupported()) {
          var rotatedImage = image.rotateCounterClockwise();
          var result = this.doDecode(rotatedImage, hints);
          var metadata = result.getResultMetadata();
          var orientation_1 = 270;
          if (metadata !== null && metadata.get(ResultMetadataType_default.ORIENTATION) === true) {
            orientation_1 = orientation_1 + metadata.get(ResultMetadataType_default.ORIENTATION) % 360;
          }
          result.putMetadata(ResultMetadataType_default.ORIENTATION, orientation_1);
          var points = result.getResultPoints();
          if (points !== null) {
            var height = rotatedImage.getHeight();
            for (var i = 0; i < points.length; i++) {
              points[i] = new ResultPoint_default(height - points[i].getY() - 1, points[i].getX());
            }
          }
          return result;
        } else {
          throw new NotFoundException_default();
        }
      }
    };
    OneDReader2.prototype.reset = function() {
    };
    OneDReader2.prototype.doDecode = function(image, hints) {
      var width = image.getWidth();
      var height = image.getHeight();
      var row = new BitArray_default(width);
      var tryHarder = hints && hints.get(DecodeHintType_default.TRY_HARDER) === true;
      var rowStep = Math.max(1, height >> (tryHarder ? 8 : 5));
      var maxLines;
      if (tryHarder) {
        maxLines = height;
      } else {
        maxLines = 15;
      }
      var middle = Math.trunc(height / 2);
      for (var x = 0; x < maxLines; x++) {
        var rowStepsAboveOrBelow = Math.trunc((x + 1) / 2);
        var isAbove = (x & 1) === 0;
        var rowNumber = middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);
        if (rowNumber < 0 || rowNumber >= height) {
          break;
        }
        try {
          row = image.getBlackRow(rowNumber, row);
        } catch (ignored) {
          continue;
        }
        var _loop_1 = function(attempt2) {
          if (attempt2 === 1) {
            row.reverse();
            if (hints && hints.get(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK) === true) {
              var newHints_1 = /* @__PURE__ */ new Map();
              hints.forEach(function(hint, key) {
                return newHints_1.set(key, hint);
              });
              newHints_1.delete(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK);
              hints = newHints_1;
            }
          }
          try {
            var result = this_1.decodeRow(rowNumber, row, hints);
            if (attempt2 === 1) {
              result.putMetadata(ResultMetadataType_default.ORIENTATION, 180);
              var points = result.getResultPoints();
              if (points !== null) {
                points[0] = new ResultPoint_default(width - points[0].getX() - 1, points[0].getY());
                points[1] = new ResultPoint_default(width - points[1].getX() - 1, points[1].getY());
              }
            }
            return { value: result };
          } catch (re) {
          }
        };
        var this_1 = this;
        for (var attempt = 0; attempt < 2; attempt++) {
          var state_1 = _loop_1(attempt);
          if (typeof state_1 === "object")
            return state_1.value;
        }
      }
      throw new NotFoundException_default();
    };
    OneDReader2.recordPattern = function(row, start, counters) {
      var numCounters = counters.length;
      for (var index = 0; index < numCounters; index++)
        counters[index] = 0;
      var end = row.getSize();
      if (start >= end) {
        throw new NotFoundException_default();
      }
      var isWhite = !row.get(start);
      var counterPosition = 0;
      var i = start;
      while (i < end) {
        if (row.get(i) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (++counterPosition === numCounters) {
            break;
          } else {
            counters[counterPosition] = 1;
            isWhite = !isWhite;
          }
        }
        i++;
      }
      if (!(counterPosition === numCounters || counterPosition === numCounters - 1 && i === end)) {
        throw new NotFoundException_default();
      }
    };
    OneDReader2.recordPatternInReverse = function(row, start, counters) {
      var numTransitionsLeft = counters.length;
      var last = row.get(start);
      while (start > 0 && numTransitionsLeft >= 0) {
        if (row.get(--start) !== last) {
          numTransitionsLeft--;
          last = !last;
        }
      }
      if (numTransitionsLeft >= 0) {
        throw new NotFoundException_default();
      }
      OneDReader2.recordPattern(row, start + 1, counters);
    };
    OneDReader2.patternMatchVariance = function(counters, pattern, maxIndividualVariance) {
      var numCounters = counters.length;
      var total = 0;
      var patternLength = 0;
      for (var i = 0; i < numCounters; i++) {
        total += counters[i];
        patternLength += pattern[i];
      }
      if (total < patternLength) {
        return Number.POSITIVE_INFINITY;
      }
      var unitBarWidth = total / patternLength;
      maxIndividualVariance *= unitBarWidth;
      var totalVariance = 0;
      for (var x = 0; x < numCounters; x++) {
        var counter = counters[x];
        var scaledPattern = pattern[x] * unitBarWidth;
        var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;
        if (variance > maxIndividualVariance) {
          return Number.POSITIVE_INFINITY;
        }
        totalVariance += variance;
      }
      return totalVariance / total;
    };
    return OneDReader2;
  }()
);
var OneDReader_default = OneDReader;

// node_modules/@zxing/library/esm/core/oned/Code128Reader.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Code128Reader = (
  /** @class */
  function(_super) {
    __extends22(Code128Reader2, _super);
    function Code128Reader2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Code128Reader2.findStartPattern = function(row) {
      var width = row.getSize();
      var rowOffset = row.getNextSet(0);
      var counterPosition = 0;
      var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);
      var patternStart = rowOffset;
      var isWhite = false;
      var patternLength = 6;
      for (var i = rowOffset; i < width; i++) {
        if (row.get(i) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            var bestVariance = Code128Reader2.MAX_AVG_VARIANCE;
            var bestMatch = -1;
            for (var startCode = Code128Reader2.CODE_START_A; startCode <= Code128Reader2.CODE_START_C; startCode++) {
              var variance = OneDReader_default.patternMatchVariance(counters, Code128Reader2.CODE_PATTERNS[startCode], Code128Reader2.MAX_INDIVIDUAL_VARIANCE);
              if (variance < bestVariance) {
                bestVariance = variance;
                bestMatch = startCode;
              }
            }
            if (bestMatch >= 0 && row.isRange(Math.max(0, patternStart - (i - patternStart) / 2), patternStart, false)) {
              return Int32Array.from([patternStart, i, bestMatch]);
            }
            patternStart += counters[0] + counters[1];
            counters = counters.slice(2, counters.length);
            counters[counterPosition - 1] = 0;
            counters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    Code128Reader2.decodeCode = function(row, counters, rowOffset) {
      OneDReader_default.recordPattern(row, rowOffset, counters);
      var bestVariance = Code128Reader2.MAX_AVG_VARIANCE;
      var bestMatch = -1;
      for (var d = 0; d < Code128Reader2.CODE_PATTERNS.length; d++) {
        var pattern = Code128Reader2.CODE_PATTERNS[d];
        var variance = this.patternMatchVariance(counters, pattern, Code128Reader2.MAX_INDIVIDUAL_VARIANCE);
        if (variance < bestVariance) {
          bestVariance = variance;
          bestMatch = d;
        }
      }
      if (bestMatch >= 0) {
        return bestMatch;
      } else {
        throw new NotFoundException_default();
      }
    };
    Code128Reader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var convertFNC1 = hints && hints.get(DecodeHintType_default.ASSUME_GS1) === true;
      var startPatternInfo = Code128Reader2.findStartPattern(row);
      var startCode = startPatternInfo[2];
      var currentRawCodesIndex = 0;
      var rawCodes = new Uint8Array(20);
      rawCodes[currentRawCodesIndex++] = startCode;
      var codeSet;
      switch (startCode) {
        case Code128Reader2.CODE_START_A:
          codeSet = Code128Reader2.CODE_CODE_A;
          break;
        case Code128Reader2.CODE_START_B:
          codeSet = Code128Reader2.CODE_CODE_B;
          break;
        case Code128Reader2.CODE_START_C:
          codeSet = Code128Reader2.CODE_CODE_C;
          break;
        default:
          throw new FormatException_default();
      }
      var done = false;
      var isNextShifted = false;
      var result = "";
      var lastStart = startPatternInfo[0];
      var nextStart = startPatternInfo[1];
      var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);
      var lastCode = 0;
      var code = 0;
      var checksumTotal = startCode;
      var multiplier = 0;
      var lastCharacterWasPrintable = true;
      var upperMode = false;
      var shiftUpperMode = false;
      while (!done) {
        var unshift = isNextShifted;
        isNextShifted = false;
        lastCode = code;
        code = Code128Reader2.decodeCode(row, counters, nextStart);
        rawCodes[currentRawCodesIndex++] = code;
        if (code !== Code128Reader2.CODE_STOP) {
          lastCharacterWasPrintable = true;
        }
        if (code !== Code128Reader2.CODE_STOP) {
          multiplier++;
          checksumTotal += multiplier * code;
        }
        lastStart = nextStart;
        nextStart += counters.reduce(function(previous, current) {
          return previous + current;
        }, 0);
        switch (code) {
          case Code128Reader2.CODE_START_A:
          case Code128Reader2.CODE_START_B:
          case Code128Reader2.CODE_START_C:
            throw new FormatException_default();
        }
        switch (codeSet) {
          case Code128Reader2.CODE_CODE_A:
            if (code < 64) {
              if (shiftUpperMode === upperMode) {
                result += String.fromCharCode(" ".charCodeAt(0) + code);
              } else {
                result += String.fromCharCode(" ".charCodeAt(0) + code + 128);
              }
              shiftUpperMode = false;
            } else if (code < 96) {
              if (shiftUpperMode === upperMode) {
                result += String.fromCharCode(code - 64);
              } else {
                result += String.fromCharCode(code + 64);
              }
              shiftUpperMode = false;
            } else {
              if (code !== Code128Reader2.CODE_STOP) {
                lastCharacterWasPrintable = false;
              }
              switch (code) {
                case Code128Reader2.CODE_FNC_1:
                  if (convertFNC1) {
                    if (result.length === 0) {
                      result += "]C1";
                    } else {
                      result += String.fromCharCode(29);
                    }
                  }
                  break;
                case Code128Reader2.CODE_FNC_2:
                case Code128Reader2.CODE_FNC_3:
                  break;
                case Code128Reader2.CODE_FNC_4_A:
                  if (!upperMode && shiftUpperMode) {
                    upperMode = true;
                    shiftUpperMode = false;
                  } else if (upperMode && shiftUpperMode) {
                    upperMode = false;
                    shiftUpperMode = false;
                  } else {
                    shiftUpperMode = true;
                  }
                  break;
                case Code128Reader2.CODE_SHIFT:
                  isNextShifted = true;
                  codeSet = Code128Reader2.CODE_CODE_B;
                  break;
                case Code128Reader2.CODE_CODE_B:
                  codeSet = Code128Reader2.CODE_CODE_B;
                  break;
                case Code128Reader2.CODE_CODE_C:
                  codeSet = Code128Reader2.CODE_CODE_C;
                  break;
                case Code128Reader2.CODE_STOP:
                  done = true;
                  break;
              }
            }
            break;
          case Code128Reader2.CODE_CODE_B:
            if (code < 96) {
              if (shiftUpperMode === upperMode) {
                result += String.fromCharCode(" ".charCodeAt(0) + code);
              } else {
                result += String.fromCharCode(" ".charCodeAt(0) + code + 128);
              }
              shiftUpperMode = false;
            } else {
              if (code !== Code128Reader2.CODE_STOP) {
                lastCharacterWasPrintable = false;
              }
              switch (code) {
                case Code128Reader2.CODE_FNC_1:
                  if (convertFNC1) {
                    if (result.length === 0) {
                      result += "]C1";
                    } else {
                      result += String.fromCharCode(29);
                    }
                  }
                  break;
                case Code128Reader2.CODE_FNC_2:
                case Code128Reader2.CODE_FNC_3:
                  break;
                case Code128Reader2.CODE_FNC_4_B:
                  if (!upperMode && shiftUpperMode) {
                    upperMode = true;
                    shiftUpperMode = false;
                  } else if (upperMode && shiftUpperMode) {
                    upperMode = false;
                    shiftUpperMode = false;
                  } else {
                    shiftUpperMode = true;
                  }
                  break;
                case Code128Reader2.CODE_SHIFT:
                  isNextShifted = true;
                  codeSet = Code128Reader2.CODE_CODE_A;
                  break;
                case Code128Reader2.CODE_CODE_A:
                  codeSet = Code128Reader2.CODE_CODE_A;
                  break;
                case Code128Reader2.CODE_CODE_C:
                  codeSet = Code128Reader2.CODE_CODE_C;
                  break;
                case Code128Reader2.CODE_STOP:
                  done = true;
                  break;
              }
            }
            break;
          case Code128Reader2.CODE_CODE_C:
            if (code < 100) {
              if (code < 10) {
                result += "0";
              }
              result += code;
            } else {
              if (code !== Code128Reader2.CODE_STOP) {
                lastCharacterWasPrintable = false;
              }
              switch (code) {
                case Code128Reader2.CODE_FNC_1:
                  if (convertFNC1) {
                    if (result.length === 0) {
                      result += "]C1";
                    } else {
                      result += String.fromCharCode(29);
                    }
                  }
                  break;
                case Code128Reader2.CODE_CODE_A:
                  codeSet = Code128Reader2.CODE_CODE_A;
                  break;
                case Code128Reader2.CODE_CODE_B:
                  codeSet = Code128Reader2.CODE_CODE_B;
                  break;
                case Code128Reader2.CODE_STOP:
                  done = true;
                  break;
              }
            }
            break;
        }
        if (unshift) {
          codeSet = codeSet === Code128Reader2.CODE_CODE_A ? Code128Reader2.CODE_CODE_B : Code128Reader2.CODE_CODE_A;
        }
      }
      var lastPatternSize = nextStart - lastStart;
      nextStart = row.getNextUnset(nextStart);
      if (!row.isRange(nextStart, Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2), false)) {
        throw new NotFoundException_default();
      }
      checksumTotal -= multiplier * lastCode;
      if (checksumTotal % 103 !== lastCode) {
        throw new ChecksumException_default();
      }
      var resultLength = result.length;
      if (resultLength === 0) {
        throw new NotFoundException_default();
      }
      if (resultLength > 0 && lastCharacterWasPrintable) {
        if (codeSet === Code128Reader2.CODE_CODE_C) {
          result = result.substring(0, resultLength - 2);
        } else {
          result = result.substring(0, resultLength - 1);
        }
      }
      var left = (startPatternInfo[1] + startPatternInfo[0]) / 2;
      var right = lastStart + lastPatternSize / 2;
      var rawCodesSize = rawCodes.length;
      var rawBytes = new Uint8Array(rawCodesSize);
      for (var i = 0; i < rawCodesSize; i++) {
        rawBytes[i] = rawCodes[i];
      }
      var points = [new ResultPoint_default(left, rowNumber), new ResultPoint_default(right, rowNumber)];
      return new Result_default(result, rawBytes, 0, points, BarcodeFormat_default.CODE_128, (/* @__PURE__ */ new Date()).getTime());
    };
    Code128Reader2.CODE_PATTERNS = [
      Int32Array.from([2, 1, 2, 2, 2, 2]),
      Int32Array.from([2, 2, 2, 1, 2, 2]),
      Int32Array.from([2, 2, 2, 2, 2, 1]),
      Int32Array.from([1, 2, 1, 2, 2, 3]),
      Int32Array.from([1, 2, 1, 3, 2, 2]),
      Int32Array.from([1, 3, 1, 2, 2, 2]),
      Int32Array.from([1, 2, 2, 2, 1, 3]),
      Int32Array.from([1, 2, 2, 3, 1, 2]),
      Int32Array.from([1, 3, 2, 2, 1, 2]),
      Int32Array.from([2, 2, 1, 2, 1, 3]),
      Int32Array.from([2, 2, 1, 3, 1, 2]),
      Int32Array.from([2, 3, 1, 2, 1, 2]),
      Int32Array.from([1, 1, 2, 2, 3, 2]),
      Int32Array.from([1, 2, 2, 1, 3, 2]),
      Int32Array.from([1, 2, 2, 2, 3, 1]),
      Int32Array.from([1, 1, 3, 2, 2, 2]),
      Int32Array.from([1, 2, 3, 1, 2, 2]),
      Int32Array.from([1, 2, 3, 2, 2, 1]),
      Int32Array.from([2, 2, 3, 2, 1, 1]),
      Int32Array.from([2, 2, 1, 1, 3, 2]),
      Int32Array.from([2, 2, 1, 2, 3, 1]),
      Int32Array.from([2, 1, 3, 2, 1, 2]),
      Int32Array.from([2, 2, 3, 1, 1, 2]),
      Int32Array.from([3, 1, 2, 1, 3, 1]),
      Int32Array.from([3, 1, 1, 2, 2, 2]),
      Int32Array.from([3, 2, 1, 1, 2, 2]),
      Int32Array.from([3, 2, 1, 2, 2, 1]),
      Int32Array.from([3, 1, 2, 2, 1, 2]),
      Int32Array.from([3, 2, 2, 1, 1, 2]),
      Int32Array.from([3, 2, 2, 2, 1, 1]),
      Int32Array.from([2, 1, 2, 1, 2, 3]),
      Int32Array.from([2, 1, 2, 3, 2, 1]),
      Int32Array.from([2, 3, 2, 1, 2, 1]),
      Int32Array.from([1, 1, 1, 3, 2, 3]),
      Int32Array.from([1, 3, 1, 1, 2, 3]),
      Int32Array.from([1, 3, 1, 3, 2, 1]),
      Int32Array.from([1, 1, 2, 3, 1, 3]),
      Int32Array.from([1, 3, 2, 1, 1, 3]),
      Int32Array.from([1, 3, 2, 3, 1, 1]),
      Int32Array.from([2, 1, 1, 3, 1, 3]),
      Int32Array.from([2, 3, 1, 1, 1, 3]),
      Int32Array.from([2, 3, 1, 3, 1, 1]),
      Int32Array.from([1, 1, 2, 1, 3, 3]),
      Int32Array.from([1, 1, 2, 3, 3, 1]),
      Int32Array.from([1, 3, 2, 1, 3, 1]),
      Int32Array.from([1, 1, 3, 1, 2, 3]),
      Int32Array.from([1, 1, 3, 3, 2, 1]),
      Int32Array.from([1, 3, 3, 1, 2, 1]),
      Int32Array.from([3, 1, 3, 1, 2, 1]),
      Int32Array.from([2, 1, 1, 3, 3, 1]),
      Int32Array.from([2, 3, 1, 1, 3, 1]),
      Int32Array.from([2, 1, 3, 1, 1, 3]),
      Int32Array.from([2, 1, 3, 3, 1, 1]),
      Int32Array.from([2, 1, 3, 1, 3, 1]),
      Int32Array.from([3, 1, 1, 1, 2, 3]),
      Int32Array.from([3, 1, 1, 3, 2, 1]),
      Int32Array.from([3, 3, 1, 1, 2, 1]),
      Int32Array.from([3, 1, 2, 1, 1, 3]),
      Int32Array.from([3, 1, 2, 3, 1, 1]),
      Int32Array.from([3, 3, 2, 1, 1, 1]),
      Int32Array.from([3, 1, 4, 1, 1, 1]),
      Int32Array.from([2, 2, 1, 4, 1, 1]),
      Int32Array.from([4, 3, 1, 1, 1, 1]),
      Int32Array.from([1, 1, 1, 2, 2, 4]),
      Int32Array.from([1, 1, 1, 4, 2, 2]),
      Int32Array.from([1, 2, 1, 1, 2, 4]),
      Int32Array.from([1, 2, 1, 4, 2, 1]),
      Int32Array.from([1, 4, 1, 1, 2, 2]),
      Int32Array.from([1, 4, 1, 2, 2, 1]),
      Int32Array.from([1, 1, 2, 2, 1, 4]),
      Int32Array.from([1, 1, 2, 4, 1, 2]),
      Int32Array.from([1, 2, 2, 1, 1, 4]),
      Int32Array.from([1, 2, 2, 4, 1, 1]),
      Int32Array.from([1, 4, 2, 1, 1, 2]),
      Int32Array.from([1, 4, 2, 2, 1, 1]),
      Int32Array.from([2, 4, 1, 2, 1, 1]),
      Int32Array.from([2, 2, 1, 1, 1, 4]),
      Int32Array.from([4, 1, 3, 1, 1, 1]),
      Int32Array.from([2, 4, 1, 1, 1, 2]),
      Int32Array.from([1, 3, 4, 1, 1, 1]),
      Int32Array.from([1, 1, 1, 2, 4, 2]),
      Int32Array.from([1, 2, 1, 1, 4, 2]),
      Int32Array.from([1, 2, 1, 2, 4, 1]),
      Int32Array.from([1, 1, 4, 2, 1, 2]),
      Int32Array.from([1, 2, 4, 1, 1, 2]),
      Int32Array.from([1, 2, 4, 2, 1, 1]),
      Int32Array.from([4, 1, 1, 2, 1, 2]),
      Int32Array.from([4, 2, 1, 1, 1, 2]),
      Int32Array.from([4, 2, 1, 2, 1, 1]),
      Int32Array.from([2, 1, 2, 1, 4, 1]),
      Int32Array.from([2, 1, 4, 1, 2, 1]),
      Int32Array.from([4, 1, 2, 1, 2, 1]),
      Int32Array.from([1, 1, 1, 1, 4, 3]),
      Int32Array.from([1, 1, 1, 3, 4, 1]),
      Int32Array.from([1, 3, 1, 1, 4, 1]),
      Int32Array.from([1, 1, 4, 1, 1, 3]),
      Int32Array.from([1, 1, 4, 3, 1, 1]),
      Int32Array.from([4, 1, 1, 1, 1, 3]),
      Int32Array.from([4, 1, 1, 3, 1, 1]),
      Int32Array.from([1, 1, 3, 1, 4, 1]),
      Int32Array.from([1, 1, 4, 1, 3, 1]),
      Int32Array.from([3, 1, 1, 1, 4, 1]),
      Int32Array.from([4, 1, 1, 1, 3, 1]),
      Int32Array.from([2, 1, 1, 4, 1, 2]),
      Int32Array.from([2, 1, 1, 2, 1, 4]),
      Int32Array.from([2, 1, 1, 2, 3, 2]),
      Int32Array.from([2, 3, 3, 1, 1, 1, 2])
    ];
    Code128Reader2.MAX_AVG_VARIANCE = 0.25;
    Code128Reader2.MAX_INDIVIDUAL_VARIANCE = 0.7;
    Code128Reader2.CODE_SHIFT = 98;
    Code128Reader2.CODE_CODE_C = 99;
    Code128Reader2.CODE_CODE_B = 100;
    Code128Reader2.CODE_CODE_A = 101;
    Code128Reader2.CODE_FNC_1 = 102;
    Code128Reader2.CODE_FNC_2 = 97;
    Code128Reader2.CODE_FNC_3 = 96;
    Code128Reader2.CODE_FNC_4_A = 101;
    Code128Reader2.CODE_FNC_4_B = 100;
    Code128Reader2.CODE_START_A = 103;
    Code128Reader2.CODE_START_B = 104;
    Code128Reader2.CODE_START_C = 105;
    Code128Reader2.CODE_STOP = 106;
    return Code128Reader2;
  }(OneDReader_default)
);
var Code128Reader_default = Code128Reader;

// node_modules/@zxing/library/esm/core/oned/Code39Reader.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values4 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Code39Reader = (
  /** @class */
  function(_super) {
    __extends23(Code39Reader2, _super);
    function Code39Reader2(usingCheckDigit, extendedMode) {
      if (usingCheckDigit === void 0) {
        usingCheckDigit = false;
      }
      if (extendedMode === void 0) {
        extendedMode = false;
      }
      var _this = _super.call(this) || this;
      _this.usingCheckDigit = usingCheckDigit;
      _this.extendedMode = extendedMode;
      _this.decodeRowResult = "";
      _this.counters = new Int32Array(9);
      return _this;
    }
    Code39Reader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var e_1, _a2, e_2, _b;
      var theCounters = this.counters;
      theCounters.fill(0);
      this.decodeRowResult = "";
      var start = Code39Reader2.findAsteriskPattern(row, theCounters);
      var nextStart = row.getNextSet(start[1]);
      var end = row.getSize();
      var decodedChar;
      var lastStart;
      do {
        Code39Reader2.recordPattern(row, nextStart, theCounters);
        var pattern = Code39Reader2.toNarrowWidePattern(theCounters);
        if (pattern < 0) {
          throw new NotFoundException_default();
        }
        decodedChar = Code39Reader2.patternToChar(pattern);
        this.decodeRowResult += decodedChar;
        lastStart = nextStart;
        try {
          for (var theCounters_1 = (e_1 = void 0, __values4(theCounters)), theCounters_1_1 = theCounters_1.next(); !theCounters_1_1.done; theCounters_1_1 = theCounters_1.next()) {
            var counter = theCounters_1_1.value;
            nextStart += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (theCounters_1_1 && !theCounters_1_1.done && (_a2 = theCounters_1.return)) _a2.call(theCounters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        nextStart = row.getNextSet(nextStart);
      } while (decodedChar !== "*");
      this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
      var lastPatternSize = 0;
      try {
        for (var theCounters_2 = __values4(theCounters), theCounters_2_1 = theCounters_2.next(); !theCounters_2_1.done; theCounters_2_1 = theCounters_2.next()) {
          var counter = theCounters_2_1.value;
          lastPatternSize += counter;
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (theCounters_2_1 && !theCounters_2_1.done && (_b = theCounters_2.return)) _b.call(theCounters_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      var whiteSpaceAfterEnd = nextStart - lastStart - lastPatternSize;
      if (nextStart !== end && whiteSpaceAfterEnd * 2 < lastPatternSize) {
        throw new NotFoundException_default();
      }
      if (this.usingCheckDigit) {
        var max = this.decodeRowResult.length - 1;
        var total = 0;
        for (var i = 0; i < max; i++) {
          total += Code39Reader2.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(i));
        }
        if (this.decodeRowResult.charAt(max) !== Code39Reader2.ALPHABET_STRING.charAt(total % 43)) {
          throw new ChecksumException_default();
        }
        this.decodeRowResult = this.decodeRowResult.substring(0, max);
      }
      if (this.decodeRowResult.length === 0) {
        throw new NotFoundException_default();
      }
      var resultString;
      if (this.extendedMode) {
        resultString = Code39Reader2.decodeExtended(this.decodeRowResult);
      } else {
        resultString = this.decodeRowResult;
      }
      var left = (start[1] + start[0]) / 2;
      var right = lastStart + lastPatternSize / 2;
      return new Result_default(resultString, null, 0, [new ResultPoint_default(left, rowNumber), new ResultPoint_default(right, rowNumber)], BarcodeFormat_default.CODE_39, (/* @__PURE__ */ new Date()).getTime());
    };
    Code39Reader2.findAsteriskPattern = function(row, counters) {
      var width = row.getSize();
      var rowOffset = row.getNextSet(0);
      var counterPosition = 0;
      var patternStart = rowOffset;
      var isWhite = false;
      var patternLength = counters.length;
      for (var i = rowOffset; i < width; i++) {
        if (row.get(i) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            if (this.toNarrowWidePattern(counters) === Code39Reader2.ASTERISK_ENCODING && row.isRange(Math.max(0, patternStart - Math.floor((i - patternStart) / 2)), patternStart, false)) {
              return [patternStart, i];
            }
            patternStart += counters[0] + counters[1];
            counters.copyWithin(0, 2, 2 + counterPosition - 1);
            counters[counterPosition - 1] = 0;
            counters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    Code39Reader2.toNarrowWidePattern = function(counters) {
      var e_3, _a2;
      var numCounters = counters.length;
      var maxNarrowCounter = 0;
      var wideCounters;
      do {
        var minCounter = 2147483647;
        try {
          for (var counters_1 = (e_3 = void 0, __values4(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            if (counter < minCounter && counter > maxNarrowCounter) {
              minCounter = counter;
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_3) throw e_3.error;
          }
        }
        maxNarrowCounter = minCounter;
        wideCounters = 0;
        var totalWideCountersWidth = 0;
        var pattern = 0;
        for (var i = 0; i < numCounters; i++) {
          var counter = counters[i];
          if (counter > maxNarrowCounter) {
            pattern |= 1 << numCounters - 1 - i;
            wideCounters++;
            totalWideCountersWidth += counter;
          }
        }
        if (wideCounters === 3) {
          for (var i = 0; i < numCounters && wideCounters > 0; i++) {
            var counter = counters[i];
            if (counter > maxNarrowCounter) {
              wideCounters--;
              if (counter * 2 >= totalWideCountersWidth) {
                return -1;
              }
            }
          }
          return pattern;
        }
      } while (wideCounters > 3);
      return -1;
    };
    Code39Reader2.patternToChar = function(pattern) {
      for (var i = 0; i < Code39Reader2.CHARACTER_ENCODINGS.length; i++) {
        if (Code39Reader2.CHARACTER_ENCODINGS[i] === pattern) {
          return Code39Reader2.ALPHABET_STRING.charAt(i);
        }
      }
      if (pattern === Code39Reader2.ASTERISK_ENCODING) {
        return "*";
      }
      throw new NotFoundException_default();
    };
    Code39Reader2.decodeExtended = function(encoded) {
      var length = encoded.length;
      var decoded = "";
      for (var i = 0; i < length; i++) {
        var c = encoded.charAt(i);
        if (c === "+" || c === "$" || c === "%" || c === "/") {
          var next = encoded.charAt(i + 1);
          var decodedChar = "\0";
          switch (c) {
            case "+":
              if (next >= "A" && next <= "Z") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);
              } else {
                throw new FormatException_default();
              }
              break;
            case "$":
              if (next >= "A" && next <= "Z") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);
              } else {
                throw new FormatException_default();
              }
              break;
            case "%":
              if (next >= "A" && next <= "E") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);
              } else if (next >= "F" && next <= "J") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);
              } else if (next >= "K" && next <= "O") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);
              } else if (next >= "P" && next <= "T") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);
              } else if (next === "U") {
                decodedChar = "\0";
              } else if (next === "V") {
                decodedChar = "@";
              } else if (next === "W") {
                decodedChar = "`";
              } else if (next === "X" || next === "Y" || next === "Z") {
                decodedChar = "\x7F";
              } else {
                throw new FormatException_default();
              }
              break;
            case "/":
              if (next >= "A" && next <= "O") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);
              } else if (next === "Z") {
                decodedChar = ":";
              } else {
                throw new FormatException_default();
              }
              break;
          }
          decoded += decodedChar;
          i++;
        } else {
          decoded += c;
        }
      }
      return decoded;
    };
    Code39Reader2.ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%";
    Code39Reader2.CHARACTER_ENCODINGS = [
      52,
      289,
      97,
      352,
      49,
      304,
      112,
      37,
      292,
      100,
      265,
      73,
      328,
      25,
      280,
      88,
      13,
      268,
      76,
      28,
      259,
      67,
      322,
      19,
      274,
      82,
      7,
      262,
      70,
      22,
      385,
      193,
      448,
      145,
      400,
      208,
      133,
      388,
      196,
      168,
      162,
      138,
      42
      // /-%
    ];
    Code39Reader2.ASTERISK_ENCODING = 148;
    return Code39Reader2;
  }(OneDReader_default)
);
var Code39Reader_default = Code39Reader;

// node_modules/@zxing/library/esm/core/oned/Code93Reader.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values5 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Code93Reader = (
  /** @class */
  function(_super) {
    __extends24(Code93Reader2, _super);
    function Code93Reader2() {
      var _this = _super.call(this) || this;
      _this.decodeRowResult = "";
      _this.counters = new Int32Array(6);
      return _this;
    }
    Code93Reader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var e_1, _a2, e_2, _b;
      var start = this.findAsteriskPattern(row);
      var nextStart = row.getNextSet(start[1]);
      var end = row.getSize();
      var theCounters = this.counters;
      theCounters.fill(0);
      this.decodeRowResult = "";
      var decodedChar;
      var lastStart;
      do {
        Code93Reader2.recordPattern(row, nextStart, theCounters);
        var pattern = this.toPattern(theCounters);
        if (pattern < 0) {
          throw new NotFoundException_default();
        }
        decodedChar = this.patternToChar(pattern);
        this.decodeRowResult += decodedChar;
        lastStart = nextStart;
        try {
          for (var theCounters_1 = (e_1 = void 0, __values5(theCounters)), theCounters_1_1 = theCounters_1.next(); !theCounters_1_1.done; theCounters_1_1 = theCounters_1.next()) {
            var counter = theCounters_1_1.value;
            nextStart += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (theCounters_1_1 && !theCounters_1_1.done && (_a2 = theCounters_1.return)) _a2.call(theCounters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        nextStart = row.getNextSet(nextStart);
      } while (decodedChar !== "*");
      this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
      var lastPatternSize = 0;
      try {
        for (var theCounters_2 = __values5(theCounters), theCounters_2_1 = theCounters_2.next(); !theCounters_2_1.done; theCounters_2_1 = theCounters_2.next()) {
          var counter = theCounters_2_1.value;
          lastPatternSize += counter;
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (theCounters_2_1 && !theCounters_2_1.done && (_b = theCounters_2.return)) _b.call(theCounters_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      if (nextStart === end || !row.get(nextStart)) {
        throw new NotFoundException_default();
      }
      if (this.decodeRowResult.length < 2) {
        throw new NotFoundException_default();
      }
      this.checkChecksums(this.decodeRowResult);
      this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 2);
      var resultString = this.decodeExtended(this.decodeRowResult);
      var left = (start[1] + start[0]) / 2;
      var right = lastStart + lastPatternSize / 2;
      return new Result_default(resultString, null, 0, [new ResultPoint_default(left, rowNumber), new ResultPoint_default(right, rowNumber)], BarcodeFormat_default.CODE_93, (/* @__PURE__ */ new Date()).getTime());
    };
    Code93Reader2.prototype.findAsteriskPattern = function(row) {
      var width = row.getSize();
      var rowOffset = row.getNextSet(0);
      this.counters.fill(0);
      var theCounters = this.counters;
      var patternStart = rowOffset;
      var isWhite = false;
      var patternLength = theCounters.length;
      var counterPosition = 0;
      for (var i = rowOffset; i < width; i++) {
        if (row.get(i) !== isWhite) {
          theCounters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            if (this.toPattern(theCounters) === Code93Reader2.ASTERISK_ENCODING) {
              return new Int32Array([patternStart, i]);
            }
            patternStart += theCounters[0] + theCounters[1];
            theCounters.copyWithin(0, 2, 2 + counterPosition - 1);
            theCounters[counterPosition - 1] = 0;
            theCounters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          theCounters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    Code93Reader2.prototype.toPattern = function(counters) {
      var e_3, _a2;
      var sum = 0;
      try {
        for (var counters_1 = __values5(counters), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
          var counter = counters_1_1.value;
          sum += counter;
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      var pattern = 0;
      var max = counters.length;
      for (var i = 0; i < max; i++) {
        var scaled = Math.round(counters[i] * 9 / sum);
        if (scaled < 1 || scaled > 4) {
          return -1;
        }
        if ((i & 1) === 0) {
          for (var j = 0; j < scaled; j++) {
            pattern = pattern << 1 | 1;
          }
        } else {
          pattern <<= scaled;
        }
      }
      return pattern;
    };
    Code93Reader2.prototype.patternToChar = function(pattern) {
      for (var i = 0; i < Code93Reader2.CHARACTER_ENCODINGS.length; i++) {
        if (Code93Reader2.CHARACTER_ENCODINGS[i] === pattern) {
          return Code93Reader2.ALPHABET_STRING.charAt(i);
        }
      }
      throw new NotFoundException_default();
    };
    Code93Reader2.prototype.decodeExtended = function(encoded) {
      var length = encoded.length;
      var decoded = "";
      for (var i = 0; i < length; i++) {
        var c = encoded.charAt(i);
        if (c >= "a" && c <= "d") {
          if (i >= length - 1) {
            throw new FormatException_default();
          }
          var next = encoded.charAt(i + 1);
          var decodedChar = "\0";
          switch (c) {
            case "d":
              if (next >= "A" && next <= "Z") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);
              } else {
                throw new FormatException_default();
              }
              break;
            case "a":
              if (next >= "A" && next <= "Z") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);
              } else {
                throw new FormatException_default();
              }
              break;
            case "b":
              if (next >= "A" && next <= "E") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);
              } else if (next >= "F" && next <= "J") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);
              } else if (next >= "K" && next <= "O") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);
              } else if (next >= "P" && next <= "T") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);
              } else if (next === "U") {
                decodedChar = "\0";
              } else if (next === "V") {
                decodedChar = "@";
              } else if (next === "W") {
                decodedChar = "`";
              } else if (next >= "X" && next <= "Z") {
                decodedChar = String.fromCharCode(127);
              } else {
                throw new FormatException_default();
              }
              break;
            case "c":
              if (next >= "A" && next <= "O") {
                decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);
              } else if (next === "Z") {
                decodedChar = ":";
              } else {
                throw new FormatException_default();
              }
              break;
          }
          decoded += decodedChar;
          i++;
        } else {
          decoded += c;
        }
      }
      return decoded;
    };
    Code93Reader2.prototype.checkChecksums = function(result) {
      var length = result.length;
      this.checkOneChecksum(result, length - 2, 20);
      this.checkOneChecksum(result, length - 1, 15);
    };
    Code93Reader2.prototype.checkOneChecksum = function(result, checkPosition, weightMax) {
      var weight = 1;
      var total = 0;
      for (var i = checkPosition - 1; i >= 0; i--) {
        total += weight * Code93Reader2.ALPHABET_STRING.indexOf(result.charAt(i));
        if (++weight > weightMax) {
          weight = 1;
        }
      }
      if (result.charAt(checkPosition) !== Code93Reader2.ALPHABET_STRING[total % 47]) {
        throw new ChecksumException_default();
      }
    };
    Code93Reader2.ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*";
    Code93Reader2.CHARACTER_ENCODINGS = [
      276,
      328,
      324,
      322,
      296,
      292,
      290,
      336,
      274,
      266,
      424,
      420,
      418,
      404,
      402,
      394,
      360,
      356,
      354,
      308,
      282,
      344,
      332,
      326,
      300,
      278,
      436,
      434,
      428,
      422,
      406,
      410,
      364,
      358,
      310,
      314,
      302,
      468,
      466,
      458,
      366,
      374,
      430,
      294,
      474,
      470,
      306,
      350
    ];
    Code93Reader2.ASTERISK_ENCODING = Code93Reader2.CHARACTER_ENCODINGS[47];
    return Code93Reader2;
  }(OneDReader_default)
);
var Code93Reader_default = Code93Reader;

// node_modules/@zxing/library/esm/core/oned/ITFReader.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values6 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ITFReader = (
  /** @class */
  function(_super) {
    __extends25(ITFReader2, _super);
    function ITFReader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.narrowLineWidth = -1;
      return _this;
    }
    ITFReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var e_1, _a2;
      var startRange = this.decodeStart(row);
      var endRange = this.decodeEnd(row);
      var result = new StringBuilder_default();
      ITFReader2.decodeMiddle(row, startRange[1], endRange[0], result);
      var resultString = result.toString();
      var allowedLengths = null;
      if (hints != null) {
        allowedLengths = hints.get(DecodeHintType_default.ALLOWED_LENGTHS);
      }
      if (allowedLengths == null) {
        allowedLengths = ITFReader2.DEFAULT_ALLOWED_LENGTHS;
      }
      var length = resultString.length;
      var lengthOK = false;
      var maxAllowedLength = 0;
      try {
        for (var allowedLengths_1 = __values6(allowedLengths), allowedLengths_1_1 = allowedLengths_1.next(); !allowedLengths_1_1.done; allowedLengths_1_1 = allowedLengths_1.next()) {
          var value = allowedLengths_1_1.value;
          if (length === value) {
            lengthOK = true;
            break;
          }
          if (value > maxAllowedLength) {
            maxAllowedLength = value;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (allowedLengths_1_1 && !allowedLengths_1_1.done && (_a2 = allowedLengths_1.return)) _a2.call(allowedLengths_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (!lengthOK && length > maxAllowedLength) {
        lengthOK = true;
      }
      if (!lengthOK) {
        throw new FormatException_default();
      }
      var points = [new ResultPoint_default(startRange[1], rowNumber), new ResultPoint_default(endRange[0], rowNumber)];
      var resultReturn = new Result_default(
        resultString,
        null,
        // no natural byte representation for these barcodes
        0,
        points,
        BarcodeFormat_default.ITF,
        (/* @__PURE__ */ new Date()).getTime()
      );
      return resultReturn;
    };
    ITFReader2.decodeMiddle = function(row, payloadStart, payloadEnd, resultString) {
      var counterDigitPair = new Int32Array(10);
      var counterBlack = new Int32Array(5);
      var counterWhite = new Int32Array(5);
      counterDigitPair.fill(0);
      counterBlack.fill(0);
      counterWhite.fill(0);
      while (payloadStart < payloadEnd) {
        OneDReader_default.recordPattern(row, payloadStart, counterDigitPair);
        for (var k = 0; k < 5; k++) {
          var twoK = 2 * k;
          counterBlack[k] = counterDigitPair[twoK];
          counterWhite[k] = counterDigitPair[twoK + 1];
        }
        var bestMatch = ITFReader2.decodeDigit(counterBlack);
        resultString.append(bestMatch.toString());
        bestMatch = this.decodeDigit(counterWhite);
        resultString.append(bestMatch.toString());
        counterDigitPair.forEach(function(counterDigit) {
          payloadStart += counterDigit;
        });
      }
    };
    ITFReader2.prototype.decodeStart = function(row) {
      var endStart = ITFReader2.skipWhiteSpace(row);
      var startPattern = ITFReader2.findGuardPattern(row, endStart, ITFReader2.START_PATTERN);
      this.narrowLineWidth = (startPattern[1] - startPattern[0]) / 4;
      this.validateQuietZone(row, startPattern[0]);
      return startPattern;
    };
    ITFReader2.prototype.validateQuietZone = function(row, startPattern) {
      var quietCount = this.narrowLineWidth * 10;
      quietCount = quietCount < startPattern ? quietCount : startPattern;
      for (var i = startPattern - 1; quietCount > 0 && i >= 0; i--) {
        if (row.get(i)) {
          break;
        }
        quietCount--;
      }
      if (quietCount !== 0) {
        throw new NotFoundException_default();
      }
    };
    ITFReader2.skipWhiteSpace = function(row) {
      var width = row.getSize();
      var endStart = row.getNextSet(0);
      if (endStart === width) {
        throw new NotFoundException_default();
      }
      return endStart;
    };
    ITFReader2.prototype.decodeEnd = function(row) {
      row.reverse();
      try {
        var endStart = ITFReader2.skipWhiteSpace(row);
        var endPattern = void 0;
        try {
          endPattern = ITFReader2.findGuardPattern(row, endStart, ITFReader2.END_PATTERN_REVERSED[0]);
        } catch (error) {
          if (error instanceof NotFoundException_default) {
            endPattern = ITFReader2.findGuardPattern(row, endStart, ITFReader2.END_PATTERN_REVERSED[1]);
          }
        }
        this.validateQuietZone(row, endPattern[0]);
        var temp = endPattern[0];
        endPattern[0] = row.getSize() - endPattern[1];
        endPattern[1] = row.getSize() - temp;
        return endPattern;
      } finally {
        row.reverse();
      }
    };
    ITFReader2.findGuardPattern = function(row, rowOffset, pattern) {
      var patternLength = pattern.length;
      var counters = new Int32Array(patternLength);
      var width = row.getSize();
      var isWhite = false;
      var counterPosition = 0;
      var patternStart = rowOffset;
      counters.fill(0);
      for (var x = rowOffset; x < width; x++) {
        if (row.get(x) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            if (OneDReader_default.patternMatchVariance(counters, pattern, ITFReader2.MAX_INDIVIDUAL_VARIANCE) < ITFReader2.MAX_AVG_VARIANCE) {
              return [patternStart, x];
            }
            patternStart += counters[0] + counters[1];
            System_default.arraycopy(counters, 2, counters, 0, counterPosition - 1);
            counters[counterPosition - 1] = 0;
            counters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    ITFReader2.decodeDigit = function(counters) {
      var bestVariance = ITFReader2.MAX_AVG_VARIANCE;
      var bestMatch = -1;
      var max = ITFReader2.PATTERNS.length;
      for (var i = 0; i < max; i++) {
        var pattern = ITFReader2.PATTERNS[i];
        var variance = OneDReader_default.patternMatchVariance(counters, pattern, ITFReader2.MAX_INDIVIDUAL_VARIANCE);
        if (variance < bestVariance) {
          bestVariance = variance;
          bestMatch = i;
        } else if (variance === bestVariance) {
          bestMatch = -1;
        }
      }
      if (bestMatch >= 0) {
        return bestMatch % 10;
      } else {
        throw new NotFoundException_default();
      }
    };
    ITFReader2.PATTERNS = [
      Int32Array.from([1, 1, 2, 2, 1]),
      Int32Array.from([2, 1, 1, 1, 2]),
      Int32Array.from([1, 2, 1, 1, 2]),
      Int32Array.from([2, 2, 1, 1, 1]),
      Int32Array.from([1, 1, 2, 1, 2]),
      Int32Array.from([2, 1, 2, 1, 1]),
      Int32Array.from([1, 2, 2, 1, 1]),
      Int32Array.from([1, 1, 1, 2, 2]),
      Int32Array.from([2, 1, 1, 2, 1]),
      Int32Array.from([1, 2, 1, 2, 1]),
      Int32Array.from([1, 1, 3, 3, 1]),
      Int32Array.from([3, 1, 1, 1, 3]),
      Int32Array.from([1, 3, 1, 1, 3]),
      Int32Array.from([3, 3, 1, 1, 1]),
      Int32Array.from([1, 1, 3, 1, 3]),
      Int32Array.from([3, 1, 3, 1, 1]),
      Int32Array.from([1, 3, 3, 1, 1]),
      Int32Array.from([1, 1, 1, 3, 3]),
      Int32Array.from([3, 1, 1, 3, 1]),
      Int32Array.from([1, 3, 1, 3, 1])
      // 9
    ];
    ITFReader2.MAX_AVG_VARIANCE = 0.38;
    ITFReader2.MAX_INDIVIDUAL_VARIANCE = 0.5;
    ITFReader2.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14];
    ITFReader2.START_PATTERN = Int32Array.from([1, 1, 1, 1]);
    ITFReader2.END_PATTERN_REVERSED = [
      Int32Array.from([1, 1, 2]),
      Int32Array.from([1, 1, 3])
      // 3x
    ];
    return ITFReader2;
  }(OneDReader_default)
);
var ITFReader_default = ITFReader;

// node_modules/@zxing/library/esm/core/oned/AbstractUPCEANReader.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AbstractUPCEANReader = (
  /** @class */
  function(_super) {
    __extends26(AbstractUPCEANReader2, _super);
    function AbstractUPCEANReader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.decodeRowStringBuffer = "";
      return _this;
    }
    AbstractUPCEANReader2.findStartGuardPattern = function(row) {
      var foundStart = false;
      var startRange;
      var nextStart = 0;
      var counters = Int32Array.from([0, 0, 0]);
      while (!foundStart) {
        counters = Int32Array.from([0, 0, 0]);
        startRange = AbstractUPCEANReader2.findGuardPattern(row, nextStart, false, this.START_END_PATTERN, counters);
        var start = startRange[0];
        nextStart = startRange[1];
        var quietStart = start - (nextStart - start);
        if (quietStart >= 0) {
          foundStart = row.isRange(quietStart, start, false);
        }
      }
      return startRange;
    };
    AbstractUPCEANReader2.checkChecksum = function(s) {
      return AbstractUPCEANReader2.checkStandardUPCEANChecksum(s);
    };
    AbstractUPCEANReader2.checkStandardUPCEANChecksum = function(s) {
      var length = s.length;
      if (length === 0)
        return false;
      var check = parseInt(s.charAt(length - 1), 10);
      return AbstractUPCEANReader2.getStandardUPCEANChecksum(s.substring(0, length - 1)) === check;
    };
    AbstractUPCEANReader2.getStandardUPCEANChecksum = function(s) {
      var length = s.length;
      var sum = 0;
      for (var i = length - 1; i >= 0; i -= 2) {
        var digit = s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
        if (digit < 0 || digit > 9) {
          throw new FormatException_default();
        }
        sum += digit;
      }
      sum *= 3;
      for (var i = length - 2; i >= 0; i -= 2) {
        var digit = s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
        if (digit < 0 || digit > 9) {
          throw new FormatException_default();
        }
        sum += digit;
      }
      return (1e3 - sum) % 10;
    };
    AbstractUPCEANReader2.decodeEnd = function(row, endStart) {
      return AbstractUPCEANReader2.findGuardPattern(row, endStart, false, AbstractUPCEANReader2.START_END_PATTERN, new Int32Array(AbstractUPCEANReader2.START_END_PATTERN.length).fill(0));
    };
    AbstractUPCEANReader2.findGuardPatternWithoutCounters = function(row, rowOffset, whiteFirst, pattern) {
      return this.findGuardPattern(row, rowOffset, whiteFirst, pattern, new Int32Array(pattern.length));
    };
    AbstractUPCEANReader2.findGuardPattern = function(row, rowOffset, whiteFirst, pattern, counters) {
      var width = row.getSize();
      rowOffset = whiteFirst ? row.getNextUnset(rowOffset) : row.getNextSet(rowOffset);
      var counterPosition = 0;
      var patternStart = rowOffset;
      var patternLength = pattern.length;
      var isWhite = whiteFirst;
      for (var x = rowOffset; x < width; x++) {
        if (row.get(x) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            if (OneDReader_default.patternMatchVariance(counters, pattern, AbstractUPCEANReader2.MAX_INDIVIDUAL_VARIANCE) < AbstractUPCEANReader2.MAX_AVG_VARIANCE) {
              return Int32Array.from([patternStart, x]);
            }
            patternStart += counters[0] + counters[1];
            var slice = counters.slice(2, counters.length);
            for (var i = 0; i < counterPosition - 1; i++) {
              counters[i] = slice[i];
            }
            counters[counterPosition - 1] = 0;
            counters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    AbstractUPCEANReader2.decodeDigit = function(row, counters, rowOffset, patterns) {
      this.recordPattern(row, rowOffset, counters);
      var bestVariance = this.MAX_AVG_VARIANCE;
      var bestMatch = -1;
      var max = patterns.length;
      for (var i = 0; i < max; i++) {
        var pattern = patterns[i];
        var variance = OneDReader_default.patternMatchVariance(counters, pattern, AbstractUPCEANReader2.MAX_INDIVIDUAL_VARIANCE);
        if (variance < bestVariance) {
          bestVariance = variance;
          bestMatch = i;
        }
      }
      if (bestMatch >= 0) {
        return bestMatch;
      } else {
        throw new NotFoundException_default();
      }
    };
    AbstractUPCEANReader2.MAX_AVG_VARIANCE = 0.48;
    AbstractUPCEANReader2.MAX_INDIVIDUAL_VARIANCE = 0.7;
    AbstractUPCEANReader2.START_END_PATTERN = Int32Array.from([1, 1, 1]);
    AbstractUPCEANReader2.MIDDLE_PATTERN = Int32Array.from([1, 1, 1, 1, 1]);
    AbstractUPCEANReader2.END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);
    AbstractUPCEANReader2.L_PATTERNS = [
      Int32Array.from([3, 2, 1, 1]),
      Int32Array.from([2, 2, 2, 1]),
      Int32Array.from([2, 1, 2, 2]),
      Int32Array.from([1, 4, 1, 1]),
      Int32Array.from([1, 1, 3, 2]),
      Int32Array.from([1, 2, 3, 1]),
      Int32Array.from([1, 1, 1, 4]),
      Int32Array.from([1, 3, 1, 2]),
      Int32Array.from([1, 2, 1, 3]),
      Int32Array.from([3, 1, 1, 2])
    ];
    return AbstractUPCEANReader2;
  }(OneDReader_default)
);
var AbstractUPCEANReader_default = AbstractUPCEANReader;

// node_modules/@zxing/library/esm/core/oned/UPCEANExtension5Support.js
var __values7 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var UPCEANExtension5Support = (
  /** @class */
  function() {
    function UPCEANExtension5Support2() {
      this.CHECK_DIGIT_ENCODINGS = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5];
      this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
      this.decodeRowStringBuffer = "";
    }
    UPCEANExtension5Support2.prototype.decodeRow = function(rowNumber, row, extensionStartRange) {
      var result = this.decodeRowStringBuffer;
      var end = this.decodeMiddle(row, extensionStartRange, result);
      var resultString = result.toString();
      var extensionData = UPCEANExtension5Support2.parseExtensionString(resultString);
      var resultPoints = [
        new ResultPoint_default((extensionStartRange[0] + extensionStartRange[1]) / 2, rowNumber),
        new ResultPoint_default(end, rowNumber)
      ];
      var extensionResult = new Result_default(resultString, null, 0, resultPoints, BarcodeFormat_default.UPC_EAN_EXTENSION, (/* @__PURE__ */ new Date()).getTime());
      if (extensionData != null) {
        extensionResult.putAllMetadata(extensionData);
      }
      return extensionResult;
    };
    UPCEANExtension5Support2.prototype.decodeMiddle = function(row, startRange, resultString) {
      var e_1, _a2;
      var counters = this.decodeMiddleCounters;
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var end = row.getSize();
      var rowOffset = startRange[1];
      var lgPatternFound = 0;
      for (var x = 0; x < 5 && rowOffset < end; x++) {
        var bestMatch = AbstractUPCEANReader_default.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader_default.L_AND_G_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch % 10);
        try {
          for (var counters_1 = (e_1 = void 0, __values7(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            rowOffset += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        if (bestMatch >= 10) {
          lgPatternFound |= 1 << 4 - x;
        }
        if (x !== 4) {
          rowOffset = row.getNextSet(rowOffset);
          rowOffset = row.getNextUnset(rowOffset);
        }
      }
      if (resultString.length !== 5) {
        throw new NotFoundException_default();
      }
      var checkDigit = this.determineCheckDigit(lgPatternFound);
      if (UPCEANExtension5Support2.extensionChecksum(resultString.toString()) !== checkDigit) {
        throw new NotFoundException_default();
      }
      return rowOffset;
    };
    UPCEANExtension5Support2.extensionChecksum = function(s) {
      var length = s.length;
      var sum = 0;
      for (var i = length - 2; i >= 0; i -= 2) {
        sum += s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
      }
      sum *= 3;
      for (var i = length - 1; i >= 0; i -= 2) {
        sum += s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
      }
      sum *= 3;
      return sum % 10;
    };
    UPCEANExtension5Support2.prototype.determineCheckDigit = function(lgPatternFound) {
      for (var d = 0; d < 10; d++) {
        if (lgPatternFound === this.CHECK_DIGIT_ENCODINGS[d]) {
          return d;
        }
      }
      throw new NotFoundException_default();
    };
    UPCEANExtension5Support2.parseExtensionString = function(raw) {
      if (raw.length !== 5) {
        return null;
      }
      var value = UPCEANExtension5Support2.parseExtension5String(raw);
      if (value == null) {
        return null;
      }
      return /* @__PURE__ */ new Map([[ResultMetadataType_default.SUGGESTED_PRICE, value]]);
    };
    UPCEANExtension5Support2.parseExtension5String = function(raw) {
      var currency;
      switch (raw.charAt(0)) {
        case "0":
          currency = "\xA3";
          break;
        case "5":
          currency = "$";
          break;
        case "9":
          switch (raw) {
            case "90000":
              return null;
            case "99991":
              return "0.00";
            case "99990":
              return "Used";
          }
          currency = "";
          break;
        default:
          currency = "";
          break;
      }
      var rawAmount = parseInt(raw.substring(1));
      var unitsString = (rawAmount / 100).toString();
      var hundredths = rawAmount % 100;
      var hundredthsString = hundredths < 10 ? "0" + hundredths : hundredths.toString();
      return currency + unitsString + "." + hundredthsString;
    };
    return UPCEANExtension5Support2;
  }()
);
var UPCEANExtension5Support_default = UPCEANExtension5Support;

// node_modules/@zxing/library/esm/core/oned/UPCEANExtension2Support.js
var __values8 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var UPCEANExtension2Support = (
  /** @class */
  function() {
    function UPCEANExtension2Support2() {
      this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
      this.decodeRowStringBuffer = "";
    }
    UPCEANExtension2Support2.prototype.decodeRow = function(rowNumber, row, extensionStartRange) {
      var result = this.decodeRowStringBuffer;
      var end = this.decodeMiddle(row, extensionStartRange, result);
      var resultString = result.toString();
      var extensionData = UPCEANExtension2Support2.parseExtensionString(resultString);
      var resultPoints = [
        new ResultPoint_default((extensionStartRange[0] + extensionStartRange[1]) / 2, rowNumber),
        new ResultPoint_default(end, rowNumber)
      ];
      var extensionResult = new Result_default(resultString, null, 0, resultPoints, BarcodeFormat_default.UPC_EAN_EXTENSION, (/* @__PURE__ */ new Date()).getTime());
      if (extensionData != null) {
        extensionResult.putAllMetadata(extensionData);
      }
      return extensionResult;
    };
    UPCEANExtension2Support2.prototype.decodeMiddle = function(row, startRange, resultString) {
      var e_1, _a2;
      var counters = this.decodeMiddleCounters;
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var end = row.getSize();
      var rowOffset = startRange[1];
      var checkParity = 0;
      for (var x = 0; x < 2 && rowOffset < end; x++) {
        var bestMatch = AbstractUPCEANReader_default.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader_default.L_AND_G_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch % 10);
        try {
          for (var counters_1 = (e_1 = void 0, __values8(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            rowOffset += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        if (bestMatch >= 10) {
          checkParity |= 1 << 1 - x;
        }
        if (x !== 1) {
          rowOffset = row.getNextSet(rowOffset);
          rowOffset = row.getNextUnset(rowOffset);
        }
      }
      if (resultString.length !== 2) {
        throw new NotFoundException_default();
      }
      if (parseInt(resultString.toString()) % 4 !== checkParity) {
        throw new NotFoundException_default();
      }
      return rowOffset;
    };
    UPCEANExtension2Support2.parseExtensionString = function(raw) {
      if (raw.length !== 2) {
        return null;
      }
      return /* @__PURE__ */ new Map([[ResultMetadataType_default.ISSUE_NUMBER, parseInt(raw)]]);
    };
    return UPCEANExtension2Support2;
  }()
);
var UPCEANExtension2Support_default = UPCEANExtension2Support;

// node_modules/@zxing/library/esm/core/oned/UPCEANExtensionSupport.js
var UPCEANExtensionSupport = (
  /** @class */
  function() {
    function UPCEANExtensionSupport2() {
    }
    UPCEANExtensionSupport2.decodeRow = function(rowNumber, row, rowOffset) {
      var extensionStartRange = AbstractUPCEANReader_default.findGuardPattern(row, rowOffset, false, this.EXTENSION_START_PATTERN, new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0));
      try {
        var fiveSupport = new UPCEANExtension5Support_default();
        return fiveSupport.decodeRow(rowNumber, row, extensionStartRange);
      } catch (err) {
        var twoSupport = new UPCEANExtension2Support_default();
        return twoSupport.decodeRow(rowNumber, row, extensionStartRange);
      }
    };
    UPCEANExtensionSupport2.EXTENSION_START_PATTERN = Int32Array.from([1, 1, 2]);
    return UPCEANExtensionSupport2;
  }()
);
var UPCEANExtensionSupport_default = UPCEANExtensionSupport;

// node_modules/@zxing/library/esm/core/oned/UPCEANReader.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UPCEANReader = (
  /** @class */
  function(_super) {
    __extends27(UPCEANReader2, _super);
    function UPCEANReader2() {
      var _this = _super.call(this) || this;
      _this.decodeRowStringBuffer = "";
      UPCEANReader2.L_AND_G_PATTERNS = UPCEANReader2.L_PATTERNS.map(function(arr) {
        return Int32Array.from(arr);
      });
      for (var i = 10; i < 20; i++) {
        var widths = UPCEANReader2.L_PATTERNS[i - 10];
        var reversedWidths = new Int32Array(widths.length);
        for (var j = 0; j < widths.length; j++) {
          reversedWidths[j] = widths[widths.length - j - 1];
        }
        UPCEANReader2.L_AND_G_PATTERNS[i] = reversedWidths;
      }
      return _this;
    }
    UPCEANReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var startGuardRange = UPCEANReader2.findStartGuardPattern(row);
      var resultPointCallback = hints == null ? null : hints.get(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK);
      if (resultPointCallback != null) {
        var resultPoint_1 = new ResultPoint_default((startGuardRange[0] + startGuardRange[1]) / 2, rowNumber);
        resultPointCallback.foundPossibleResultPoint(resultPoint_1);
      }
      var budello = this.decodeMiddle(row, startGuardRange, this.decodeRowStringBuffer);
      var endStart = budello.rowOffset;
      var result = budello.resultString;
      if (resultPointCallback != null) {
        var resultPoint_2 = new ResultPoint_default(endStart, rowNumber);
        resultPointCallback.foundPossibleResultPoint(resultPoint_2);
      }
      var endRange = UPCEANReader2.decodeEnd(row, endStart);
      if (resultPointCallback != null) {
        var resultPoint_3 = new ResultPoint_default((endRange[0] + endRange[1]) / 2, rowNumber);
        resultPointCallback.foundPossibleResultPoint(resultPoint_3);
      }
      var end = endRange[1];
      var quietEnd = end + (end - endRange[0]);
      if (quietEnd >= row.getSize() || !row.isRange(end, quietEnd, false)) {
        throw new NotFoundException_default();
      }
      var resultString = result.toString();
      if (resultString.length < 8) {
        throw new FormatException_default();
      }
      if (!UPCEANReader2.checkChecksum(resultString)) {
        throw new ChecksumException_default();
      }
      var left = (startGuardRange[1] + startGuardRange[0]) / 2;
      var right = (endRange[1] + endRange[0]) / 2;
      var format = this.getBarcodeFormat();
      var resultPoint = [new ResultPoint_default(left, rowNumber), new ResultPoint_default(right, rowNumber)];
      var decodeResult = new Result_default(resultString, null, 0, resultPoint, format, (/* @__PURE__ */ new Date()).getTime());
      var extensionLength = 0;
      try {
        var extensionResult = UPCEANExtensionSupport_default.decodeRow(rowNumber, row, endRange[1]);
        decodeResult.putMetadata(ResultMetadataType_default.UPC_EAN_EXTENSION, extensionResult.getText());
        decodeResult.putAllMetadata(extensionResult.getResultMetadata());
        decodeResult.addResultPoints(extensionResult.getResultPoints());
        extensionLength = extensionResult.getText().length;
      } catch (err) {
      }
      var allowedExtensions = hints == null ? null : hints.get(DecodeHintType_default.ALLOWED_EAN_EXTENSIONS);
      if (allowedExtensions != null) {
        var valid = false;
        for (var length_1 in allowedExtensions) {
          if (extensionLength.toString() === length_1) {
            valid = true;
            break;
          }
        }
        if (!valid) {
          throw new NotFoundException_default();
        }
      }
      if (format === BarcodeFormat_default.EAN_13 || format === BarcodeFormat_default.UPC_A) {
      }
      return decodeResult;
    };
    UPCEANReader2.checkChecksum = function(s) {
      return UPCEANReader2.checkStandardUPCEANChecksum(s);
    };
    UPCEANReader2.checkStandardUPCEANChecksum = function(s) {
      var length = s.length;
      if (length === 0)
        return false;
      var check = parseInt(s.charAt(length - 1), 10);
      return UPCEANReader2.getStandardUPCEANChecksum(s.substring(0, length - 1)) === check;
    };
    UPCEANReader2.getStandardUPCEANChecksum = function(s) {
      var length = s.length;
      var sum = 0;
      for (var i = length - 1; i >= 0; i -= 2) {
        var digit = s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
        if (digit < 0 || digit > 9) {
          throw new FormatException_default();
        }
        sum += digit;
      }
      sum *= 3;
      for (var i = length - 2; i >= 0; i -= 2) {
        var digit = s.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
        if (digit < 0 || digit > 9) {
          throw new FormatException_default();
        }
        sum += digit;
      }
      return (1e3 - sum) % 10;
    };
    UPCEANReader2.decodeEnd = function(row, endStart) {
      return UPCEANReader2.findGuardPattern(row, endStart, false, UPCEANReader2.START_END_PATTERN, new Int32Array(UPCEANReader2.START_END_PATTERN.length).fill(0));
    };
    return UPCEANReader2;
  }(AbstractUPCEANReader_default)
);
var UPCEANReader_default = UPCEANReader;

// node_modules/@zxing/library/esm/core/oned/EAN13Reader.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values9 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var EAN13Reader = (
  /** @class */
  function(_super) {
    __extends28(EAN13Reader2, _super);
    function EAN13Reader2() {
      var _this = _super.call(this) || this;
      _this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
      return _this;
    }
    EAN13Reader2.prototype.decodeMiddle = function(row, startRange, resultString) {
      var e_1, _a2, e_2, _b;
      var counters = this.decodeMiddleCounters;
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var end = row.getSize();
      var rowOffset = startRange[1];
      var lgPatternFound = 0;
      for (var x = 0; x < 6 && rowOffset < end; x++) {
        var bestMatch = UPCEANReader_default.decodeDigit(row, counters, rowOffset, UPCEANReader_default.L_AND_G_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch % 10);
        try {
          for (var counters_1 = (e_1 = void 0, __values9(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            rowOffset += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        if (bestMatch >= 10) {
          lgPatternFound |= 1 << 5 - x;
        }
      }
      resultString = EAN13Reader2.determineFirstDigit(resultString, lgPatternFound);
      var middleRange = UPCEANReader_default.findGuardPattern(row, rowOffset, true, UPCEANReader_default.MIDDLE_PATTERN, new Int32Array(UPCEANReader_default.MIDDLE_PATTERN.length).fill(0));
      rowOffset = middleRange[1];
      for (var x = 0; x < 6 && rowOffset < end; x++) {
        var bestMatch = UPCEANReader_default.decodeDigit(row, counters, rowOffset, UPCEANReader_default.L_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch);
        try {
          for (var counters_2 = (e_2 = void 0, __values9(counters)), counters_2_1 = counters_2.next(); !counters_2_1.done; counters_2_1 = counters_2.next()) {
            var counter = counters_2_1.value;
            rowOffset += counter;
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (counters_2_1 && !counters_2_1.done && (_b = counters_2.return)) _b.call(counters_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      return { rowOffset, resultString };
    };
    EAN13Reader2.prototype.getBarcodeFormat = function() {
      return BarcodeFormat_default.EAN_13;
    };
    EAN13Reader2.determineFirstDigit = function(resultString, lgPatternFound) {
      for (var d = 0; d < 10; d++) {
        if (lgPatternFound === this.FIRST_DIGIT_ENCODINGS[d]) {
          resultString = String.fromCharCode("0".charCodeAt(0) + d) + resultString;
          return resultString;
        }
      }
      throw new NotFoundException_default();
    };
    EAN13Reader2.FIRST_DIGIT_ENCODINGS = [0, 11, 13, 14, 19, 25, 28, 21, 22, 26];
    return EAN13Reader2;
  }(UPCEANReader_default)
);
var EAN13Reader_default = EAN13Reader;

// node_modules/@zxing/library/esm/core/oned/EAN8Reader.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values10 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var EAN8Reader = (
  /** @class */
  function(_super) {
    __extends29(EAN8Reader2, _super);
    function EAN8Reader2() {
      var _this = _super.call(this) || this;
      _this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
      return _this;
    }
    EAN8Reader2.prototype.decodeMiddle = function(row, startRange, resultString) {
      var e_1, _a2, e_2, _b;
      var counters = this.decodeMiddleCounters;
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var end = row.getSize();
      var rowOffset = startRange[1];
      for (var x = 0; x < 4 && rowOffset < end; x++) {
        var bestMatch = UPCEANReader_default.decodeDigit(row, counters, rowOffset, UPCEANReader_default.L_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch);
        try {
          for (var counters_1 = (e_1 = void 0, __values10(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            rowOffset += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      var middleRange = UPCEANReader_default.findGuardPattern(row, rowOffset, true, UPCEANReader_default.MIDDLE_PATTERN, new Int32Array(UPCEANReader_default.MIDDLE_PATTERN.length).fill(0));
      rowOffset = middleRange[1];
      for (var x = 0; x < 4 && rowOffset < end; x++) {
        var bestMatch = UPCEANReader_default.decodeDigit(row, counters, rowOffset, UPCEANReader_default.L_PATTERNS);
        resultString += String.fromCharCode("0".charCodeAt(0) + bestMatch);
        try {
          for (var counters_2 = (e_2 = void 0, __values10(counters)), counters_2_1 = counters_2.next(); !counters_2_1.done; counters_2_1 = counters_2.next()) {
            var counter = counters_2_1.value;
            rowOffset += counter;
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (counters_2_1 && !counters_2_1.done && (_b = counters_2.return)) _b.call(counters_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      return { rowOffset, resultString };
    };
    EAN8Reader2.prototype.getBarcodeFormat = function() {
      return BarcodeFormat_default.EAN_8;
    };
    return EAN8Reader2;
  }(UPCEANReader_default)
);
var EAN8Reader_default = EAN8Reader;

// node_modules/@zxing/library/esm/core/oned/UPCAReader.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UPCAReader = (
  /** @class */
  function(_super) {
    __extends30(UPCAReader2, _super);
    function UPCAReader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.ean13Reader = new EAN13Reader_default();
      return _this;
    }
    UPCAReader2.prototype.getBarcodeFormat = function() {
      return BarcodeFormat_default.UPC_A;
    };
    UPCAReader2.prototype.decode = function(image, hints) {
      return this.maybeReturnResult(this.ean13Reader.decode(image));
    };
    UPCAReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      return this.maybeReturnResult(this.ean13Reader.decodeRow(rowNumber, row, hints));
    };
    UPCAReader2.prototype.decodeMiddle = function(row, startRange, resultString) {
      return this.ean13Reader.decodeMiddle(row, startRange, resultString);
    };
    UPCAReader2.prototype.maybeReturnResult = function(result) {
      var text = result.getText();
      if (text.charAt(0) === "0") {
        var upcaResult = new Result_default(text.substring(1), null, null, result.getResultPoints(), BarcodeFormat_default.UPC_A);
        if (result.getResultMetadata() != null) {
          upcaResult.putAllMetadata(result.getResultMetadata());
        }
        return upcaResult;
      } else {
        throw new NotFoundException_default();
      }
    };
    UPCAReader2.prototype.reset = function() {
      this.ean13Reader.reset();
    };
    return UPCAReader2;
  }(UPCEANReader_default)
);
var UPCAReader_default = UPCAReader;

// node_modules/@zxing/library/esm/core/oned/UPCEReader.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values11 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var UPCEReader = (
  /** @class */
  function(_super) {
    __extends31(UPCEReader2, _super);
    function UPCEReader2() {
      var _this = _super.call(this) || this;
      _this.decodeMiddleCounters = new Int32Array(4);
      return _this;
    }
    UPCEReader2.prototype.decodeMiddle = function(row, startRange, result) {
      var e_1, _a2;
      var counters = this.decodeMiddleCounters.map(function(x2) {
        return x2;
      });
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var end = row.getSize();
      var rowOffset = startRange[1];
      var lgPatternFound = 0;
      for (var x = 0; x < 6 && rowOffset < end; x++) {
        var bestMatch = UPCEReader2.decodeDigit(row, counters, rowOffset, UPCEReader2.L_AND_G_PATTERNS);
        result += String.fromCharCode("0".charCodeAt(0) + bestMatch % 10);
        try {
          for (var counters_1 = (e_1 = void 0, __values11(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            rowOffset += counter;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        if (bestMatch >= 10) {
          lgPatternFound |= 1 << 5 - x;
        }
      }
      UPCEReader2.determineNumSysAndCheckDigit(new StringBuilder_default(result), lgPatternFound);
      return rowOffset;
    };
    UPCEReader2.prototype.decodeEnd = function(row, endStart) {
      return UPCEReader2.findGuardPatternWithoutCounters(row, endStart, true, UPCEReader2.MIDDLE_END_PATTERN);
    };
    UPCEReader2.prototype.checkChecksum = function(s) {
      return UPCEANReader_default.checkChecksum(UPCEReader2.convertUPCEtoUPCA(s));
    };
    UPCEReader2.determineNumSysAndCheckDigit = function(resultString, lgPatternFound) {
      for (var numSys = 0; numSys <= 1; numSys++) {
        for (var d = 0; d < 10; d++) {
          if (lgPatternFound === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[numSys][d]) {
            resultString.insert(
              0,
              /*(char)*/
              "0" + numSys
            );
            resultString.append(
              /*(char)*/
              "0" + d
            );
            return;
          }
        }
      }
      throw NotFoundException_default.getNotFoundInstance();
    };
    UPCEReader2.prototype.getBarcodeFormat = function() {
      return BarcodeFormat_default.UPC_E;
    };
    UPCEReader2.convertUPCEtoUPCA = function(upce) {
      var upceChars = upce.slice(1, 7).split("").map(function(x) {
        return x.charCodeAt(0);
      });
      var result = new StringBuilder_default(
        /*12*/
      );
      result.append(upce.charAt(0));
      var lastChar = upceChars[5];
      switch (lastChar) {
        case 0:
        case 1:
        case 2:
          result.appendChars(upceChars, 0, 2);
          result.append(lastChar);
          result.append("0000");
          result.appendChars(upceChars, 2, 3);
          break;
        case 3:
          result.appendChars(upceChars, 0, 3);
          result.append("00000");
          result.appendChars(upceChars, 3, 2);
          break;
        case 4:
          result.appendChars(upceChars, 0, 4);
          result.append("00000");
          result.append(upceChars[4]);
          break;
        default:
          result.appendChars(upceChars, 0, 5);
          result.append("0000");
          result.append(lastChar);
          break;
      }
      if (upce.length >= 8) {
        result.append(upce.charAt(7));
      }
      return result.toString();
    };
    UPCEReader2.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);
    UPCEReader2.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [
      Int32Array.from([56, 52, 50, 49, 44, 38, 35, 42, 41, 37]),
      Int32Array.from([7, 11, 13, 14, 19, 25, 28, 21, 22, 1])
    ];
    return UPCEReader2;
  }(UPCEANReader_default)
);
var UPCEReader_default = UPCEReader;

// node_modules/@zxing/library/esm/core/oned/MultiFormatUPCEANReader.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values12 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MultiFormatUPCEANReader = (
  /** @class */
  function(_super) {
    __extends32(MultiFormatUPCEANReader2, _super);
    function MultiFormatUPCEANReader2(hints) {
      var _this = _super.call(this) || this;
      var possibleFormats = hints == null ? null : hints.get(DecodeHintType_default.POSSIBLE_FORMATS);
      var readers = [];
      if (possibleFormats != null) {
        if (possibleFormats.indexOf(BarcodeFormat_default.EAN_13) > -1) {
          readers.push(new EAN13Reader_default());
        }
        if (possibleFormats.indexOf(BarcodeFormat_default.UPC_A) > -1) {
          readers.push(new UPCAReader_default());
        }
        if (possibleFormats.indexOf(BarcodeFormat_default.EAN_8) > -1) {
          readers.push(new EAN8Reader_default());
        }
        if (possibleFormats.indexOf(BarcodeFormat_default.UPC_E) > -1) {
          readers.push(new UPCEReader_default());
        }
      }
      if (readers.length === 0) {
        readers.push(new EAN13Reader_default());
        readers.push(new UPCAReader_default());
        readers.push(new EAN8Reader_default());
        readers.push(new UPCEReader_default());
      }
      _this.readers = readers;
      return _this;
    }
    MultiFormatUPCEANReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var e_1, _a2;
      try {
        for (var _b = __values12(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {
          var reader = _c.value;
          try {
            var result = reader.decodeRow(rowNumber, row, hints);
            var ean13MayBeUPCA = result.getBarcodeFormat() === BarcodeFormat_default.EAN_13 && result.getText().charAt(0) === "0";
            var possibleFormats = hints == null ? null : hints.get(DecodeHintType_default.POSSIBLE_FORMATS);
            var canReturnUPCA = possibleFormats == null || possibleFormats.includes(BarcodeFormat_default.UPC_A);
            if (ean13MayBeUPCA && canReturnUPCA) {
              var rawBytes = result.getRawBytes();
              var resultUPCA = new Result_default(result.getText().substring(1), rawBytes, rawBytes ? rawBytes.length : null, result.getResultPoints(), BarcodeFormat_default.UPC_A);
              resultUPCA.putAllMetadata(result.getResultMetadata());
              return resultUPCA;
            }
            return result;
          } catch (err) {
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      throw new NotFoundException_default();
    };
    MultiFormatUPCEANReader2.prototype.reset = function() {
      var e_2, _a2;
      try {
        for (var _b = __values12(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {
          var reader = _c.value;
          reader.reset();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    };
    return MultiFormatUPCEANReader2;
  }(OneDReader_default)
);
var MultiFormatUPCEANReader_default = MultiFormatUPCEANReader;

// node_modules/@zxing/library/esm/core/oned/CodaBarReader.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CodaBarReader = (
  /** @class */
  function(_super) {
    __extends33(CodaBarReader2, _super);
    function CodaBarReader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.CODA_BAR_CHAR_SET = {
        nnnnnww: "0",
        nnnnwwn: "1",
        nnnwnnw: "2",
        wwnnnnn: "3",
        nnwnnwn: "4",
        wnnnnwn: "5",
        nwnnnnw: "6",
        nwnnwnn: "7",
        nwwnnnn: "8",
        wnnwnnn: "9",
        nnnwwnn: "-",
        nnwwnnn: "$",
        wnnnwnw: ":",
        wnwnnnw: "/",
        wnwnwnn: ".",
        nnwwwww: "+",
        nnwwnwn: "A",
        nwnwnnw: "B",
        nnnwnww: "C",
        nnnwwwn: "D"
      };
      return _this;
    }
    CodaBarReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var validRowData = this.getValidRowData(row);
      if (!validRowData)
        throw new NotFoundException_default();
      var retStr = this.codaBarDecodeRow(validRowData.row);
      if (!retStr)
        throw new NotFoundException_default();
      return new Result_default(retStr, null, 0, [new ResultPoint_default(validRowData.left, rowNumber), new ResultPoint_default(validRowData.right, rowNumber)], BarcodeFormat_default.CODABAR, (/* @__PURE__ */ new Date()).getTime());
    };
    CodaBarReader2.prototype.getValidRowData = function(row) {
      var booleanArr = row.toArray();
      var startIndex = booleanArr.indexOf(true);
      if (startIndex === -1)
        return null;
      var lastIndex = booleanArr.lastIndexOf(true);
      if (lastIndex <= startIndex)
        return null;
      booleanArr = booleanArr.slice(startIndex, lastIndex + 1);
      var result = [];
      var lastBit = booleanArr[0];
      var bitLength = 1;
      for (var i = 1; i < booleanArr.length; i++) {
        if (booleanArr[i] === lastBit) {
          bitLength++;
        } else {
          lastBit = booleanArr[i];
          result.push(bitLength);
          bitLength = 1;
        }
      }
      result.push(bitLength);
      if (result.length < 23 && (result.length + 1) % 8 !== 0)
        return null;
      return { row: result, left: startIndex, right: lastIndex };
    };
    CodaBarReader2.prototype.codaBarDecodeRow = function(row) {
      var code = [];
      var barThreshold = Math.ceil(row.reduce(function(pre, item) {
        return (pre + item) / 2;
      }, 0));
      while (row.length > 0) {
        var seg = row.splice(0, 8).splice(0, 7);
        var key = seg.map(function(len) {
          return len < barThreshold ? "n" : "w";
        }).join("");
        if (this.CODA_BAR_CHAR_SET[key] === void 0)
          return null;
        code.push(this.CODA_BAR_CHAR_SET[key]);
      }
      var strCode = code.join("");
      if (this.validCodaBarString(strCode))
        return strCode;
      return null;
    };
    CodaBarReader2.prototype.validCodaBarString = function(src) {
      var reg = /^[A-D].{1,}[A-D]$/;
      return reg.test(src);
    };
    return CodaBarReader2;
  }(OneDReader_default)
);
var CodaBarReader_default = CodaBarReader;

// node_modules/@zxing/library/esm/core/oned/rss/AbstractRSSReader.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values13 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var AbstractRSSReader = (
  /** @class */
  function(_super) {
    __extends34(AbstractRSSReader2, _super);
    function AbstractRSSReader2() {
      var _this = _super.call(this) || this;
      _this.decodeFinderCounters = new Int32Array(4);
      _this.dataCharacterCounters = new Int32Array(8);
      _this.oddRoundingErrors = new Array(4);
      _this.evenRoundingErrors = new Array(4);
      _this.oddCounts = new Array(_this.dataCharacterCounters.length / 2);
      _this.evenCounts = new Array(_this.dataCharacterCounters.length / 2);
      return _this;
    }
    AbstractRSSReader2.prototype.getDecodeFinderCounters = function() {
      return this.decodeFinderCounters;
    };
    AbstractRSSReader2.prototype.getDataCharacterCounters = function() {
      return this.dataCharacterCounters;
    };
    AbstractRSSReader2.prototype.getOddRoundingErrors = function() {
      return this.oddRoundingErrors;
    };
    AbstractRSSReader2.prototype.getEvenRoundingErrors = function() {
      return this.evenRoundingErrors;
    };
    AbstractRSSReader2.prototype.getOddCounts = function() {
      return this.oddCounts;
    };
    AbstractRSSReader2.prototype.getEvenCounts = function() {
      return this.evenCounts;
    };
    AbstractRSSReader2.prototype.parseFinderValue = function(counters, finderPatterns) {
      for (var value = 0; value < finderPatterns.length; value++) {
        if (OneDReader_default.patternMatchVariance(counters, finderPatterns[value], AbstractRSSReader2.MAX_INDIVIDUAL_VARIANCE) < AbstractRSSReader2.MAX_AVG_VARIANCE) {
          return value;
        }
      }
      throw new NotFoundException_default();
    };
    AbstractRSSReader2.count = function(array) {
      return MathUtils_default.sum(new Int32Array(array));
    };
    AbstractRSSReader2.increment = function(array, errors) {
      var index = 0;
      var biggestError = errors[0];
      for (var i = 1; i < array.length; i++) {
        if (errors[i] > biggestError) {
          biggestError = errors[i];
          index = i;
        }
      }
      array[index]++;
    };
    AbstractRSSReader2.decrement = function(array, errors) {
      var index = 0;
      var biggestError = errors[0];
      for (var i = 1; i < array.length; i++) {
        if (errors[i] < biggestError) {
          biggestError = errors[i];
          index = i;
        }
      }
      array[index]--;
    };
    AbstractRSSReader2.isFinderPattern = function(counters) {
      var e_1, _a2;
      var firstTwoSum = counters[0] + counters[1];
      var sum = firstTwoSum + counters[2] + counters[3];
      var ratio = firstTwoSum / sum;
      if (ratio >= AbstractRSSReader2.MIN_FINDER_PATTERN_RATIO && ratio <= AbstractRSSReader2.MAX_FINDER_PATTERN_RATIO) {
        var minCounter = Number.MAX_SAFE_INTEGER;
        var maxCounter = Number.MIN_SAFE_INTEGER;
        try {
          for (var counters_1 = __values13(counters), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {
            var counter = counters_1_1.value;
            if (counter > maxCounter) {
              maxCounter = counter;
            }
            if (counter < minCounter) {
              minCounter = counter;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (counters_1_1 && !counters_1_1.done && (_a2 = counters_1.return)) _a2.call(counters_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return maxCounter < 10 * minCounter;
      }
      return false;
    };
    AbstractRSSReader2.MAX_AVG_VARIANCE = 0.2;
    AbstractRSSReader2.MAX_INDIVIDUAL_VARIANCE = 0.45;
    AbstractRSSReader2.MIN_FINDER_PATTERN_RATIO = 9.5 / 12;
    AbstractRSSReader2.MAX_FINDER_PATTERN_RATIO = 12.5 / 14;
    return AbstractRSSReader2;
  }(OneDReader_default)
);
var AbstractRSSReader_default = AbstractRSSReader;

// node_modules/@zxing/library/esm/core/oned/rss/DataCharacter.js
var DataCharacter = (
  /** @class */
  function() {
    function DataCharacter2(value, checksumPortion) {
      this.value = value;
      this.checksumPortion = checksumPortion;
    }
    DataCharacter2.prototype.getValue = function() {
      return this.value;
    };
    DataCharacter2.prototype.getChecksumPortion = function() {
      return this.checksumPortion;
    };
    DataCharacter2.prototype.toString = function() {
      return this.value + "(" + this.checksumPortion + ")";
    };
    DataCharacter2.prototype.equals = function(o) {
      if (!(o instanceof DataCharacter2)) {
        return false;
      }
      var that = o;
      return this.value === that.value && this.checksumPortion === that.checksumPortion;
    };
    DataCharacter2.prototype.hashCode = function() {
      return this.value ^ this.checksumPortion;
    };
    return DataCharacter2;
  }()
);
var DataCharacter_default = DataCharacter;

// node_modules/@zxing/library/esm/core/oned/rss/FinderPattern.js
var FinderPattern = (
  /** @class */
  function() {
    function FinderPattern3(value, startEnd, start, end, rowNumber) {
      this.value = value;
      this.startEnd = startEnd;
      this.value = value;
      this.startEnd = startEnd;
      this.resultPoints = new Array();
      this.resultPoints.push(new ResultPoint_default(start, rowNumber));
      this.resultPoints.push(new ResultPoint_default(end, rowNumber));
    }
    FinderPattern3.prototype.getValue = function() {
      return this.value;
    };
    FinderPattern3.prototype.getStartEnd = function() {
      return this.startEnd;
    };
    FinderPattern3.prototype.getResultPoints = function() {
      return this.resultPoints;
    };
    FinderPattern3.prototype.equals = function(o) {
      if (!(o instanceof FinderPattern3)) {
        return false;
      }
      var that = o;
      return this.value === that.value;
    };
    FinderPattern3.prototype.hashCode = function() {
      return this.value;
    };
    return FinderPattern3;
  }()
);
var FinderPattern_default = FinderPattern;

// node_modules/@zxing/library/esm/core/oned/rss/RSSUtils.js
var __values14 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var RSSUtils = (
  /** @class */
  function() {
    function RSSUtils2() {
    }
    RSSUtils2.getRSSvalue = function(widths, maxWidth, noNarrow) {
      var e_1, _a2;
      var n = 0;
      try {
        for (var widths_1 = __values14(widths), widths_1_1 = widths_1.next(); !widths_1_1.done; widths_1_1 = widths_1.next()) {
          var width = widths_1_1.value;
          n += width;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (widths_1_1 && !widths_1_1.done && (_a2 = widths_1.return)) _a2.call(widths_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var val = 0;
      var narrowMask = 0;
      var elements = widths.length;
      for (var bar = 0; bar < elements - 1; bar++) {
        var elmWidth = void 0;
        for (elmWidth = 1, narrowMask |= 1 << bar; elmWidth < widths[bar]; elmWidth++, narrowMask &= ~(1 << bar)) {
          var subVal = RSSUtils2.combins(n - elmWidth - 1, elements - bar - 2);
          if (noNarrow && narrowMask === 0 && n - elmWidth - (elements - bar - 1) >= elements - bar - 1) {
            subVal -= RSSUtils2.combins(n - elmWidth - (elements - bar), elements - bar - 2);
          }
          if (elements - bar - 1 > 1) {
            var lessVal = 0;
            for (var mxwElement = n - elmWidth - (elements - bar - 2); mxwElement > maxWidth; mxwElement--) {
              lessVal += RSSUtils2.combins(n - elmWidth - mxwElement - 1, elements - bar - 3);
            }
            subVal -= lessVal * (elements - 1 - bar);
          } else if (n - elmWidth > maxWidth) {
            subVal--;
          }
          val += subVal;
        }
        n -= elmWidth;
      }
      return val;
    };
    RSSUtils2.combins = function(n, r) {
      var maxDenom;
      var minDenom;
      if (n - r > r) {
        minDenom = r;
        maxDenom = n - r;
      } else {
        minDenom = n - r;
        maxDenom = r;
      }
      var val = 1;
      var j = 1;
      for (var i = n; i > maxDenom; i--) {
        val *= i;
        if (j <= minDenom) {
          val /= j;
          j++;
        }
      }
      while (j <= minDenom) {
        val /= j;
        j++;
      }
      return val;
    };
    return RSSUtils2;
  }()
);
var RSSUtils_default = RSSUtils;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/BitArrayBuilder.js
var BitArrayBuilder = (
  /** @class */
  function() {
    function BitArrayBuilder2() {
    }
    BitArrayBuilder2.buildBitArray = function(pairs) {
      var charNumber = pairs.length * 2 - 1;
      if (pairs[pairs.length - 1].getRightChar() == null) {
        charNumber -= 1;
      }
      var size = 12 * charNumber;
      var binary = new BitArray_default(size);
      var accPos = 0;
      var firstPair = pairs[0];
      var firstValue = firstPair.getRightChar().getValue();
      for (var i = 11; i >= 0; --i) {
        if ((firstValue & 1 << i) !== 0) {
          binary.set(accPos);
        }
        accPos++;
      }
      for (var i = 1; i < pairs.length; ++i) {
        var currentPair = pairs[i];
        var leftValue = currentPair.getLeftChar().getValue();
        for (var j = 11; j >= 0; --j) {
          if ((leftValue & 1 << j) !== 0) {
            binary.set(accPos);
          }
          accPos++;
        }
        if (currentPair.getRightChar() !== null) {
          var rightValue = currentPair.getRightChar().getValue();
          for (var j = 11; j >= 0; --j) {
            if ((rightValue & 1 << j) !== 0) {
              binary.set(accPos);
            }
            accPos++;
          }
        }
      }
      return binary;
    };
    return BitArrayBuilder2;
  }()
);
var BitArrayBuilder_default = BitArrayBuilder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/BlockParsedResult.js
var BlockParsedResult = (
  /** @class */
  function() {
    function BlockParsedResult2(finished, decodedInformation) {
      if (decodedInformation) {
        this.decodedInformation = null;
      } else {
        this.finished = finished;
        this.decodedInformation = decodedInformation;
      }
    }
    BlockParsedResult2.prototype.getDecodedInformation = function() {
      return this.decodedInformation;
    };
    BlockParsedResult2.prototype.isFinished = function() {
      return this.finished;
    };
    return BlockParsedResult2;
  }()
);
var BlockParsedResult_default = BlockParsedResult;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/DecodedObject.js
var DecodedObject = (
  /** @class */
  function() {
    function DecodedObject2(newPosition) {
      this.newPosition = newPosition;
    }
    DecodedObject2.prototype.getNewPosition = function() {
      return this.newPosition;
    };
    return DecodedObject2;
  }()
);
var DecodedObject_default = DecodedObject;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/DecodedChar.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DecodedChar = (
  /** @class */
  function(_super) {
    __extends35(DecodedChar2, _super);
    function DecodedChar2(newPosition, value) {
      var _this = _super.call(this, newPosition) || this;
      _this.value = value;
      return _this;
    }
    DecodedChar2.prototype.getValue = function() {
      return this.value;
    };
    DecodedChar2.prototype.isFNC1 = function() {
      return this.value === DecodedChar2.FNC1;
    };
    DecodedChar2.FNC1 = "$";
    return DecodedChar2;
  }(DecodedObject_default)
);
var DecodedChar_default = DecodedChar;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/DecodedInformation.js
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DecodedInformation = (
  /** @class */
  function(_super) {
    __extends36(DecodedInformation2, _super);
    function DecodedInformation2(newPosition, newString, remainingValue) {
      var _this = _super.call(this, newPosition) || this;
      if (remainingValue) {
        _this.remaining = true;
        _this.remainingValue = _this.remainingValue;
      } else {
        _this.remaining = false;
        _this.remainingValue = 0;
      }
      _this.newString = newString;
      return _this;
    }
    DecodedInformation2.prototype.getNewString = function() {
      return this.newString;
    };
    DecodedInformation2.prototype.isRemaining = function() {
      return this.remaining;
    };
    DecodedInformation2.prototype.getRemainingValue = function() {
      return this.remainingValue;
    };
    return DecodedInformation2;
  }(DecodedObject_default)
);
var DecodedInformation_default = DecodedInformation;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/DecodedNumeric.js
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DecodedNumeric = (
  /** @class */
  function(_super) {
    __extends37(DecodedNumeric2, _super);
    function DecodedNumeric2(newPosition, firstDigit, secondDigit) {
      var _this = _super.call(this, newPosition) || this;
      if (firstDigit < 0 || firstDigit > 10 || secondDigit < 0 || secondDigit > 10) {
        throw new FormatException_default();
      }
      _this.firstDigit = firstDigit;
      _this.secondDigit = secondDigit;
      return _this;
    }
    DecodedNumeric2.prototype.getFirstDigit = function() {
      return this.firstDigit;
    };
    DecodedNumeric2.prototype.getSecondDigit = function() {
      return this.secondDigit;
    };
    DecodedNumeric2.prototype.getValue = function() {
      return this.firstDigit * 10 + this.secondDigit;
    };
    DecodedNumeric2.prototype.isFirstDigitFNC1 = function() {
      return this.firstDigit === DecodedNumeric2.FNC1;
    };
    DecodedNumeric2.prototype.isSecondDigitFNC1 = function() {
      return this.secondDigit === DecodedNumeric2.FNC1;
    };
    DecodedNumeric2.prototype.isAnyFNC1 = function() {
      return this.firstDigit === DecodedNumeric2.FNC1 || this.secondDigit === DecodedNumeric2.FNC1;
    };
    DecodedNumeric2.FNC1 = 10;
    return DecodedNumeric2;
  }(DecodedObject_default)
);
var DecodedNumeric_default = DecodedNumeric;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/FieldParser.js
var __values15 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var FieldParser = (
  /** @class */
  function() {
    function FieldParser2() {
    }
    FieldParser2.parseFieldsInGeneralPurpose = function(rawInformation) {
      var e_1, _a2, e_2, _b, e_3, _c, e_4, _d;
      if (!rawInformation) {
        return null;
      }
      if (rawInformation.length < 2) {
        throw new NotFoundException_default();
      }
      var firstTwoDigits = rawInformation.substring(0, 2);
      try {
        for (var _e = __values15(FieldParser2.TWO_DIGIT_DATA_LENGTH), _f = _e.next(); !_f.done; _f = _e.next()) {
          var dataLength = _f.value;
          if (dataLength[0] === firstTwoDigits) {
            if (dataLength[1] === FieldParser2.VARIABLE_LENGTH) {
              return FieldParser2.processVariableAI(2, dataLength[2], rawInformation);
            }
            return FieldParser2.processFixedAI(2, dataLength[1], rawInformation);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_f && !_f.done && (_a2 = _e.return)) _a2.call(_e);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (rawInformation.length < 3) {
        throw new NotFoundException_default();
      }
      var firstThreeDigits = rawInformation.substring(0, 3);
      try {
        for (var _g = __values15(FieldParser2.THREE_DIGIT_DATA_LENGTH), _h = _g.next(); !_h.done; _h = _g.next()) {
          var dataLength = _h.value;
          if (dataLength[0] === firstThreeDigits) {
            if (dataLength[1] === FieldParser2.VARIABLE_LENGTH) {
              return FieldParser2.processVariableAI(3, dataLength[2], rawInformation);
            }
            return FieldParser2.processFixedAI(3, dataLength[1], rawInformation);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      try {
        for (var _j = __values15(FieldParser2.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), _k = _j.next(); !_k.done; _k = _j.next()) {
          var dataLength = _k.value;
          if (dataLength[0] === firstThreeDigits) {
            if (dataLength[1] === FieldParser2.VARIABLE_LENGTH) {
              return FieldParser2.processVariableAI(4, dataLength[2], rawInformation);
            }
            return FieldParser2.processFixedAI(4, dataLength[1], rawInformation);
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      if (rawInformation.length < 4) {
        throw new NotFoundException_default();
      }
      var firstFourDigits = rawInformation.substring(0, 4);
      try {
        for (var _l = __values15(FieldParser2.FOUR_DIGIT_DATA_LENGTH), _m = _l.next(); !_m.done; _m = _l.next()) {
          var dataLength = _m.value;
          if (dataLength[0] === firstFourDigits) {
            if (dataLength[1] === FieldParser2.VARIABLE_LENGTH) {
              return FieldParser2.processVariableAI(4, dataLength[2], rawInformation);
            }
            return FieldParser2.processFixedAI(4, dataLength[1], rawInformation);
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
        } finally {
          if (e_4) throw e_4.error;
        }
      }
      throw new NotFoundException_default();
    };
    FieldParser2.processFixedAI = function(aiSize, fieldSize, rawInformation) {
      if (rawInformation.length < aiSize) {
        throw new NotFoundException_default();
      }
      var ai = rawInformation.substring(0, aiSize);
      if (rawInformation.length < aiSize + fieldSize) {
        throw new NotFoundException_default();
      }
      var field = rawInformation.substring(aiSize, aiSize + fieldSize);
      var remaining = rawInformation.substring(aiSize + fieldSize);
      var result = "(" + ai + ")" + field;
      var parsedAI = FieldParser2.parseFieldsInGeneralPurpose(remaining);
      return parsedAI == null ? result : result + parsedAI;
    };
    FieldParser2.processVariableAI = function(aiSize, variableFieldSize, rawInformation) {
      var ai = rawInformation.substring(0, aiSize);
      var maxSize;
      if (rawInformation.length < aiSize + variableFieldSize) {
        maxSize = rawInformation.length;
      } else {
        maxSize = aiSize + variableFieldSize;
      }
      var field = rawInformation.substring(aiSize, maxSize);
      var remaining = rawInformation.substring(maxSize);
      var result = "(" + ai + ")" + field;
      var parsedAI = FieldParser2.parseFieldsInGeneralPurpose(remaining);
      return parsedAI == null ? result : result + parsedAI;
    };
    FieldParser2.VARIABLE_LENGTH = [];
    FieldParser2.TWO_DIGIT_DATA_LENGTH = [
      ["00", 18],
      ["01", 14],
      ["02", 14],
      ["10", FieldParser2.VARIABLE_LENGTH, 20],
      ["11", 6],
      ["12", 6],
      ["13", 6],
      ["15", 6],
      ["17", 6],
      ["20", 2],
      ["21", FieldParser2.VARIABLE_LENGTH, 20],
      ["22", FieldParser2.VARIABLE_LENGTH, 29],
      ["30", FieldParser2.VARIABLE_LENGTH, 8],
      ["37", FieldParser2.VARIABLE_LENGTH, 8],
      // internal company codes
      ["90", FieldParser2.VARIABLE_LENGTH, 30],
      ["91", FieldParser2.VARIABLE_LENGTH, 30],
      ["92", FieldParser2.VARIABLE_LENGTH, 30],
      ["93", FieldParser2.VARIABLE_LENGTH, 30],
      ["94", FieldParser2.VARIABLE_LENGTH, 30],
      ["95", FieldParser2.VARIABLE_LENGTH, 30],
      ["96", FieldParser2.VARIABLE_LENGTH, 30],
      ["97", FieldParser2.VARIABLE_LENGTH, 3],
      ["98", FieldParser2.VARIABLE_LENGTH, 30],
      ["99", FieldParser2.VARIABLE_LENGTH, 30]
    ];
    FieldParser2.THREE_DIGIT_DATA_LENGTH = [
      // Same format as above
      ["240", FieldParser2.VARIABLE_LENGTH, 30],
      ["241", FieldParser2.VARIABLE_LENGTH, 30],
      ["242", FieldParser2.VARIABLE_LENGTH, 6],
      ["250", FieldParser2.VARIABLE_LENGTH, 30],
      ["251", FieldParser2.VARIABLE_LENGTH, 30],
      ["253", FieldParser2.VARIABLE_LENGTH, 17],
      ["254", FieldParser2.VARIABLE_LENGTH, 20],
      ["400", FieldParser2.VARIABLE_LENGTH, 30],
      ["401", FieldParser2.VARIABLE_LENGTH, 30],
      ["402", 17],
      ["403", FieldParser2.VARIABLE_LENGTH, 30],
      ["410", 13],
      ["411", 13],
      ["412", 13],
      ["413", 13],
      ["414", 13],
      ["420", FieldParser2.VARIABLE_LENGTH, 20],
      ["421", FieldParser2.VARIABLE_LENGTH, 15],
      ["422", 3],
      ["423", FieldParser2.VARIABLE_LENGTH, 15],
      ["424", 3],
      ["425", 3],
      ["426", 3]
    ];
    FieldParser2.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [
      // Same format as above
      ["310", 6],
      ["311", 6],
      ["312", 6],
      ["313", 6],
      ["314", 6],
      ["315", 6],
      ["316", 6],
      ["320", 6],
      ["321", 6],
      ["322", 6],
      ["323", 6],
      ["324", 6],
      ["325", 6],
      ["326", 6],
      ["327", 6],
      ["328", 6],
      ["329", 6],
      ["330", 6],
      ["331", 6],
      ["332", 6],
      ["333", 6],
      ["334", 6],
      ["335", 6],
      ["336", 6],
      ["340", 6],
      ["341", 6],
      ["342", 6],
      ["343", 6],
      ["344", 6],
      ["345", 6],
      ["346", 6],
      ["347", 6],
      ["348", 6],
      ["349", 6],
      ["350", 6],
      ["351", 6],
      ["352", 6],
      ["353", 6],
      ["354", 6],
      ["355", 6],
      ["356", 6],
      ["357", 6],
      ["360", 6],
      ["361", 6],
      ["362", 6],
      ["363", 6],
      ["364", 6],
      ["365", 6],
      ["366", 6],
      ["367", 6],
      ["368", 6],
      ["369", 6],
      ["390", FieldParser2.VARIABLE_LENGTH, 15],
      ["391", FieldParser2.VARIABLE_LENGTH, 18],
      ["392", FieldParser2.VARIABLE_LENGTH, 15],
      ["393", FieldParser2.VARIABLE_LENGTH, 18],
      ["703", FieldParser2.VARIABLE_LENGTH, 30]
    ];
    FieldParser2.FOUR_DIGIT_DATA_LENGTH = [
      // Same format as above
      ["7001", 13],
      ["7002", FieldParser2.VARIABLE_LENGTH, 30],
      ["7003", 10],
      ["8001", 14],
      ["8002", FieldParser2.VARIABLE_LENGTH, 20],
      ["8003", FieldParser2.VARIABLE_LENGTH, 30],
      ["8004", FieldParser2.VARIABLE_LENGTH, 30],
      ["8005", 6],
      ["8006", 18],
      ["8007", FieldParser2.VARIABLE_LENGTH, 30],
      ["8008", FieldParser2.VARIABLE_LENGTH, 12],
      ["8018", 18],
      ["8020", FieldParser2.VARIABLE_LENGTH, 25],
      ["8100", 6],
      ["8101", 10],
      ["8102", 2],
      ["8110", FieldParser2.VARIABLE_LENGTH, 70],
      ["8200", FieldParser2.VARIABLE_LENGTH, 70]
    ];
    return FieldParser2;
  }()
);
var FieldParser_default = FieldParser;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/GeneralAppIdDecoder.js
var GeneralAppIdDecoder = (
  /** @class */
  function() {
    function GeneralAppIdDecoder2(information) {
      this.buffer = new StringBuilder_default();
      this.information = information;
    }
    GeneralAppIdDecoder2.prototype.decodeAllCodes = function(buff, initialPosition) {
      var currentPosition = initialPosition;
      var remaining = null;
      do {
        var info = this.decodeGeneralPurposeField(currentPosition, remaining);
        var parsedFields = FieldParser_default.parseFieldsInGeneralPurpose(info.getNewString());
        if (parsedFields != null) {
          buff.append(parsedFields);
        }
        if (info.isRemaining()) {
          remaining = "" + info.getRemainingValue();
        } else {
          remaining = null;
        }
        if (currentPosition === info.getNewPosition()) {
          break;
        }
        currentPosition = info.getNewPosition();
      } while (true);
      return buff.toString();
    };
    GeneralAppIdDecoder2.prototype.isStillNumeric = function(pos) {
      if (pos + 7 > this.information.getSize()) {
        return pos + 4 <= this.information.getSize();
      }
      for (var i = pos; i < pos + 3; ++i) {
        if (this.information.get(i)) {
          return true;
        }
      }
      return this.information.get(pos + 3);
    };
    GeneralAppIdDecoder2.prototype.decodeNumeric = function(pos) {
      if (pos + 7 > this.information.getSize()) {
        var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);
        if (numeric_1 === 0) {
          return new DecodedNumeric_default(this.information.getSize(), DecodedNumeric_default.FNC1, DecodedNumeric_default.FNC1);
        }
        return new DecodedNumeric_default(this.information.getSize(), numeric_1 - 1, DecodedNumeric_default.FNC1);
      }
      var numeric = this.extractNumericValueFromBitArray(pos, 7);
      var digit1 = (numeric - 8) / 11;
      var digit2 = (numeric - 8) % 11;
      return new DecodedNumeric_default(pos + 7, digit1, digit2);
    };
    GeneralAppIdDecoder2.prototype.extractNumericValueFromBitArray = function(pos, bits) {
      return GeneralAppIdDecoder2.extractNumericValueFromBitArray(this.information, pos, bits);
    };
    GeneralAppIdDecoder2.extractNumericValueFromBitArray = function(information, pos, bits) {
      var value = 0;
      for (var i = 0; i < bits; ++i) {
        if (information.get(pos + i)) {
          value |= 1 << bits - i - 1;
        }
      }
      return value;
    };
    GeneralAppIdDecoder2.prototype.decodeGeneralPurposeField = function(pos, remaining) {
      this.buffer.setLengthToZero();
      if (remaining != null) {
        this.buffer.append(remaining);
      }
      this.current.setPosition(pos);
      var lastDecoded = this.parseBlocks();
      if (lastDecoded != null && lastDecoded.isRemaining()) {
        return new DecodedInformation_default(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());
      }
      return new DecodedInformation_default(this.current.getPosition(), this.buffer.toString());
    };
    GeneralAppIdDecoder2.prototype.parseBlocks = function() {
      var isFinished;
      var result;
      do {
        var initialPosition = this.current.getPosition();
        if (this.current.isAlpha()) {
          result = this.parseAlphaBlock();
          isFinished = result.isFinished();
        } else if (this.current.isIsoIec646()) {
          result = this.parseIsoIec646Block();
          isFinished = result.isFinished();
        } else {
          result = this.parseNumericBlock();
          isFinished = result.isFinished();
        }
        var positionChanged = initialPosition !== this.current.getPosition();
        if (!positionChanged && !isFinished) {
          break;
        }
      } while (!isFinished);
      return result.getDecodedInformation();
    };
    GeneralAppIdDecoder2.prototype.parseNumericBlock = function() {
      while (this.isStillNumeric(this.current.getPosition())) {
        var numeric = this.decodeNumeric(this.current.getPosition());
        this.current.setPosition(numeric.getNewPosition());
        if (numeric.isFirstDigitFNC1()) {
          var information = void 0;
          if (numeric.isSecondDigitFNC1()) {
            information = new DecodedInformation_default(this.current.getPosition(), this.buffer.toString());
          } else {
            information = new DecodedInformation_default(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());
          }
          return new BlockParsedResult_default(true, information);
        }
        this.buffer.append(numeric.getFirstDigit());
        if (numeric.isSecondDigitFNC1()) {
          var information = new DecodedInformation_default(this.current.getPosition(), this.buffer.toString());
          return new BlockParsedResult_default(true, information);
        }
        this.buffer.append(numeric.getSecondDigit());
      }
      if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {
        this.current.setAlpha();
        this.current.incrementPosition(4);
      }
      return new BlockParsedResult_default(false);
    };
    GeneralAppIdDecoder2.prototype.parseIsoIec646Block = function() {
      while (this.isStillIsoIec646(this.current.getPosition())) {
        var iso = this.decodeIsoIec646(this.current.getPosition());
        this.current.setPosition(iso.getNewPosition());
        if (iso.isFNC1()) {
          var information = new DecodedInformation_default(this.current.getPosition(), this.buffer.toString());
          return new BlockParsedResult_default(true, information);
        }
        this.buffer.append(iso.getValue());
      }
      if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {
        this.current.incrementPosition(3);
        this.current.setNumeric();
      } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {
        if (this.current.getPosition() + 5 < this.information.getSize()) {
          this.current.incrementPosition(5);
        } else {
          this.current.setPosition(this.information.getSize());
        }
        this.current.setAlpha();
      }
      return new BlockParsedResult_default(false);
    };
    GeneralAppIdDecoder2.prototype.parseAlphaBlock = function() {
      while (this.isStillAlpha(this.current.getPosition())) {
        var alpha = this.decodeAlphanumeric(this.current.getPosition());
        this.current.setPosition(alpha.getNewPosition());
        if (alpha.isFNC1()) {
          var information = new DecodedInformation_default(this.current.getPosition(), this.buffer.toString());
          return new BlockParsedResult_default(true, information);
        }
        this.buffer.append(alpha.getValue());
      }
      if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {
        this.current.incrementPosition(3);
        this.current.setNumeric();
      } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {
        if (this.current.getPosition() + 5 < this.information.getSize()) {
          this.current.incrementPosition(5);
        } else {
          this.current.setPosition(this.information.getSize());
        }
        this.current.setIsoIec646();
      }
      return new BlockParsedResult_default(false);
    };
    GeneralAppIdDecoder2.prototype.isStillIsoIec646 = function(pos) {
      if (pos + 5 > this.information.getSize()) {
        return false;
      }
      var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);
      if (fiveBitValue >= 5 && fiveBitValue < 16) {
        return true;
      }
      if (pos + 7 > this.information.getSize()) {
        return false;
      }
      var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);
      if (sevenBitValue >= 64 && sevenBitValue < 116) {
        return true;
      }
      if (pos + 8 > this.information.getSize()) {
        return false;
      }
      var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);
      return eightBitValue >= 232 && eightBitValue < 253;
    };
    GeneralAppIdDecoder2.prototype.decodeIsoIec646 = function(pos) {
      var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);
      if (fiveBitValue === 15) {
        return new DecodedChar_default(pos + 5, DecodedChar_default.FNC1);
      }
      if (fiveBitValue >= 5 && fiveBitValue < 15) {
        return new DecodedChar_default(pos + 5, "0" + (fiveBitValue - 5));
      }
      var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);
      if (sevenBitValue >= 64 && sevenBitValue < 90) {
        return new DecodedChar_default(pos + 7, "" + (sevenBitValue + 1));
      }
      if (sevenBitValue >= 90 && sevenBitValue < 116) {
        return new DecodedChar_default(pos + 7, "" + (sevenBitValue + 7));
      }
      var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);
      var c;
      switch (eightBitValue) {
        case 232:
          c = "!";
          break;
        case 233:
          c = '"';
          break;
        case 234:
          c = "%";
          break;
        case 235:
          c = "&";
          break;
        case 236:
          c = "'";
          break;
        case 237:
          c = "(";
          break;
        case 238:
          c = ")";
          break;
        case 239:
          c = "*";
          break;
        case 240:
          c = "+";
          break;
        case 241:
          c = ",";
          break;
        case 242:
          c = "-";
          break;
        case 243:
          c = ".";
          break;
        case 244:
          c = "/";
          break;
        case 245:
          c = ":";
          break;
        case 246:
          c = ";";
          break;
        case 247:
          c = "<";
          break;
        case 248:
          c = "=";
          break;
        case 249:
          c = ">";
          break;
        case 250:
          c = "?";
          break;
        case 251:
          c = "_";
          break;
        case 252:
          c = " ";
          break;
        default:
          throw new FormatException_default();
      }
      return new DecodedChar_default(pos + 8, c);
    };
    GeneralAppIdDecoder2.prototype.isStillAlpha = function(pos) {
      if (pos + 5 > this.information.getSize()) {
        return false;
      }
      var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);
      if (fiveBitValue >= 5 && fiveBitValue < 16) {
        return true;
      }
      if (pos + 6 > this.information.getSize()) {
        return false;
      }
      var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);
      return sixBitValue >= 16 && sixBitValue < 63;
    };
    GeneralAppIdDecoder2.prototype.decodeAlphanumeric = function(pos) {
      var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);
      if (fiveBitValue === 15) {
        return new DecodedChar_default(pos + 5, DecodedChar_default.FNC1);
      }
      if (fiveBitValue >= 5 && fiveBitValue < 15) {
        return new DecodedChar_default(pos + 5, "0" + (fiveBitValue - 5));
      }
      var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);
      if (sixBitValue >= 32 && sixBitValue < 58) {
        return new DecodedChar_default(pos + 6, "" + (sixBitValue + 33));
      }
      var c;
      switch (sixBitValue) {
        case 58:
          c = "*";
          break;
        case 59:
          c = ",";
          break;
        case 60:
          c = "-";
          break;
        case 61:
          c = ".";
          break;
        case 62:
          c = "/";
          break;
        default:
          throw new IllegalStateException_default("Decoding invalid alphanumeric value: " + sixBitValue);
      }
      return new DecodedChar_default(pos + 6, c);
    };
    GeneralAppIdDecoder2.prototype.isAlphaTo646ToAlphaLatch = function(pos) {
      if (pos + 1 > this.information.getSize()) {
        return false;
      }
      for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {
        if (i === 2) {
          if (!this.information.get(pos + 2)) {
            return false;
          }
        } else if (this.information.get(pos + i)) {
          return false;
        }
      }
      return true;
    };
    GeneralAppIdDecoder2.prototype.isAlphaOr646ToNumericLatch = function(pos) {
      if (pos + 3 > this.information.getSize()) {
        return false;
      }
      for (var i = pos; i < pos + 3; ++i) {
        if (this.information.get(i)) {
          return false;
        }
      }
      return true;
    };
    GeneralAppIdDecoder2.prototype.isNumericToAlphaNumericLatch = function(pos) {
      if (pos + 1 > this.information.getSize()) {
        return false;
      }
      for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {
        if (this.information.get(pos + i)) {
          return false;
        }
      }
      return true;
    };
    return GeneralAppIdDecoder2;
  }()
);
var GeneralAppIdDecoder_default = GeneralAppIdDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AbstractExpandedDecoder.js
var AbstractExpandedDecoder = (
  /** @class */
  function() {
    function AbstractExpandedDecoder2(information) {
      this.information = information;
      this.generalDecoder = new GeneralAppIdDecoder_default(information);
    }
    AbstractExpandedDecoder2.prototype.getInformation = function() {
      return this.information;
    };
    AbstractExpandedDecoder2.prototype.getGeneralDecoder = function() {
      return this.generalDecoder;
    };
    return AbstractExpandedDecoder2;
  }()
);
var AbstractExpandedDecoder_default = AbstractExpandedDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01decoder.js
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01decoder = (
  /** @class */
  function(_super) {
    __extends38(AI01decoder2, _super);
    function AI01decoder2(information) {
      return _super.call(this, information) || this;
    }
    AI01decoder2.prototype.encodeCompressedGtin = function(buf, currentPos) {
      buf.append("(01)");
      var initialPosition = buf.length();
      buf.append("9");
      this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);
    };
    AI01decoder2.prototype.encodeCompressedGtinWithoutAI = function(buf, currentPos, initialBufferPosition) {
      for (var i = 0; i < 4; ++i) {
        var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);
        if (currentBlock / 100 === 0) {
          buf.append("0");
        }
        if (currentBlock / 10 === 0) {
          buf.append("0");
        }
        buf.append(currentBlock);
      }
      AI01decoder2.appendCheckDigit(buf, initialBufferPosition);
    };
    AI01decoder2.appendCheckDigit = function(buf, currentPos) {
      var checkDigit = 0;
      for (var i = 0; i < 13; i++) {
        var digit = buf.charAt(i + currentPos).charCodeAt(0) - "0".charCodeAt(0);
        checkDigit += (i & 1) === 0 ? 3 * digit : digit;
      }
      checkDigit = 10 - checkDigit % 10;
      if (checkDigit === 10) {
        checkDigit = 0;
      }
      buf.append(checkDigit);
    };
    AI01decoder2.GTIN_SIZE = 40;
    return AI01decoder2;
  }(AbstractExpandedDecoder_default)
);
var AI01decoder_default = AI01decoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01AndOtherAIs.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01AndOtherAIs = (
  /** @class */
  function(_super) {
    __extends39(AI01AndOtherAIs2, _super);
    function AI01AndOtherAIs2(information) {
      return _super.call(this, information) || this;
    }
    AI01AndOtherAIs2.prototype.parseInformation = function() {
      var buff = new StringBuilder_default();
      buff.append("(01)");
      var initialGtinPosition = buff.length();
      var firstGtinDigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01AndOtherAIs2.HEADER_SIZE, 4);
      buff.append(firstGtinDigit);
      this.encodeCompressedGtinWithoutAI(buff, AI01AndOtherAIs2.HEADER_SIZE + 4, initialGtinPosition);
      return this.getGeneralDecoder().decodeAllCodes(buff, AI01AndOtherAIs2.HEADER_SIZE + 44);
    };
    AI01AndOtherAIs2.HEADER_SIZE = 1 + 1 + 2;
    return AI01AndOtherAIs2;
  }(AI01decoder_default)
);
var AI01AndOtherAIs_default = AI01AndOtherAIs;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AnyAIDecoder.js
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AnyAIDecoder = (
  /** @class */
  function(_super) {
    __extends40(AnyAIDecoder2, _super);
    function AnyAIDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AnyAIDecoder2.prototype.parseInformation = function() {
      var buf = new StringBuilder_default();
      return this.getGeneralDecoder().decodeAllCodes(buf, AnyAIDecoder2.HEADER_SIZE);
    };
    AnyAIDecoder2.HEADER_SIZE = 2 + 1 + 2;
    return AnyAIDecoder2;
  }(AbstractExpandedDecoder_default)
);
var AnyAIDecoder_default = AnyAIDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01weightDecoder.js
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01weightDecoder = (
  /** @class */
  function(_super) {
    __extends41(AI01weightDecoder2, _super);
    function AI01weightDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AI01weightDecoder2.prototype.encodeCompressedWeight = function(buf, currentPos, weightSize) {
      var originalWeightNumeric = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos, weightSize);
      this.addWeightCode(buf, originalWeightNumeric);
      var weightNumeric = this.checkWeight(originalWeightNumeric);
      var currentDivisor = 1e5;
      for (var i = 0; i < 5; ++i) {
        if (weightNumeric / currentDivisor === 0) {
          buf.append("0");
        }
        currentDivisor /= 10;
      }
      buf.append(weightNumeric);
    };
    return AI01weightDecoder2;
  }(AI01decoder_default)
);
var AI01weightDecoder_default = AI01weightDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI013x0xDecoder.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI013x0xDecoder = (
  /** @class */
  function(_super) {
    __extends42(AI013x0xDecoder2, _super);
    function AI013x0xDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AI013x0xDecoder2.prototype.parseInformation = function() {
      if (this.getInformation().getSize() !== AI013x0xDecoder2.HEADER_SIZE + AI01weightDecoder_default.GTIN_SIZE + AI013x0xDecoder2.WEIGHT_SIZE) {
        throw new NotFoundException_default();
      }
      var buf = new StringBuilder_default();
      this.encodeCompressedGtin(buf, AI013x0xDecoder2.HEADER_SIZE);
      this.encodeCompressedWeight(buf, AI013x0xDecoder2.HEADER_SIZE + AI01weightDecoder_default.GTIN_SIZE, AI013x0xDecoder2.WEIGHT_SIZE);
      return buf.toString();
    };
    AI013x0xDecoder2.HEADER_SIZE = 4 + 1;
    AI013x0xDecoder2.WEIGHT_SIZE = 15;
    return AI013x0xDecoder2;
  }(AI01weightDecoder_default)
);
var AI013x0xDecoder_default = AI013x0xDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI013103decoder.js
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI013103decoder = (
  /** @class */
  function(_super) {
    __extends43(AI013103decoder2, _super);
    function AI013103decoder2(information) {
      return _super.call(this, information) || this;
    }
    AI013103decoder2.prototype.addWeightCode = function(buf, weight) {
      buf.append("(3103)");
    };
    AI013103decoder2.prototype.checkWeight = function(weight) {
      return weight;
    };
    return AI013103decoder2;
  }(AI013x0xDecoder_default)
);
var AI013103decoder_default = AI013103decoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01320xDecoder.js
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01320xDecoder = (
  /** @class */
  function(_super) {
    __extends44(AI01320xDecoder2, _super);
    function AI01320xDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AI01320xDecoder2.prototype.addWeightCode = function(buf, weight) {
      if (weight < 1e4) {
        buf.append("(3202)");
      } else {
        buf.append("(3203)");
      }
    };
    AI01320xDecoder2.prototype.checkWeight = function(weight) {
      if (weight < 1e4) {
        return weight;
      }
      return weight - 1e4;
    };
    return AI01320xDecoder2;
  }(AI013x0xDecoder_default)
);
var AI01320xDecoder_default = AI01320xDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01392xDecoder.js
var __extends45 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01392xDecoder = (
  /** @class */
  function(_super) {
    __extends45(AI01392xDecoder2, _super);
    function AI01392xDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AI01392xDecoder2.prototype.parseInformation = function() {
      if (this.getInformation().getSize() < AI01392xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE) {
        throw new NotFoundException_default();
      }
      var buf = new StringBuilder_default();
      this.encodeCompressedGtin(buf, AI01392xDecoder2.HEADER_SIZE);
      var lastAIdigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01392xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE, AI01392xDecoder2.LAST_DIGIT_SIZE);
      buf.append("(392");
      buf.append(lastAIdigit);
      buf.append(")");
      var decodedInformation = this.getGeneralDecoder().decodeGeneralPurposeField(AI01392xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE + AI01392xDecoder2.LAST_DIGIT_SIZE, null);
      buf.append(decodedInformation.getNewString());
      return buf.toString();
    };
    AI01392xDecoder2.HEADER_SIZE = 5 + 1 + 2;
    AI01392xDecoder2.LAST_DIGIT_SIZE = 2;
    return AI01392xDecoder2;
  }(AI01decoder_default)
);
var AI01392xDecoder_default = AI01392xDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI01393xDecoder.js
var __extends46 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI01393xDecoder = (
  /** @class */
  function(_super) {
    __extends46(AI01393xDecoder2, _super);
    function AI01393xDecoder2(information) {
      return _super.call(this, information) || this;
    }
    AI01393xDecoder2.prototype.parseInformation = function() {
      if (this.getInformation().getSize() < AI01393xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE) {
        throw new NotFoundException_default();
      }
      var buf = new StringBuilder_default();
      this.encodeCompressedGtin(buf, AI01393xDecoder2.HEADER_SIZE);
      var lastAIdigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE, AI01393xDecoder2.LAST_DIGIT_SIZE);
      buf.append("(393");
      buf.append(lastAIdigit);
      buf.append(")");
      var firstThreeDigits = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE + AI01393xDecoder2.LAST_DIGIT_SIZE, AI01393xDecoder2.FIRST_THREE_DIGITS_SIZE);
      if (firstThreeDigits / 100 === 0) {
        buf.append("0");
      }
      if (firstThreeDigits / 10 === 0) {
        buf.append("0");
      }
      buf.append(firstThreeDigits);
      var generalInformation = this.getGeneralDecoder().decodeGeneralPurposeField(AI01393xDecoder2.HEADER_SIZE + AI01decoder_default.GTIN_SIZE + AI01393xDecoder2.LAST_DIGIT_SIZE + AI01393xDecoder2.FIRST_THREE_DIGITS_SIZE, null);
      buf.append(generalInformation.getNewString());
      return buf.toString();
    };
    AI01393xDecoder2.HEADER_SIZE = 5 + 1 + 2;
    AI01393xDecoder2.LAST_DIGIT_SIZE = 2;
    AI01393xDecoder2.FIRST_THREE_DIGITS_SIZE = 10;
    return AI01393xDecoder2;
  }(AI01decoder_default)
);
var AI01393xDecoder_default = AI01393xDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AI013x0x1xDecoder.js
var __extends47 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AI013x0x1xDecoder = (
  /** @class */
  function(_super) {
    __extends47(AI013x0x1xDecoder2, _super);
    function AI013x0x1xDecoder2(information, firstAIdigits, dateCode) {
      var _this = _super.call(this, information) || this;
      _this.dateCode = dateCode;
      _this.firstAIdigits = firstAIdigits;
      return _this;
    }
    AI013x0x1xDecoder2.prototype.parseInformation = function() {
      if (this.getInformation().getSize() !== AI013x0x1xDecoder2.HEADER_SIZE + AI013x0x1xDecoder2.GTIN_SIZE + AI013x0x1xDecoder2.WEIGHT_SIZE + AI013x0x1xDecoder2.DATE_SIZE) {
        throw new NotFoundException_default();
      }
      var buf = new StringBuilder_default();
      this.encodeCompressedGtin(buf, AI013x0x1xDecoder2.HEADER_SIZE);
      this.encodeCompressedWeight(buf, AI013x0x1xDecoder2.HEADER_SIZE + AI013x0x1xDecoder2.GTIN_SIZE, AI013x0x1xDecoder2.WEIGHT_SIZE);
      this.encodeCompressedDate(buf, AI013x0x1xDecoder2.HEADER_SIZE + AI013x0x1xDecoder2.GTIN_SIZE + AI013x0x1xDecoder2.WEIGHT_SIZE);
      return buf.toString();
    };
    AI013x0x1xDecoder2.prototype.encodeCompressedDate = function(buf, currentPos) {
      var numericDate = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos, AI013x0x1xDecoder2.DATE_SIZE);
      if (numericDate === 38400) {
        return;
      }
      buf.append("(");
      buf.append(this.dateCode);
      buf.append(")");
      var day = numericDate % 32;
      numericDate /= 32;
      var month = numericDate % 12 + 1;
      numericDate /= 12;
      var year = numericDate;
      if (year / 10 === 0) {
        buf.append("0");
      }
      buf.append(year);
      if (month / 10 === 0) {
        buf.append("0");
      }
      buf.append(month);
      if (day / 10 === 0) {
        buf.append("0");
      }
      buf.append(day);
    };
    AI013x0x1xDecoder2.prototype.addWeightCode = function(buf, weight) {
      buf.append("(");
      buf.append(this.firstAIdigits);
      buf.append(weight / 1e5);
      buf.append(")");
    };
    AI013x0x1xDecoder2.prototype.checkWeight = function(weight) {
      return weight % 1e5;
    };
    AI013x0x1xDecoder2.HEADER_SIZE = 7 + 1;
    AI013x0x1xDecoder2.WEIGHT_SIZE = 20;
    AI013x0x1xDecoder2.DATE_SIZE = 16;
    return AI013x0x1xDecoder2;
  }(AI01weightDecoder_default)
);
var AI013x0x1xDecoder_default = AI013x0x1xDecoder;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/AbstractExpandedDecoderComplement.js
function createDecoder(information) {
  try {
    if (information.get(1)) {
      return new AI01AndOtherAIs_default(information);
    }
    if (!information.get(2)) {
      return new AnyAIDecoder_default(information);
    }
    var fourBitEncodationMethod = GeneralAppIdDecoder_default.extractNumericValueFromBitArray(information, 1, 4);
    switch (fourBitEncodationMethod) {
      case 4:
        return new AI013103decoder_default(information);
      case 5:
        return new AI01320xDecoder_default(information);
    }
    var fiveBitEncodationMethod = GeneralAppIdDecoder_default.extractNumericValueFromBitArray(information, 1, 5);
    switch (fiveBitEncodationMethod) {
      case 12:
        return new AI01392xDecoder_default(information);
      case 13:
        return new AI01393xDecoder_default(information);
    }
    var sevenBitEncodationMethod = GeneralAppIdDecoder_default.extractNumericValueFromBitArray(information, 1, 7);
    switch (sevenBitEncodationMethod) {
      case 56:
        return new AI013x0x1xDecoder_default(information, "310", "11");
      case 57:
        return new AI013x0x1xDecoder_default(information, "320", "11");
      case 58:
        return new AI013x0x1xDecoder_default(information, "310", "13");
      case 59:
        return new AI013x0x1xDecoder_default(information, "320", "13");
      case 60:
        return new AI013x0x1xDecoder_default(information, "310", "15");
      case 61:
        return new AI013x0x1xDecoder_default(information, "320", "15");
      case 62:
        return new AI013x0x1xDecoder_default(information, "310", "17");
      case 63:
        return new AI013x0x1xDecoder_default(information, "320", "17");
    }
  } catch (e) {
    console.log(e);
    throw new IllegalStateException_default("unknown decoder: " + information);
  }
}

// node_modules/@zxing/library/esm/core/oned/rss/expanded/ExpandedPair.js
var ExpandedPair = (
  /** @class */
  function() {
    function ExpandedPair2(leftChar, rightChar, finderPatter, mayBeLast) {
      this.leftchar = leftChar;
      this.rightchar = rightChar;
      this.finderpattern = finderPatter;
      this.maybeLast = mayBeLast;
    }
    ExpandedPair2.prototype.mayBeLast = function() {
      return this.maybeLast;
    };
    ExpandedPair2.prototype.getLeftChar = function() {
      return this.leftchar;
    };
    ExpandedPair2.prototype.getRightChar = function() {
      return this.rightchar;
    };
    ExpandedPair2.prototype.getFinderPattern = function() {
      return this.finderpattern;
    };
    ExpandedPair2.prototype.mustBeLast = function() {
      return this.rightchar == null;
    };
    ExpandedPair2.prototype.toString = function() {
      return "[ " + this.leftchar + ", " + this.rightchar + " : " + (this.finderpattern == null ? "null" : this.finderpattern.getValue()) + " ]";
    };
    ExpandedPair2.equals = function(o1, o2) {
      if (!(o1 instanceof ExpandedPair2)) {
        return false;
      }
      return ExpandedPair2.equalsOrNull(o1.leftchar, o2.leftchar) && ExpandedPair2.equalsOrNull(o1.rightchar, o2.rightchar) && ExpandedPair2.equalsOrNull(o1.finderpattern, o2.finderpattern);
    };
    ExpandedPair2.equalsOrNull = function(o1, o2) {
      return o1 === null ? o2 === null : ExpandedPair2.equals(o1, o2);
    };
    ExpandedPair2.prototype.hashCode = function() {
      var value = this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();
      return value;
    };
    return ExpandedPair2;
  }()
);
var ExpandedPair_default = ExpandedPair;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/ExpandedRow.js
var ExpandedRow = (
  /** @class */
  function() {
    function ExpandedRow2(pairs, rowNumber, wasReversed) {
      this.pairs = pairs;
      this.rowNumber = rowNumber;
      this.wasReversed = wasReversed;
    }
    ExpandedRow2.prototype.getPairs = function() {
      return this.pairs;
    };
    ExpandedRow2.prototype.getRowNumber = function() {
      return this.rowNumber;
    };
    ExpandedRow2.prototype.isReversed = function() {
      return this.wasReversed;
    };
    ExpandedRow2.prototype.isEquivalent = function(otherPairs) {
      return this.checkEqualitity(this, otherPairs);
    };
    ExpandedRow2.prototype.toString = function() {
      return "{ " + this.pairs + " }";
    };
    ExpandedRow2.prototype.equals = function(o1, o2) {
      if (!(o1 instanceof ExpandedRow2)) {
        return false;
      }
      return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;
    };
    ExpandedRow2.prototype.checkEqualitity = function(pair1, pair2) {
      if (!pair1 || !pair2)
        return;
      var result;
      pair1.forEach(function(e1, i) {
        pair2.forEach(function(e2) {
          if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {
            result = true;
          }
        });
      });
      return result;
    };
    return ExpandedRow2;
  }()
);
var ExpandedRow_default = ExpandedRow;

// node_modules/@zxing/library/esm/core/oned/rss/expanded/RSSExpandedReader.js
var __extends48 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values16 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var RSSExpandedReader = (
  /** @class */
  function(_super) {
    __extends48(RSSExpandedReader2, _super);
    function RSSExpandedReader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.pairs = new Array(RSSExpandedReader2.MAX_PAIRS);
      _this.rows = new Array();
      _this.startEnd = [2];
      return _this;
    }
    RSSExpandedReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      this.pairs.length = 0;
      this.startFromEven = false;
      try {
        return RSSExpandedReader2.constructResult(this.decodeRow2pairs(rowNumber, row));
      } catch (e) {
      }
      this.pairs.length = 0;
      this.startFromEven = true;
      return RSSExpandedReader2.constructResult(this.decodeRow2pairs(rowNumber, row));
    };
    RSSExpandedReader2.prototype.reset = function() {
      this.pairs.length = 0;
      this.rows.length = 0;
    };
    RSSExpandedReader2.prototype.decodeRow2pairs = function(rowNumber, row) {
      var done = false;
      while (!done) {
        try {
          this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));
        } catch (error) {
          if (error instanceof NotFoundException_default) {
            if (!this.pairs.length) {
              throw new NotFoundException_default();
            }
            done = true;
          }
        }
      }
      if (this.checkChecksum()) {
        return this.pairs;
      }
      var tryStackedDecode;
      if (this.rows.length) {
        tryStackedDecode = true;
      } else {
        tryStackedDecode = false;
      }
      this.storeRow(rowNumber, false);
      if (tryStackedDecode) {
        var ps = this.checkRowsBoolean(false);
        if (ps != null) {
          return ps;
        }
        ps = this.checkRowsBoolean(true);
        if (ps != null) {
          return ps;
        }
      }
      throw new NotFoundException_default();
    };
    RSSExpandedReader2.prototype.checkRowsBoolean = function(reverse) {
      if (this.rows.length > 25) {
        this.rows.length = 0;
        return null;
      }
      this.pairs.length = 0;
      if (reverse) {
        this.rows = this.rows.reverse();
      }
      var ps = null;
      try {
        ps = this.checkRows(new Array(), 0);
      } catch (e) {
        console.log(e);
      }
      if (reverse) {
        this.rows = this.rows.reverse();
      }
      return ps;
    };
    RSSExpandedReader2.prototype.checkRows = function(collectedRows, currentRow) {
      var e_1, _a2;
      for (var i = currentRow; i < this.rows.length; i++) {
        var row = this.rows[i];
        this.pairs.length = 0;
        try {
          for (var collectedRows_1 = (e_1 = void 0, __values16(collectedRows)), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {
            var collectedRow = collectedRows_1_1.value;
            this.pairs.push(collectedRow.getPairs());
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (collectedRows_1_1 && !collectedRows_1_1.done && (_a2 = collectedRows_1.return)) _a2.call(collectedRows_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        this.pairs.push(row.getPairs());
        if (!RSSExpandedReader2.isValidSequence(this.pairs)) {
          continue;
        }
        if (this.checkChecksum()) {
          return this.pairs;
        }
        var rs = new Array(collectedRows);
        rs.push(row);
        try {
          return this.checkRows(rs, i + 1);
        } catch (e) {
          console.log(e);
        }
      }
      throw new NotFoundException_default();
    };
    RSSExpandedReader2.isValidSequence = function(pairs) {
      var e_2, _a2;
      try {
        for (var _b = __values16(RSSExpandedReader2.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {
          var sequence = _c.value;
          if (pairs.length > sequence.length) {
            continue;
          }
          var stop_1 = true;
          for (var j = 0; j < pairs.length; j++) {
            if (pairs[j].getFinderPattern().getValue() !== sequence[j]) {
              stop_1 = false;
              break;
            }
          }
          if (stop_1) {
            return true;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return false;
    };
    RSSExpandedReader2.prototype.storeRow = function(rowNumber, wasReversed) {
      var insertPos = 0;
      var prevIsSame = false;
      var nextIsSame = false;
      while (insertPos < this.rows.length) {
        var erow = this.rows[insertPos];
        if (erow.getRowNumber() > rowNumber) {
          nextIsSame = erow.isEquivalent(this.pairs);
          break;
        }
        prevIsSame = erow.isEquivalent(this.pairs);
        insertPos++;
      }
      if (nextIsSame || prevIsSame) {
        return;
      }
      if (RSSExpandedReader2.isPartialRow(this.pairs, this.rows)) {
        return;
      }
      this.rows.push(insertPos, new ExpandedRow_default(this.pairs, rowNumber, wasReversed));
      this.removePartialRows(this.pairs, this.rows);
    };
    RSSExpandedReader2.prototype.removePartialRows = function(pairs, rows) {
      var e_3, _a2, e_4, _b, e_5, _c;
      try {
        for (var rows_1 = __values16(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
          var row = rows_1_1.value;
          if (row.getPairs().length === pairs.length) {
            continue;
          }
          var allFound = true;
          try {
            for (var _d = (e_4 = void 0, __values16(row.getPairs())), _e = _d.next(); !_e.done; _e = _d.next()) {
              var p = _e.value;
              var found = false;
              try {
                for (var pairs_1 = (e_5 = void 0, __values16(pairs)), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {
                  var pp = pairs_1_1.value;
                  if (ExpandedPair_default.equals(p, pp)) {
                    found = true;
                    break;
                  }
                }
              } catch (e_5_1) {
                e_5 = { error: e_5_1 };
              } finally {
                try {
                  if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);
                } finally {
                  if (e_5) throw e_5.error;
                }
              }
              if (!found) {
                allFound = false;
              }
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (rows_1_1 && !rows_1_1.done && (_a2 = rows_1.return)) _a2.call(rows_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
    };
    RSSExpandedReader2.isPartialRow = function(pairs, rows) {
      var e_6, _a2, e_7, _b, e_8, _c;
      try {
        for (var rows_2 = __values16(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {
          var r = rows_2_1.value;
          var allFound = true;
          try {
            for (var pairs_2 = (e_7 = void 0, __values16(pairs)), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {
              var p = pairs_2_1.value;
              var found = false;
              try {
                for (var _d = (e_8 = void 0, __values16(r.getPairs())), _e = _d.next(); !_e.done; _e = _d.next()) {
                  var pp = _e.value;
                  if (p.equals(pp)) {
                    found = true;
                    break;
                  }
                }
              } catch (e_8_1) {
                e_8 = { error: e_8_1 };
              } finally {
                try {
                  if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                } finally {
                  if (e_8) throw e_8.error;
                }
              }
              if (!found) {
                allFound = false;
                break;
              }
            }
          } catch (e_7_1) {
            e_7 = { error: e_7_1 };
          } finally {
            try {
              if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);
            } finally {
              if (e_7) throw e_7.error;
            }
          }
          if (allFound) {
            return true;
          }
        }
      } catch (e_6_1) {
        e_6 = { error: e_6_1 };
      } finally {
        try {
          if (rows_2_1 && !rows_2_1.done && (_a2 = rows_2.return)) _a2.call(rows_2);
        } finally {
          if (e_6) throw e_6.error;
        }
      }
      return false;
    };
    RSSExpandedReader2.prototype.getRows = function() {
      return this.rows;
    };
    RSSExpandedReader2.constructResult = function(pairs) {
      var binary = BitArrayBuilder_default.buildBitArray(pairs);
      var decoder = createDecoder(binary);
      var resultingString = decoder.parseInformation();
      var firstPoints = pairs[0].getFinderPattern().getResultPoints();
      var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();
      var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];
      return new Result_default(resultingString, null, null, points, BarcodeFormat_default.RSS_EXPANDED, null);
    };
    RSSExpandedReader2.prototype.checkChecksum = function() {
      var firstPair = this.pairs.get(0);
      var checkCharacter = firstPair.getLeftChar();
      var firstCharacter = firstPair.getRightChar();
      if (firstCharacter === null) {
        return false;
      }
      var checksum = firstCharacter.getChecksumPortion();
      var s = 2;
      for (var i = 1; i < this.pairs.size(); ++i) {
        var currentPair = this.pairs.get(i);
        checksum += currentPair.getLeftChar().getChecksumPortion();
        s++;
        var currentRightChar = currentPair.getRightChar();
        if (currentRightChar != null) {
          checksum += currentRightChar.getChecksumPortion();
          s++;
        }
      }
      checksum %= 211;
      var checkCharacterValue = 211 * (s - 4) + checksum;
      return checkCharacterValue === checkCharacter.getValue();
    };
    RSSExpandedReader2.getNextSecondBar = function(row, initialPos) {
      var currentPos;
      if (row.get(initialPos)) {
        currentPos = row.getNextUnset(initialPos);
        currentPos = row.getNextSet(currentPos);
      } else {
        currentPos = row.getNextSet(initialPos);
        currentPos = row.getNextUnset(currentPos);
      }
      return currentPos;
    };
    RSSExpandedReader2.prototype.retrieveNextPair = function(row, previousPairs, rowNumber) {
      var isOddPattern = previousPairs.length % 2 === 0;
      if (this.startFromEven) {
        isOddPattern = !isOddPattern;
      }
      var pattern;
      var keepFinding = true;
      var forcedOffset = -1;
      do {
        this.findNextPair(row, previousPairs, forcedOffset);
        pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);
        if (pattern === null) {
          forcedOffset = RSSExpandedReader2.getNextSecondBar(row, this.startEnd[0]);
        } else {
          keepFinding = false;
        }
      } while (keepFinding);
      var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);
      if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {
        throw new NotFoundException_default();
      }
      var rightChar;
      try {
        rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);
      } catch (e) {
        rightChar = null;
        console.log(e);
      }
      return new ExpandedPair_default(leftChar, rightChar, pattern, true);
    };
    RSSExpandedReader2.prototype.isEmptyPair = function(pairs) {
      if (pairs.length === 0) {
        return true;
      }
      return false;
    };
    RSSExpandedReader2.prototype.findNextPair = function(row, previousPairs, forcedOffset) {
      var counters = this.getDecodeFinderCounters();
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var width = row.getSize();
      var rowOffset;
      if (forcedOffset >= 0) {
        rowOffset = forcedOffset;
      } else if (this.isEmptyPair(previousPairs)) {
        rowOffset = 0;
      } else {
        var lastPair = previousPairs[previousPairs.length - 1];
        rowOffset = lastPair.getFinderPattern().getStartEnd()[1];
      }
      var searchingEvenPair = previousPairs.length % 2 !== 0;
      if (this.startFromEven) {
        searchingEvenPair = !searchingEvenPair;
      }
      var isWhite = false;
      while (rowOffset < width) {
        isWhite = !row.get(rowOffset);
        if (!isWhite) {
          break;
        }
        rowOffset++;
      }
      var counterPosition = 0;
      var patternStart = rowOffset;
      for (var x = rowOffset; x < width; x++) {
        if (row.get(x) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === 3) {
            if (searchingEvenPair) {
              RSSExpandedReader2.reverseCounters(counters);
            }
            if (RSSExpandedReader2.isFinderPattern(counters)) {
              this.startEnd[0] = patternStart;
              this.startEnd[1] = x;
              return;
            }
            if (searchingEvenPair) {
              RSSExpandedReader2.reverseCounters(counters);
            }
            patternStart += counters[0] + counters[1];
            counters[0] = counters[2];
            counters[1] = counters[3];
            counters[2] = 0;
            counters[3] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    RSSExpandedReader2.reverseCounters = function(counters) {
      var length = counters.length;
      for (var i = 0; i < length / 2; ++i) {
        var tmp = counters[i];
        counters[i] = counters[length - i - 1];
        counters[length - i - 1] = tmp;
      }
    };
    RSSExpandedReader2.prototype.parseFoundFinderPattern = function(row, rowNumber, oddPattern) {
      var firstCounter;
      var start;
      var end;
      if (oddPattern) {
        var firstElementStart = this.startEnd[0] - 1;
        while (firstElementStart >= 0 && !row.get(firstElementStart)) {
          firstElementStart--;
        }
        firstElementStart++;
        firstCounter = this.startEnd[0] - firstElementStart;
        start = firstElementStart;
        end = this.startEnd[1];
      } else {
        start = this.startEnd[0];
        end = row.getNextUnset(this.startEnd[1] + 1);
        firstCounter = end - this.startEnd[1];
      }
      var counters = this.getDecodeFinderCounters();
      System_default.arraycopy(counters, 0, counters, 1, counters.length - 1);
      counters[0] = firstCounter;
      var value;
      try {
        value = this.parseFinderValue(counters, RSSExpandedReader2.FINDER_PATTERNS);
      } catch (e) {
        return null;
      }
      return new FinderPattern_default(value, [start, end], start, end, rowNumber);
    };
    RSSExpandedReader2.prototype.decodeDataCharacter = function(row, pattern, isOddPattern, leftChar) {
      var counters = this.getDataCharacterCounters();
      for (var x = 0; x < counters.length; x++) {
        counters[x] = 0;
      }
      if (leftChar) {
        RSSExpandedReader2.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);
      } else {
        RSSExpandedReader2.recordPattern(row, pattern.getStartEnd()[1], counters);
        for (var i = 0, j = counters.length - 1; i < j; i++, j--) {
          var temp = counters[i];
          counters[i] = counters[j];
          counters[j] = temp;
        }
      }
      var numModules = 17;
      var elementWidth = MathUtils_default.sum(new Int32Array(counters)) / numModules;
      var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15;
      if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {
        throw new NotFoundException_default();
      }
      var oddCounts = this.getOddCounts();
      var evenCounts = this.getEvenCounts();
      var oddRoundingErrors = this.getOddRoundingErrors();
      var evenRoundingErrors = this.getEvenRoundingErrors();
      for (var i = 0; i < counters.length; i++) {
        var value_1 = 1 * counters[i] / elementWidth;
        var count = value_1 + 0.5;
        if (count < 1) {
          if (value_1 < 0.3) {
            throw new NotFoundException_default();
          }
          count = 1;
        } else if (count > 8) {
          if (value_1 > 8.7) {
            throw new NotFoundException_default();
          }
          count = 8;
        }
        var offset = i / 2;
        if ((i & 1) === 0) {
          oddCounts[offset] = count;
          oddRoundingErrors[offset] = value_1 - count;
        } else {
          evenCounts[offset] = count;
          evenRoundingErrors[offset] = value_1 - count;
        }
      }
      this.adjustOddEvenCounts(numModules);
      var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;
      var oddSum = 0;
      var oddChecksumPortion = 0;
      for (var i = oddCounts.length - 1; i >= 0; i--) {
        if (RSSExpandedReader2.isNotA1left(pattern, isOddPattern, leftChar)) {
          var weight = RSSExpandedReader2.WEIGHTS[weightRowNumber][2 * i];
          oddChecksumPortion += oddCounts[i] * weight;
        }
        oddSum += oddCounts[i];
      }
      var evenChecksumPortion = 0;
      for (var i = evenCounts.length - 1; i >= 0; i--) {
        if (RSSExpandedReader2.isNotA1left(pattern, isOddPattern, leftChar)) {
          var weight = RSSExpandedReader2.WEIGHTS[weightRowNumber][2 * i + 1];
          evenChecksumPortion += evenCounts[i] * weight;
        }
      }
      var checksumPortion = oddChecksumPortion + evenChecksumPortion;
      if ((oddSum & 1) !== 0 || oddSum > 13 || oddSum < 4) {
        throw new NotFoundException_default();
      }
      var group = (13 - oddSum) / 2;
      var oddWidest = RSSExpandedReader2.SYMBOL_WIDEST[group];
      var evenWidest = 9 - oddWidest;
      var vOdd = RSSUtils_default.getRSSvalue(oddCounts, oddWidest, true);
      var vEven = RSSUtils_default.getRSSvalue(evenCounts, evenWidest, false);
      var tEven = RSSExpandedReader2.EVEN_TOTAL_SUBSET[group];
      var gSum = RSSExpandedReader2.GSUM[group];
      var value = vOdd * tEven + vEven + gSum;
      return new DataCharacter_default(value, checksumPortion);
    };
    RSSExpandedReader2.isNotA1left = function(pattern, isOddPattern, leftChar) {
      return !(pattern.getValue() === 0 && isOddPattern && leftChar);
    };
    RSSExpandedReader2.prototype.adjustOddEvenCounts = function(numModules) {
      var oddSum = MathUtils_default.sum(new Int32Array(this.getOddCounts()));
      var evenSum = MathUtils_default.sum(new Int32Array(this.getEvenCounts()));
      var incrementOdd = false;
      var decrementOdd = false;
      if (oddSum > 13) {
        decrementOdd = true;
      } else if (oddSum < 4) {
        incrementOdd = true;
      }
      var incrementEven = false;
      var decrementEven = false;
      if (evenSum > 13) {
        decrementEven = true;
      } else if (evenSum < 4) {
        incrementEven = true;
      }
      var mismatch = oddSum + evenSum - numModules;
      var oddParityBad = (oddSum & 1) === 1;
      var evenParityBad = (evenSum & 1) === 0;
      if (mismatch === 1) {
        if (oddParityBad) {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
          decrementOdd = true;
        } else {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          decrementEven = true;
        }
      } else if (mismatch === -1) {
        if (oddParityBad) {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
          incrementOdd = true;
        } else {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          incrementEven = true;
        }
      } else if (mismatch === 0) {
        if (oddParityBad) {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          if (oddSum < evenSum) {
            incrementOdd = true;
            decrementEven = true;
          } else {
            decrementOdd = true;
            incrementEven = true;
          }
        } else {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
        }
      } else {
        throw new NotFoundException_default();
      }
      if (incrementOdd) {
        if (decrementOdd) {
          throw new NotFoundException_default();
        }
        RSSExpandedReader2.increment(this.getOddCounts(), this.getOddRoundingErrors());
      }
      if (decrementOdd) {
        RSSExpandedReader2.decrement(this.getOddCounts(), this.getOddRoundingErrors());
      }
      if (incrementEven) {
        if (decrementEven) {
          throw new NotFoundException_default();
        }
        RSSExpandedReader2.increment(this.getEvenCounts(), this.getOddRoundingErrors());
      }
      if (decrementEven) {
        RSSExpandedReader2.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
      }
    };
    RSSExpandedReader2.SYMBOL_WIDEST = [7, 5, 4, 3, 1];
    RSSExpandedReader2.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];
    RSSExpandedReader2.GSUM = [0, 348, 1388, 2948, 3988];
    RSSExpandedReader2.FINDER_PATTERNS = [
      Int32Array.from([1, 8, 4, 1]),
      Int32Array.from([3, 6, 4, 1]),
      Int32Array.from([3, 4, 6, 1]),
      Int32Array.from([3, 2, 8, 1]),
      Int32Array.from([2, 6, 5, 1]),
      Int32Array.from([2, 2, 9, 1])
    ];
    RSSExpandedReader2.WEIGHTS = [
      [1, 3, 9, 27, 81, 32, 96, 77],
      [20, 60, 180, 118, 143, 7, 21, 63],
      [189, 145, 13, 39, 117, 140, 209, 205],
      [193, 157, 49, 147, 19, 57, 171, 91],
      [62, 186, 136, 197, 169, 85, 44, 132],
      [185, 133, 188, 142, 4, 12, 36, 108],
      [113, 128, 173, 97, 80, 29, 87, 50],
      [150, 28, 84, 41, 123, 158, 52, 156],
      [46, 138, 203, 187, 139, 206, 196, 166],
      [76, 17, 51, 153, 37, 111, 122, 155],
      [43, 129, 176, 106, 107, 110, 119, 146],
      [16, 48, 144, 10, 30, 90, 59, 177],
      [109, 116, 137, 200, 178, 112, 125, 164],
      [70, 210, 208, 202, 184, 130, 179, 115],
      [134, 191, 151, 31, 93, 68, 204, 190],
      [148, 22, 66, 198, 172, 94, 71, 2],
      [6, 18, 54, 162, 64, 192, 154, 40],
      [120, 149, 25, 75, 14, 42, 126, 167],
      [79, 26, 78, 23, 69, 207, 199, 175],
      [103, 98, 83, 38, 114, 131, 182, 124],
      [161, 61, 183, 127, 170, 88, 53, 159],
      [55, 165, 73, 8, 24, 72, 5, 15],
      [45, 135, 194, 160, 58, 174, 100, 89]
    ];
    RSSExpandedReader2.FINDER_PAT_A = 0;
    RSSExpandedReader2.FINDER_PAT_B = 1;
    RSSExpandedReader2.FINDER_PAT_C = 2;
    RSSExpandedReader2.FINDER_PAT_D = 3;
    RSSExpandedReader2.FINDER_PAT_E = 4;
    RSSExpandedReader2.FINDER_PAT_F = 5;
    RSSExpandedReader2.FINDER_PATTERN_SEQUENCES = [
      [RSSExpandedReader2.FINDER_PAT_A, RSSExpandedReader2.FINDER_PAT_A],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_B
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_D
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_C
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_F
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_F,
        RSSExpandedReader2.FINDER_PAT_F
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_D
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_E
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_F,
        RSSExpandedReader2.FINDER_PAT_F
      ],
      [
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_A,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_B,
        RSSExpandedReader2.FINDER_PAT_C,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_D,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_E,
        RSSExpandedReader2.FINDER_PAT_F,
        RSSExpandedReader2.FINDER_PAT_F
      ]
    ];
    RSSExpandedReader2.MAX_PAIRS = 11;
    return RSSExpandedReader2;
  }(AbstractRSSReader_default)
);
var RSSExpandedReader_default = RSSExpandedReader;

// node_modules/@zxing/library/esm/core/oned/rss/Pair.js
var __extends49 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Pair = (
  /** @class */
  function(_super) {
    __extends49(Pair2, _super);
    function Pair2(value, checksumPortion, finderPattern) {
      var _this = _super.call(this, value, checksumPortion) || this;
      _this.count = 0;
      _this.finderPattern = finderPattern;
      return _this;
    }
    Pair2.prototype.getFinderPattern = function() {
      return this.finderPattern;
    };
    Pair2.prototype.getCount = function() {
      return this.count;
    };
    Pair2.prototype.incrementCount = function() {
      this.count++;
    };
    return Pair2;
  }(DataCharacter_default)
);
var Pair_default = Pair;

// node_modules/@zxing/library/esm/core/oned/rss/RSS14Reader.js
var __extends50 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values17 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var RSS14Reader = (
  /** @class */
  function(_super) {
    __extends50(RSS14Reader2, _super);
    function RSS14Reader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.possibleLeftPairs = [];
      _this.possibleRightPairs = [];
      return _this;
    }
    RSS14Reader2.prototype.decodeRow = function(rowNumber, row, hints) {
      var e_1, _a2, e_2, _b;
      var leftPair = this.decodePair(row, false, rowNumber, hints);
      RSS14Reader2.addOrTally(this.possibleLeftPairs, leftPair);
      row.reverse();
      var rightPair = this.decodePair(row, true, rowNumber, hints);
      RSS14Reader2.addOrTally(this.possibleRightPairs, rightPair);
      row.reverse();
      try {
        for (var _c = __values17(this.possibleLeftPairs), _d = _c.next(); !_d.done; _d = _c.next()) {
          var left = _d.value;
          if (left.getCount() > 1) {
            try {
              for (var _e = (e_2 = void 0, __values17(this.possibleRightPairs)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var right = _f.value;
                if (right.getCount() > 1 && RSS14Reader2.checkChecksum(left, right)) {
                  return RSS14Reader2.constructResult(left, right);
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return)) _a2.call(_c);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      throw new NotFoundException_default();
    };
    RSS14Reader2.addOrTally = function(possiblePairs, pair) {
      var e_3, _a2;
      if (pair == null) {
        return;
      }
      var found = false;
      try {
        for (var possiblePairs_1 = __values17(possiblePairs), possiblePairs_1_1 = possiblePairs_1.next(); !possiblePairs_1_1.done; possiblePairs_1_1 = possiblePairs_1.next()) {
          var other = possiblePairs_1_1.value;
          if (other.getValue() === pair.getValue()) {
            other.incrementCount();
            found = true;
            break;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (possiblePairs_1_1 && !possiblePairs_1_1.done && (_a2 = possiblePairs_1.return)) _a2.call(possiblePairs_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      if (!found) {
        possiblePairs.push(pair);
      }
    };
    RSS14Reader2.prototype.reset = function() {
      this.possibleLeftPairs.length = 0;
      this.possibleRightPairs.length = 0;
    };
    RSS14Reader2.constructResult = function(leftPair, rightPair) {
      var symbolValue = 4537077 * leftPair.getValue() + rightPair.getValue();
      var text = new String(symbolValue).toString();
      var buffer = new StringBuilder_default();
      for (var i = 13 - text.length; i > 0; i--) {
        buffer.append("0");
      }
      buffer.append(text);
      var checkDigit = 0;
      for (var i = 0; i < 13; i++) {
        var digit = buffer.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
        checkDigit += (i & 1) === 0 ? 3 * digit : digit;
      }
      checkDigit = 10 - checkDigit % 10;
      if (checkDigit === 10) {
        checkDigit = 0;
      }
      buffer.append(checkDigit.toString());
      var leftPoints = leftPair.getFinderPattern().getResultPoints();
      var rightPoints = rightPair.getFinderPattern().getResultPoints();
      return new Result_default(buffer.toString(), null, 0, [leftPoints[0], leftPoints[1], rightPoints[0], rightPoints[1]], BarcodeFormat_default.RSS_14, (/* @__PURE__ */ new Date()).getTime());
    };
    RSS14Reader2.checkChecksum = function(leftPair, rightPair) {
      var checkValue = (leftPair.getChecksumPortion() + 16 * rightPair.getChecksumPortion()) % 79;
      var targetCheckValue = 9 * leftPair.getFinderPattern().getValue() + rightPair.getFinderPattern().getValue();
      if (targetCheckValue > 72) {
        targetCheckValue--;
      }
      if (targetCheckValue > 8) {
        targetCheckValue--;
      }
      return checkValue === targetCheckValue;
    };
    RSS14Reader2.prototype.decodePair = function(row, right, rowNumber, hints) {
      try {
        var startEnd = this.findFinderPattern(row, right);
        var pattern = this.parseFoundFinderPattern(row, rowNumber, right, startEnd);
        var resultPointCallback = hints == null ? null : hints.get(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK);
        if (resultPointCallback != null) {
          var center = (startEnd[0] + startEnd[1]) / 2;
          if (right) {
            center = row.getSize() - 1 - center;
          }
          resultPointCallback.foundPossibleResultPoint(new ResultPoint_default(center, rowNumber));
        }
        var outside = this.decodeDataCharacter(row, pattern, true);
        var inside = this.decodeDataCharacter(row, pattern, false);
        return new Pair_default(1597 * outside.getValue() + inside.getValue(), outside.getChecksumPortion() + 4 * inside.getChecksumPortion(), pattern);
      } catch (err) {
        return null;
      }
    };
    RSS14Reader2.prototype.decodeDataCharacter = function(row, pattern, outsideChar) {
      var counters = this.getDataCharacterCounters();
      for (var x = 0; x < counters.length; x++) {
        counters[x] = 0;
      }
      if (outsideChar) {
        OneDReader_default.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);
      } else {
        OneDReader_default.recordPattern(row, pattern.getStartEnd()[1] + 1, counters);
        for (var i = 0, j = counters.length - 1; i < j; i++, j--) {
          var temp = counters[i];
          counters[i] = counters[j];
          counters[j] = temp;
        }
      }
      var numModules = outsideChar ? 16 : 15;
      var elementWidth = MathUtils_default.sum(new Int32Array(counters)) / numModules;
      var oddCounts = this.getOddCounts();
      var evenCounts = this.getEvenCounts();
      var oddRoundingErrors = this.getOddRoundingErrors();
      var evenRoundingErrors = this.getEvenRoundingErrors();
      for (var i = 0; i < counters.length; i++) {
        var value = counters[i] / elementWidth;
        var count = Math.floor(value + 0.5);
        if (count < 1) {
          count = 1;
        } else if (count > 8) {
          count = 8;
        }
        var offset = Math.floor(i / 2);
        if ((i & 1) === 0) {
          oddCounts[offset] = count;
          oddRoundingErrors[offset] = value - count;
        } else {
          evenCounts[offset] = count;
          evenRoundingErrors[offset] = value - count;
        }
      }
      this.adjustOddEvenCounts(outsideChar, numModules);
      var oddSum = 0;
      var oddChecksumPortion = 0;
      for (var i = oddCounts.length - 1; i >= 0; i--) {
        oddChecksumPortion *= 9;
        oddChecksumPortion += oddCounts[i];
        oddSum += oddCounts[i];
      }
      var evenChecksumPortion = 0;
      var evenSum = 0;
      for (var i = evenCounts.length - 1; i >= 0; i--) {
        evenChecksumPortion *= 9;
        evenChecksumPortion += evenCounts[i];
        evenSum += evenCounts[i];
      }
      var checksumPortion = oddChecksumPortion + 3 * evenChecksumPortion;
      if (outsideChar) {
        if ((oddSum & 1) !== 0 || oddSum > 12 || oddSum < 4) {
          throw new NotFoundException_default();
        }
        var group = (12 - oddSum) / 2;
        var oddWidest = RSS14Reader2.OUTSIDE_ODD_WIDEST[group];
        var evenWidest = 9 - oddWidest;
        var vOdd = RSSUtils_default.getRSSvalue(oddCounts, oddWidest, false);
        var vEven = RSSUtils_default.getRSSvalue(evenCounts, evenWidest, true);
        var tEven = RSS14Reader2.OUTSIDE_EVEN_TOTAL_SUBSET[group];
        var gSum = RSS14Reader2.OUTSIDE_GSUM[group];
        return new DataCharacter_default(vOdd * tEven + vEven + gSum, checksumPortion);
      } else {
        if ((evenSum & 1) !== 0 || evenSum > 10 || evenSum < 4) {
          throw new NotFoundException_default();
        }
        var group = (10 - evenSum) / 2;
        var oddWidest = RSS14Reader2.INSIDE_ODD_WIDEST[group];
        var evenWidest = 9 - oddWidest;
        var vOdd = RSSUtils_default.getRSSvalue(oddCounts, oddWidest, true);
        var vEven = RSSUtils_default.getRSSvalue(evenCounts, evenWidest, false);
        var tOdd = RSS14Reader2.INSIDE_ODD_TOTAL_SUBSET[group];
        var gSum = RSS14Reader2.INSIDE_GSUM[group];
        return new DataCharacter_default(vEven * tOdd + vOdd + gSum, checksumPortion);
      }
    };
    RSS14Reader2.prototype.findFinderPattern = function(row, rightFinderPattern) {
      var counters = this.getDecodeFinderCounters();
      counters[0] = 0;
      counters[1] = 0;
      counters[2] = 0;
      counters[3] = 0;
      var width = row.getSize();
      var isWhite = false;
      var rowOffset = 0;
      while (rowOffset < width) {
        isWhite = !row.get(rowOffset);
        if (rightFinderPattern === isWhite) {
          break;
        }
        rowOffset++;
      }
      var counterPosition = 0;
      var patternStart = rowOffset;
      for (var x = rowOffset; x < width; x++) {
        if (row.get(x) !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === 3) {
            if (AbstractRSSReader_default.isFinderPattern(counters)) {
              return [patternStart, x];
            }
            patternStart += counters[0] + counters[1];
            counters[0] = counters[2];
            counters[1] = counters[3];
            counters[2] = 0;
            counters[3] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      throw new NotFoundException_default();
    };
    RSS14Reader2.prototype.parseFoundFinderPattern = function(row, rowNumber, right, startEnd) {
      var firstIsBlack = row.get(startEnd[0]);
      var firstElementStart = startEnd[0] - 1;
      while (firstElementStart >= 0 && firstIsBlack !== row.get(firstElementStart)) {
        firstElementStart--;
      }
      firstElementStart++;
      var firstCounter = startEnd[0] - firstElementStart;
      var counters = this.getDecodeFinderCounters();
      var copy = new Int32Array(counters.length);
      System_default.arraycopy(counters, 0, copy, 1, counters.length - 1);
      copy[0] = firstCounter;
      var value = this.parseFinderValue(copy, RSS14Reader2.FINDER_PATTERNS);
      var start = firstElementStart;
      var end = startEnd[1];
      if (right) {
        start = row.getSize() - 1 - start;
        end = row.getSize() - 1 - end;
      }
      return new FinderPattern_default(value, [firstElementStart, startEnd[1]], start, end, rowNumber);
    };
    RSS14Reader2.prototype.adjustOddEvenCounts = function(outsideChar, numModules) {
      var oddSum = MathUtils_default.sum(new Int32Array(this.getOddCounts()));
      var evenSum = MathUtils_default.sum(new Int32Array(this.getEvenCounts()));
      var incrementOdd = false;
      var decrementOdd = false;
      var incrementEven = false;
      var decrementEven = false;
      if (outsideChar) {
        if (oddSum > 12) {
          decrementOdd = true;
        } else if (oddSum < 4) {
          incrementOdd = true;
        }
        if (evenSum > 12) {
          decrementEven = true;
        } else if (evenSum < 4) {
          incrementEven = true;
        }
      } else {
        if (oddSum > 11) {
          decrementOdd = true;
        } else if (oddSum < 5) {
          incrementOdd = true;
        }
        if (evenSum > 10) {
          decrementEven = true;
        } else if (evenSum < 4) {
          incrementEven = true;
        }
      }
      var mismatch = oddSum + evenSum - numModules;
      var oddParityBad = (oddSum & 1) === (outsideChar ? 1 : 0);
      var evenParityBad = (evenSum & 1) === 1;
      if (mismatch === 1) {
        if (oddParityBad) {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
          decrementOdd = true;
        } else {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          decrementEven = true;
        }
      } else if (mismatch === -1) {
        if (oddParityBad) {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
          incrementOdd = true;
        } else {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          incrementEven = true;
        }
      } else if (mismatch === 0) {
        if (oddParityBad) {
          if (!evenParityBad) {
            throw new NotFoundException_default();
          }
          if (oddSum < evenSum) {
            incrementOdd = true;
            decrementEven = true;
          } else {
            decrementOdd = true;
            incrementEven = true;
          }
        } else {
          if (evenParityBad) {
            throw new NotFoundException_default();
          }
        }
      } else {
        throw new NotFoundException_default();
      }
      if (incrementOdd) {
        if (decrementOdd) {
          throw new NotFoundException_default();
        }
        AbstractRSSReader_default.increment(this.getOddCounts(), this.getOddRoundingErrors());
      }
      if (decrementOdd) {
        AbstractRSSReader_default.decrement(this.getOddCounts(), this.getOddRoundingErrors());
      }
      if (incrementEven) {
        if (decrementEven) {
          throw new NotFoundException_default();
        }
        AbstractRSSReader_default.increment(this.getEvenCounts(), this.getOddRoundingErrors());
      }
      if (decrementEven) {
        AbstractRSSReader_default.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
      }
    };
    RSS14Reader2.OUTSIDE_EVEN_TOTAL_SUBSET = [1, 10, 34, 70, 126];
    RSS14Reader2.INSIDE_ODD_TOTAL_SUBSET = [4, 20, 48, 81];
    RSS14Reader2.OUTSIDE_GSUM = [0, 161, 961, 2015, 2715];
    RSS14Reader2.INSIDE_GSUM = [0, 336, 1036, 1516];
    RSS14Reader2.OUTSIDE_ODD_WIDEST = [8, 6, 4, 3, 1];
    RSS14Reader2.INSIDE_ODD_WIDEST = [2, 4, 6, 8];
    RSS14Reader2.FINDER_PATTERNS = [
      Int32Array.from([3, 8, 2, 1]),
      Int32Array.from([3, 5, 5, 1]),
      Int32Array.from([3, 3, 7, 1]),
      Int32Array.from([3, 1, 9, 1]),
      Int32Array.from([2, 7, 4, 1]),
      Int32Array.from([2, 5, 6, 1]),
      Int32Array.from([2, 3, 8, 1]),
      Int32Array.from([1, 5, 7, 1]),
      Int32Array.from([1, 3, 9, 1])
    ];
    return RSS14Reader2;
  }(AbstractRSSReader_default)
);
var RSS14Reader_default = RSS14Reader;

// node_modules/@zxing/library/esm/core/oned/MultiFormatOneDReader.js
var __extends51 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MultiFormatOneDReader = (
  /** @class */
  function(_super) {
    __extends51(MultiFormatOneDReader2, _super);
    function MultiFormatOneDReader2(hints) {
      var _this = _super.call(this) || this;
      _this.readers = [];
      var possibleFormats = !hints ? null : hints.get(DecodeHintType_default.POSSIBLE_FORMATS);
      var useCode39CheckDigit = hints && hints.get(DecodeHintType_default.ASSUME_CODE_39_CHECK_DIGIT) !== void 0;
      var useCode39ExtendedMode = hints && hints.get(DecodeHintType_default.ENABLE_CODE_39_EXTENDED_MODE) !== void 0;
      if (possibleFormats) {
        if (possibleFormats.includes(BarcodeFormat_default.EAN_13) || possibleFormats.includes(BarcodeFormat_default.UPC_A) || possibleFormats.includes(BarcodeFormat_default.EAN_8) || possibleFormats.includes(BarcodeFormat_default.UPC_E)) {
          _this.readers.push(new MultiFormatUPCEANReader_default(hints));
        }
        if (possibleFormats.includes(BarcodeFormat_default.CODE_39)) {
          _this.readers.push(new Code39Reader_default(useCode39CheckDigit, useCode39ExtendedMode));
        }
        if (possibleFormats.includes(BarcodeFormat_default.CODE_93)) {
          _this.readers.push(new Code93Reader_default());
        }
        if (possibleFormats.includes(BarcodeFormat_default.CODE_128)) {
          _this.readers.push(new Code128Reader_default());
        }
        if (possibleFormats.includes(BarcodeFormat_default.ITF)) {
          _this.readers.push(new ITFReader_default());
        }
        if (possibleFormats.includes(BarcodeFormat_default.CODABAR)) {
          _this.readers.push(new CodaBarReader_default());
        }
        if (possibleFormats.includes(BarcodeFormat_default.RSS_14)) {
          _this.readers.push(new RSS14Reader_default());
        }
        if (possibleFormats.includes(BarcodeFormat_default.RSS_EXPANDED)) {
          console.warn("RSS Expanded reader IS NOT ready for production yet! use at your own risk.");
          _this.readers.push(new RSSExpandedReader_default());
        }
      }
      if (_this.readers.length === 0) {
        _this.readers.push(new MultiFormatUPCEANReader_default(hints));
        _this.readers.push(new Code39Reader_default());
        _this.readers.push(new Code93Reader_default());
        _this.readers.push(new MultiFormatUPCEANReader_default(hints));
        _this.readers.push(new Code128Reader_default());
        _this.readers.push(new ITFReader_default());
        _this.readers.push(new RSS14Reader_default());
      }
      return _this;
    }
    MultiFormatOneDReader2.prototype.decodeRow = function(rowNumber, row, hints) {
      for (var i = 0; i < this.readers.length; i++) {
        try {
          return this.readers[i].decodeRow(rowNumber, row, hints);
        } catch (re) {
        }
      }
      throw new NotFoundException_default();
    };
    MultiFormatOneDReader2.prototype.reset = function() {
      this.readers.forEach(function(reader) {
        return reader.reset();
      });
    };
    return MultiFormatOneDReader2;
  }(OneDReader_default)
);
var MultiFormatOneDReader_default = MultiFormatOneDReader;

// node_modules/@zxing/library/esm/browser/BrowserBarcodeReader.js
var __extends52 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserBarcodeReader = (
  /** @class */
  function(_super) {
    __extends52(BrowserBarcodeReader2, _super);
    function BrowserBarcodeReader2(timeBetweenScansMillis, hints) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      return _super.call(this, new MultiFormatOneDReader_default(hints), timeBetweenScansMillis, hints) || this;
    }
    return BrowserBarcodeReader2;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/core/datamatrix/decoder/Version.js
var __values18 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ECBlocks = (
  /** @class */
  function() {
    function ECBlocks3(ecCodewords, ecBlocks1, ecBlocks2) {
      this.ecCodewords = ecCodewords;
      this.ecBlocks = [ecBlocks1];
      ecBlocks2 && this.ecBlocks.push(ecBlocks2);
    }
    ECBlocks3.prototype.getECCodewords = function() {
      return this.ecCodewords;
    };
    ECBlocks3.prototype.getECBlocks = function() {
      return this.ecBlocks;
    };
    return ECBlocks3;
  }()
);
var ECB = (
  /** @class */
  function() {
    function ECB3(count, dataCodewords) {
      this.count = count;
      this.dataCodewords = dataCodewords;
    }
    ECB3.prototype.getCount = function() {
      return this.count;
    };
    ECB3.prototype.getDataCodewords = function() {
      return this.dataCodewords;
    };
    return ECB3;
  }()
);
var Version = (
  /** @class */
  function() {
    function Version3(versionNumber, symbolSizeRows, symbolSizeColumns, dataRegionSizeRows, dataRegionSizeColumns, ecBlocks) {
      var e_1, _a2;
      this.versionNumber = versionNumber;
      this.symbolSizeRows = symbolSizeRows;
      this.symbolSizeColumns = symbolSizeColumns;
      this.dataRegionSizeRows = dataRegionSizeRows;
      this.dataRegionSizeColumns = dataRegionSizeColumns;
      this.ecBlocks = ecBlocks;
      var total = 0;
      var ecCodewords = ecBlocks.getECCodewords();
      var ecbArray = ecBlocks.getECBlocks();
      try {
        for (var ecbArray_1 = __values18(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {
          var ecBlock = ecbArray_1_1.value;
          total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (ecbArray_1_1 && !ecbArray_1_1.done && (_a2 = ecbArray_1.return)) _a2.call(ecbArray_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      this.totalCodewords = total;
    }
    Version3.prototype.getVersionNumber = function() {
      return this.versionNumber;
    };
    Version3.prototype.getSymbolSizeRows = function() {
      return this.symbolSizeRows;
    };
    Version3.prototype.getSymbolSizeColumns = function() {
      return this.symbolSizeColumns;
    };
    Version3.prototype.getDataRegionSizeRows = function() {
      return this.dataRegionSizeRows;
    };
    Version3.prototype.getDataRegionSizeColumns = function() {
      return this.dataRegionSizeColumns;
    };
    Version3.prototype.getTotalCodewords = function() {
      return this.totalCodewords;
    };
    Version3.prototype.getECBlocks = function() {
      return this.ecBlocks;
    };
    Version3.getVersionForDimensions = function(numRows, numColumns) {
      var e_2, _a2;
      if ((numRows & 1) !== 0 || (numColumns & 1) !== 0) {
        throw new FormatException_default();
      }
      try {
        for (var _b = __values18(Version3.VERSIONS), _c = _b.next(); !_c.done; _c = _b.next()) {
          var version = _c.value;
          if (version.symbolSizeRows === numRows && version.symbolSizeColumns === numColumns) {
            return version;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      throw new FormatException_default();
    };
    Version3.prototype.toString = function() {
      return "" + this.versionNumber;
    };
    Version3.buildVersions = function() {
      return [
        new Version3(1, 10, 10, 8, 8, new ECBlocks(5, new ECB(1, 3))),
        new Version3(2, 12, 12, 10, 10, new ECBlocks(7, new ECB(1, 5))),
        new Version3(3, 14, 14, 12, 12, new ECBlocks(10, new ECB(1, 8))),
        new Version3(4, 16, 16, 14, 14, new ECBlocks(12, new ECB(1, 12))),
        new Version3(5, 18, 18, 16, 16, new ECBlocks(14, new ECB(1, 18))),
        new Version3(6, 20, 20, 18, 18, new ECBlocks(18, new ECB(1, 22))),
        new Version3(7, 22, 22, 20, 20, new ECBlocks(20, new ECB(1, 30))),
        new Version3(8, 24, 24, 22, 22, new ECBlocks(24, new ECB(1, 36))),
        new Version3(9, 26, 26, 24, 24, new ECBlocks(28, new ECB(1, 44))),
        new Version3(10, 32, 32, 14, 14, new ECBlocks(36, new ECB(1, 62))),
        new Version3(11, 36, 36, 16, 16, new ECBlocks(42, new ECB(1, 86))),
        new Version3(12, 40, 40, 18, 18, new ECBlocks(48, new ECB(1, 114))),
        new Version3(13, 44, 44, 20, 20, new ECBlocks(56, new ECB(1, 144))),
        new Version3(14, 48, 48, 22, 22, new ECBlocks(68, new ECB(1, 174))),
        new Version3(15, 52, 52, 24, 24, new ECBlocks(42, new ECB(2, 102))),
        new Version3(16, 64, 64, 14, 14, new ECBlocks(56, new ECB(2, 140))),
        new Version3(17, 72, 72, 16, 16, new ECBlocks(36, new ECB(4, 92))),
        new Version3(18, 80, 80, 18, 18, new ECBlocks(48, new ECB(4, 114))),
        new Version3(19, 88, 88, 20, 20, new ECBlocks(56, new ECB(4, 144))),
        new Version3(20, 96, 96, 22, 22, new ECBlocks(68, new ECB(4, 174))),
        new Version3(21, 104, 104, 24, 24, new ECBlocks(56, new ECB(6, 136))),
        new Version3(22, 120, 120, 18, 18, new ECBlocks(68, new ECB(6, 175))),
        new Version3(23, 132, 132, 20, 20, new ECBlocks(62, new ECB(8, 163))),
        new Version3(24, 144, 144, 22, 22, new ECBlocks(62, new ECB(8, 156), new ECB(2, 155))),
        new Version3(25, 8, 18, 6, 16, new ECBlocks(7, new ECB(1, 5))),
        new Version3(26, 8, 32, 6, 14, new ECBlocks(11, new ECB(1, 10))),
        new Version3(27, 12, 26, 10, 24, new ECBlocks(14, new ECB(1, 16))),
        new Version3(28, 12, 36, 10, 16, new ECBlocks(18, new ECB(1, 22))),
        new Version3(29, 16, 36, 14, 16, new ECBlocks(24, new ECB(1, 32))),
        new Version3(30, 16, 48, 14, 22, new ECBlocks(28, new ECB(1, 49)))
      ];
    };
    Version3.VERSIONS = Version3.buildVersions();
    return Version3;
  }()
);
var Version_default = Version;

// node_modules/@zxing/library/esm/core/datamatrix/decoder/BitMatrixParser.js
var BitMatrixParser = (
  /** @class */
  function() {
    function BitMatrixParser3(bitMatrix) {
      var dimension = bitMatrix.getHeight();
      if (dimension < 8 || dimension > 144 || (dimension & 1) !== 0) {
        throw new FormatException_default();
      }
      this.version = BitMatrixParser3.readVersion(bitMatrix);
      this.mappingBitMatrix = this.extractDataRegion(bitMatrix);
      this.readMappingMatrix = new BitMatrix_default(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());
    }
    BitMatrixParser3.prototype.getVersion = function() {
      return this.version;
    };
    BitMatrixParser3.readVersion = function(bitMatrix) {
      var numRows = bitMatrix.getHeight();
      var numColumns = bitMatrix.getWidth();
      return Version_default.getVersionForDimensions(numRows, numColumns);
    };
    BitMatrixParser3.prototype.readCodewords = function() {
      var result = new Int8Array(this.version.getTotalCodewords());
      var resultOffset = 0;
      var row = 4;
      var column = 0;
      var numRows = this.mappingBitMatrix.getHeight();
      var numColumns = this.mappingBitMatrix.getWidth();
      var corner1Read = false;
      var corner2Read = false;
      var corner3Read = false;
      var corner4Read = false;
      do {
        if (row === numRows && column === 0 && !corner1Read) {
          result[resultOffset++] = this.readCorner1(numRows, numColumns) & 255;
          row -= 2;
          column += 2;
          corner1Read = true;
        } else if (row === numRows - 2 && column === 0 && (numColumns & 3) !== 0 && !corner2Read) {
          result[resultOffset++] = this.readCorner2(numRows, numColumns) & 255;
          row -= 2;
          column += 2;
          corner2Read = true;
        } else if (row === numRows + 4 && column === 2 && (numColumns & 7) === 0 && !corner3Read) {
          result[resultOffset++] = this.readCorner3(numRows, numColumns) & 255;
          row -= 2;
          column += 2;
          corner3Read = true;
        } else if (row === numRows - 2 && column === 0 && (numColumns & 7) === 4 && !corner4Read) {
          result[resultOffset++] = this.readCorner4(numRows, numColumns) & 255;
          row -= 2;
          column += 2;
          corner4Read = true;
        } else {
          do {
            if (row < numRows && column >= 0 && !this.readMappingMatrix.get(column, row)) {
              result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 255;
            }
            row -= 2;
            column += 2;
          } while (row >= 0 && column < numColumns);
          row += 1;
          column += 3;
          do {
            if (row >= 0 && column < numColumns && !this.readMappingMatrix.get(column, row)) {
              result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 255;
            }
            row += 2;
            column -= 2;
          } while (row < numRows && column >= 0);
          row += 3;
          column += 1;
        }
      } while (row < numRows || column < numColumns);
      if (resultOffset !== this.version.getTotalCodewords()) {
        throw new FormatException_default();
      }
      return result;
    };
    BitMatrixParser3.prototype.readModule = function(row, column, numRows, numColumns) {
      if (row < 0) {
        row += numRows;
        column += 4 - (numRows + 4 & 7);
      }
      if (column < 0) {
        column += numColumns;
        row += 4 - (numColumns + 4 & 7);
      }
      this.readMappingMatrix.set(column, row);
      return this.mappingBitMatrix.get(column, row);
    };
    BitMatrixParser3.prototype.readUtah = function(row, column, numRows, numColumns) {
      var currentByte = 0;
      if (this.readModule(row - 2, column - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row - 2, column - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row - 1, column - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row - 1, column - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row - 1, column, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row, column - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row, column - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(row, column, numRows, numColumns)) {
        currentByte |= 1;
      }
      return currentByte;
    };
    BitMatrixParser3.prototype.readCorner1 = function(numRows, numColumns) {
      var currentByte = 0;
      if (this.readModule(numRows - 1, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 1, 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 1, 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(2, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(3, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      return currentByte;
    };
    BitMatrixParser3.prototype.readCorner2 = function(numRows, numColumns) {
      var currentByte = 0;
      if (this.readModule(numRows - 3, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 2, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 1, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 4, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 3, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      return currentByte;
    };
    BitMatrixParser3.prototype.readCorner3 = function(numRows, numColumns) {
      var currentByte = 0;
      if (this.readModule(numRows - 1, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 1, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 3, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 3, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      return currentByte;
    };
    BitMatrixParser3.prototype.readCorner4 = function(numRows, numColumns) {
      var currentByte = 0;
      if (this.readModule(numRows - 3, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 2, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(numRows - 1, 0, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 2, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(0, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(1, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(2, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      currentByte <<= 1;
      if (this.readModule(3, numColumns - 1, numRows, numColumns)) {
        currentByte |= 1;
      }
      return currentByte;
    };
    BitMatrixParser3.prototype.extractDataRegion = function(bitMatrix) {
      var symbolSizeRows = this.version.getSymbolSizeRows();
      var symbolSizeColumns = this.version.getSymbolSizeColumns();
      if (bitMatrix.getHeight() !== symbolSizeRows) {
        throw new IllegalArgumentException_default("Dimension of bitMatrix must match the version size");
      }
      var dataRegionSizeRows = this.version.getDataRegionSizeRows();
      var dataRegionSizeColumns = this.version.getDataRegionSizeColumns();
      var numDataRegionsRow = symbolSizeRows / dataRegionSizeRows | 0;
      var numDataRegionsColumn = symbolSizeColumns / dataRegionSizeColumns | 0;
      var sizeDataRegionRow = numDataRegionsRow * dataRegionSizeRows;
      var sizeDataRegionColumn = numDataRegionsColumn * dataRegionSizeColumns;
      var bitMatrixWithoutAlignment = new BitMatrix_default(sizeDataRegionColumn, sizeDataRegionRow);
      for (var dataRegionRow = 0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {
        var dataRegionRowOffset = dataRegionRow * dataRegionSizeRows;
        for (var dataRegionColumn = 0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {
          var dataRegionColumnOffset = dataRegionColumn * dataRegionSizeColumns;
          for (var i = 0; i < dataRegionSizeRows; ++i) {
            var readRowOffset = dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;
            var writeRowOffset = dataRegionRowOffset + i;
            for (var j = 0; j < dataRegionSizeColumns; ++j) {
              var readColumnOffset = dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;
              if (bitMatrix.get(readColumnOffset, readRowOffset)) {
                var writeColumnOffset = dataRegionColumnOffset + j;
                bitMatrixWithoutAlignment.set(writeColumnOffset, writeRowOffset);
              }
            }
          }
        }
      }
      return bitMatrixWithoutAlignment;
    };
    return BitMatrixParser3;
  }()
);
var BitMatrixParser_default = BitMatrixParser;

// node_modules/@zxing/library/esm/core/datamatrix/decoder/DataBlock.js
var __values19 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DataBlock = (
  /** @class */
  function() {
    function DataBlock3(numDataCodewords, codewords) {
      this.numDataCodewords = numDataCodewords;
      this.codewords = codewords;
    }
    DataBlock3.getDataBlocks = function(rawCodewords, version) {
      var e_1, _a2, e_2, _b;
      var ecBlocks = version.getECBlocks();
      var totalBlocks = 0;
      var ecBlockArray = ecBlocks.getECBlocks();
      try {
        for (var ecBlockArray_1 = __values19(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {
          var ecBlock = ecBlockArray_1_1.value;
          totalBlocks += ecBlock.getCount();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a2 = ecBlockArray_1.return)) _a2.call(ecBlockArray_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var result = new Array(totalBlocks);
      var numResultBlocks = 0;
      try {
        for (var ecBlockArray_2 = __values19(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {
          var ecBlock = ecBlockArray_2_1.value;
          for (var i = 0; i < ecBlock.getCount(); i++) {
            var numDataCodewords = ecBlock.getDataCodewords();
            var numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;
            result[numResultBlocks++] = new DataBlock3(numDataCodewords, new Uint8Array(numBlockCodewords));
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      var longerBlocksTotalCodewords = result[0].codewords.length;
      var longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();
      var shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1;
      var rawCodewordsOffset = 0;
      for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {
        for (var j = 0; j < numResultBlocks; j++) {
          result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];
        }
      }
      var specialVersion = version.getVersionNumber() === 24;
      var numLongerBlocks = specialVersion ? 8 : numResultBlocks;
      for (var j = 0; j < numLongerBlocks; j++) {
        result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];
      }
      var max = result[0].codewords.length;
      for (var i = longerBlocksNumDataCodewords; i < max; i++) {
        for (var j = 0; j < numResultBlocks; j++) {
          var jOffset = specialVersion ? (j + 8) % numResultBlocks : j;
          var iOffset = specialVersion && jOffset > 7 ? i - 1 : i;
          result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];
        }
      }
      if (rawCodewordsOffset !== rawCodewords.length) {
        throw new IllegalArgumentException_default();
      }
      return result;
    };
    DataBlock3.prototype.getNumDataCodewords = function() {
      return this.numDataCodewords;
    };
    DataBlock3.prototype.getCodewords = function() {
      return this.codewords;
    };
    return DataBlock3;
  }()
);
var DataBlock_default = DataBlock;

// node_modules/@zxing/library/esm/core/common/BitSource.js
var BitSource = (
  /** @class */
  function() {
    function BitSource2(bytes) {
      this.bytes = bytes;
      this.byteOffset = 0;
      this.bitOffset = 0;
    }
    BitSource2.prototype.getBitOffset = function() {
      return this.bitOffset;
    };
    BitSource2.prototype.getByteOffset = function() {
      return this.byteOffset;
    };
    BitSource2.prototype.readBits = function(numBits) {
      if (numBits < 1 || numBits > 32 || numBits > this.available()) {
        throw new IllegalArgumentException_default("" + numBits);
      }
      var result = 0;
      var bitOffset = this.bitOffset;
      var byteOffset = this.byteOffset;
      var bytes = this.bytes;
      if (bitOffset > 0) {
        var bitsLeft = 8 - bitOffset;
        var toRead = numBits < bitsLeft ? numBits : bitsLeft;
        var bitsToNotRead = bitsLeft - toRead;
        var mask = 255 >> 8 - toRead << bitsToNotRead;
        result = (bytes[byteOffset] & mask) >> bitsToNotRead;
        numBits -= toRead;
        bitOffset += toRead;
        if (bitOffset === 8) {
          bitOffset = 0;
          byteOffset++;
        }
      }
      if (numBits > 0) {
        while (numBits >= 8) {
          result = result << 8 | bytes[byteOffset] & 255;
          byteOffset++;
          numBits -= 8;
        }
        if (numBits > 0) {
          var bitsToNotRead = 8 - numBits;
          var mask = 255 >> bitsToNotRead << bitsToNotRead;
          result = result << numBits | (bytes[byteOffset] & mask) >> bitsToNotRead;
          bitOffset += numBits;
        }
      }
      this.bitOffset = bitOffset;
      this.byteOffset = byteOffset;
      return result;
    };
    BitSource2.prototype.available = function() {
      return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
    };
    return BitSource2;
  }()
);
var BitSource_default = BitSource;

// node_modules/@zxing/library/esm/core/datamatrix/decoder/DecodedBitStreamParser.js
var Mode;
(function(Mode5) {
  Mode5[Mode5["PAD_ENCODE"] = 0] = "PAD_ENCODE";
  Mode5[Mode5["ASCII_ENCODE"] = 1] = "ASCII_ENCODE";
  Mode5[Mode5["C40_ENCODE"] = 2] = "C40_ENCODE";
  Mode5[Mode5["TEXT_ENCODE"] = 3] = "TEXT_ENCODE";
  Mode5[Mode5["ANSIX12_ENCODE"] = 4] = "ANSIX12_ENCODE";
  Mode5[Mode5["EDIFACT_ENCODE"] = 5] = "EDIFACT_ENCODE";
  Mode5[Mode5["BASE256_ENCODE"] = 6] = "BASE256_ENCODE";
})(Mode || (Mode = {}));
var DecodedBitStreamParser = (
  /** @class */
  function() {
    function DecodedBitStreamParser4() {
    }
    DecodedBitStreamParser4.decode = function(bytes) {
      var bits = new BitSource_default(bytes);
      var result = new StringBuilder_default();
      var resultTrailer = new StringBuilder_default();
      var byteSegments = new Array();
      var mode = Mode.ASCII_ENCODE;
      do {
        if (mode === Mode.ASCII_ENCODE) {
          mode = this.decodeAsciiSegment(bits, result, resultTrailer);
        } else {
          switch (mode) {
            case Mode.C40_ENCODE:
              this.decodeC40Segment(bits, result);
              break;
            case Mode.TEXT_ENCODE:
              this.decodeTextSegment(bits, result);
              break;
            case Mode.ANSIX12_ENCODE:
              this.decodeAnsiX12Segment(bits, result);
              break;
            case Mode.EDIFACT_ENCODE:
              this.decodeEdifactSegment(bits, result);
              break;
            case Mode.BASE256_ENCODE:
              this.decodeBase256Segment(bits, result, byteSegments);
              break;
            default:
              throw new FormatException_default();
          }
          mode = Mode.ASCII_ENCODE;
        }
      } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);
      if (resultTrailer.length() > 0) {
        result.append(resultTrailer.toString());
      }
      return new DecoderResult_default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);
    };
    DecodedBitStreamParser4.decodeAsciiSegment = function(bits, result, resultTrailer) {
      var upperShift = false;
      do {
        var oneByte = bits.readBits(8);
        if (oneByte === 0) {
          throw new FormatException_default();
        } else if (oneByte <= 128) {
          if (upperShift) {
            oneByte += 128;
          }
          result.append(String.fromCharCode(oneByte - 1));
          return Mode.ASCII_ENCODE;
        } else if (oneByte === 129) {
          return Mode.PAD_ENCODE;
        } else if (oneByte <= 229) {
          var value = oneByte - 130;
          if (value < 10) {
            result.append("0");
          }
          result.append("" + value);
        } else {
          switch (oneByte) {
            case 230:
              return Mode.C40_ENCODE;
            case 231:
              return Mode.BASE256_ENCODE;
            case 232:
              result.append(String.fromCharCode(29));
              break;
            case 233:
            case 234:
              break;
            case 235:
              upperShift = true;
              break;
            case 236:
              result.append("[)>05");
              resultTrailer.insert(0, "");
              break;
            case 237:
              result.append("[)>06");
              resultTrailer.insert(0, "");
              break;
            case 238:
              return Mode.ANSIX12_ENCODE;
            case 239:
              return Mode.TEXT_ENCODE;
            case 240:
              return Mode.EDIFACT_ENCODE;
            case 241:
              break;
            default:
              if (oneByte !== 254 || bits.available() !== 0) {
                throw new FormatException_default();
              }
              break;
          }
        }
      } while (bits.available() > 0);
      return Mode.ASCII_ENCODE;
    };
    DecodedBitStreamParser4.decodeC40Segment = function(bits, result) {
      var upperShift = false;
      var cValues = [];
      var shift = 0;
      do {
        if (bits.available() === 8) {
          return;
        }
        var firstByte = bits.readBits(8);
        if (firstByte === 254) {
          return;
        }
        this.parseTwoBytes(firstByte, bits.readBits(8), cValues);
        for (var i = 0; i < 3; i++) {
          var cValue = cValues[i];
          switch (shift) {
            case 0:
              if (cValue < 3) {
                shift = cValue + 1;
              } else if (cValue < this.C40_BASIC_SET_CHARS.length) {
                var c40char = this.C40_BASIC_SET_CHARS[cValue];
                if (upperShift) {
                  result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));
                  upperShift = false;
                } else {
                  result.append(c40char);
                }
              } else {
                throw new FormatException_default();
              }
              break;
            case 1:
              if (upperShift) {
                result.append(String.fromCharCode(cValue + 128));
                upperShift = false;
              } else {
                result.append(String.fromCharCode(cValue));
              }
              shift = 0;
              break;
            case 2:
              if (cValue < this.C40_SHIFT2_SET_CHARS.length) {
                var c40char = this.C40_SHIFT2_SET_CHARS[cValue];
                if (upperShift) {
                  result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));
                  upperShift = false;
                } else {
                  result.append(c40char);
                }
              } else {
                switch (cValue) {
                  case 27:
                    result.append(String.fromCharCode(29));
                    break;
                  case 30:
                    upperShift = true;
                    break;
                  default:
                    throw new FormatException_default();
                }
              }
              shift = 0;
              break;
            case 3:
              if (upperShift) {
                result.append(String.fromCharCode(cValue + 224));
                upperShift = false;
              } else {
                result.append(String.fromCharCode(cValue + 96));
              }
              shift = 0;
              break;
            default:
              throw new FormatException_default();
          }
        }
      } while (bits.available() > 0);
    };
    DecodedBitStreamParser4.decodeTextSegment = function(bits, result) {
      var upperShift = false;
      var cValues = [];
      var shift = 0;
      do {
        if (bits.available() === 8) {
          return;
        }
        var firstByte = bits.readBits(8);
        if (firstByte === 254) {
          return;
        }
        this.parseTwoBytes(firstByte, bits.readBits(8), cValues);
        for (var i = 0; i < 3; i++) {
          var cValue = cValues[i];
          switch (shift) {
            case 0:
              if (cValue < 3) {
                shift = cValue + 1;
              } else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {
                var textChar = this.TEXT_BASIC_SET_CHARS[cValue];
                if (upperShift) {
                  result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));
                  upperShift = false;
                } else {
                  result.append(textChar);
                }
              } else {
                throw new FormatException_default();
              }
              break;
            case 1:
              if (upperShift) {
                result.append(String.fromCharCode(cValue + 128));
                upperShift = false;
              } else {
                result.append(String.fromCharCode(cValue));
              }
              shift = 0;
              break;
            case 2:
              if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {
                var textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];
                if (upperShift) {
                  result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));
                  upperShift = false;
                } else {
                  result.append(textChar);
                }
              } else {
                switch (cValue) {
                  case 27:
                    result.append(String.fromCharCode(29));
                    break;
                  case 30:
                    upperShift = true;
                    break;
                  default:
                    throw new FormatException_default();
                }
              }
              shift = 0;
              break;
            case 3:
              if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {
                var textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];
                if (upperShift) {
                  result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));
                  upperShift = false;
                } else {
                  result.append(textChar);
                }
                shift = 0;
              } else {
                throw new FormatException_default();
              }
              break;
            default:
              throw new FormatException_default();
          }
        }
      } while (bits.available() > 0);
    };
    DecodedBitStreamParser4.decodeAnsiX12Segment = function(bits, result) {
      var cValues = [];
      do {
        if (bits.available() === 8) {
          return;
        }
        var firstByte = bits.readBits(8);
        if (firstByte === 254) {
          return;
        }
        this.parseTwoBytes(firstByte, bits.readBits(8), cValues);
        for (var i = 0; i < 3; i++) {
          var cValue = cValues[i];
          switch (cValue) {
            case 0:
              result.append("\r");
              break;
            case 1:
              result.append("*");
              break;
            case 2:
              result.append(">");
              break;
            case 3:
              result.append(" ");
              break;
            default:
              if (cValue < 14) {
                result.append(String.fromCharCode(cValue + 44));
              } else if (cValue < 40) {
                result.append(String.fromCharCode(cValue + 51));
              } else {
                throw new FormatException_default();
              }
              break;
          }
        }
      } while (bits.available() > 0);
    };
    DecodedBitStreamParser4.parseTwoBytes = function(firstByte, secondByte, result) {
      var fullBitValue = (firstByte << 8) + secondByte - 1;
      var temp = Math.floor(fullBitValue / 1600);
      result[0] = temp;
      fullBitValue -= temp * 1600;
      temp = Math.floor(fullBitValue / 40);
      result[1] = temp;
      result[2] = fullBitValue - temp * 40;
    };
    DecodedBitStreamParser4.decodeEdifactSegment = function(bits, result) {
      do {
        if (bits.available() <= 16) {
          return;
        }
        for (var i = 0; i < 4; i++) {
          var edifactValue = bits.readBits(6);
          if (edifactValue === 31) {
            var bitsLeft = 8 - bits.getBitOffset();
            if (bitsLeft !== 8) {
              bits.readBits(bitsLeft);
            }
            return;
          }
          if ((edifactValue & 32) === 0) {
            edifactValue |= 64;
          }
          result.append(String.fromCharCode(edifactValue));
        }
      } while (bits.available() > 0);
    };
    DecodedBitStreamParser4.decodeBase256Segment = function(bits, result, byteSegments) {
      var codewordPosition = 1 + bits.getByteOffset();
      var d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);
      var count;
      if (d1 === 0) {
        count = bits.available() / 8 | 0;
      } else if (d1 < 250) {
        count = d1;
      } else {
        count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);
      }
      if (count < 0) {
        throw new FormatException_default();
      }
      var bytes = new Uint8Array(count);
      for (var i = 0; i < count; i++) {
        if (bits.available() < 8) {
          throw new FormatException_default();
        }
        bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);
      }
      byteSegments.push(bytes);
      try {
        result.append(StringEncoding_default.decode(bytes, StringUtils_default.ISO88591));
      } catch (uee) {
        throw new IllegalStateException_default("Platform does not support required encoding: " + uee.message);
      }
    };
    DecodedBitStreamParser4.unrandomize255State = function(randomizedBase256Codeword, base256CodewordPosition) {
      var pseudoRandomNumber = 149 * base256CodewordPosition % 255 + 1;
      var tempVariable = randomizedBase256Codeword - pseudoRandomNumber;
      return tempVariable >= 0 ? tempVariable : tempVariable + 256;
    };
    DecodedBitStreamParser4.C40_BASIC_SET_CHARS = [
      "*",
      "*",
      "*",
      " ",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z"
    ];
    DecodedBitStreamParser4.C40_SHIFT2_SET_CHARS = [
      "!",
      '"',
      "#",
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "?",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_"
    ];
    DecodedBitStreamParser4.TEXT_BASIC_SET_CHARS = [
      "*",
      "*",
      "*",
      " ",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z"
    ];
    DecodedBitStreamParser4.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser4.C40_SHIFT2_SET_CHARS;
    DecodedBitStreamParser4.TEXT_SHIFT3_SET_CHARS = [
      "`",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "{",
      "|",
      "}",
      "~",
      String.fromCharCode(127)
    ];
    return DecodedBitStreamParser4;
  }()
);
var DecodedBitStreamParser_default = DecodedBitStreamParser;

// node_modules/@zxing/library/esm/core/datamatrix/decoder/Decoder.js
var __values20 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Decoder2 = (
  /** @class */
  function() {
    function Decoder4() {
      this.rsDecoder = new ReedSolomonDecoder_default(GenericGF_default.DATA_MATRIX_FIELD_256);
    }
    Decoder4.prototype.decode = function(bits) {
      var e_1, _a2;
      var parser = new BitMatrixParser_default(bits);
      var version = parser.getVersion();
      var codewords = parser.readCodewords();
      var dataBlocks = DataBlock_default.getDataBlocks(codewords, version);
      var totalBytes = 0;
      try {
        for (var dataBlocks_1 = __values20(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {
          var db = dataBlocks_1_1.value;
          totalBytes += db.getNumDataCodewords();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a2 = dataBlocks_1.return)) _a2.call(dataBlocks_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var resultBytes = new Uint8Array(totalBytes);
      var dataBlocksCount = dataBlocks.length;
      for (var j = 0; j < dataBlocksCount; j++) {
        var dataBlock = dataBlocks[j];
        var codewordBytes = dataBlock.getCodewords();
        var numDataCodewords = dataBlock.getNumDataCodewords();
        this.correctErrors(codewordBytes, numDataCodewords);
        for (var i = 0; i < numDataCodewords; i++) {
          resultBytes[i * dataBlocksCount + j] = codewordBytes[i];
        }
      }
      return DecodedBitStreamParser_default.decode(resultBytes);
    };
    Decoder4.prototype.correctErrors = function(codewordBytes, numDataCodewords) {
      var codewordsInts = new Int32Array(codewordBytes);
      try {
        this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);
      } catch (ignored) {
        throw new ChecksumException_default();
      }
      for (var i = 0; i < numDataCodewords; i++) {
        codewordBytes[i] = codewordsInts[i];
      }
    };
    return Decoder4;
  }()
);
var Decoder_default2 = Decoder2;

// node_modules/@zxing/library/esm/core/datamatrix/detector/Detector.js
var Detector2 = (
  /** @class */
  function() {
    function Detector5(image) {
      this.image = image;
      this.rectangleDetector = new WhiteRectangleDetector_default(this.image);
    }
    Detector5.prototype.detect = function() {
      var cornerPoints = this.rectangleDetector.detect();
      var points = this.detectSolid1(cornerPoints);
      points = this.detectSolid2(points);
      points[3] = this.correctTopRight(points);
      if (!points[3]) {
        throw new NotFoundException_default();
      }
      points = this.shiftToModuleCenter(points);
      var topLeft = points[0];
      var bottomLeft = points[1];
      var bottomRight = points[2];
      var topRight = points[3];
      var dimensionTop = this.transitionsBetween(topLeft, topRight) + 1;
      var dimensionRight = this.transitionsBetween(bottomRight, topRight) + 1;
      if ((dimensionTop & 1) === 1) {
        dimensionTop += 1;
      }
      if ((dimensionRight & 1) === 1) {
        dimensionRight += 1;
      }
      if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {
        dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);
      }
      var bits = Detector5.sampleGrid(this.image, topLeft, bottomLeft, bottomRight, topRight, dimensionTop, dimensionRight);
      return new DetectorResult_default(bits, [topLeft, bottomLeft, bottomRight, topRight]);
    };
    Detector5.shiftPoint = function(point, to, div) {
      var x = (to.getX() - point.getX()) / (div + 1);
      var y = (to.getY() - point.getY()) / (div + 1);
      return new ResultPoint_default(point.getX() + x, point.getY() + y);
    };
    Detector5.moveAway = function(point, fromX, fromY) {
      var x = point.getX();
      var y = point.getY();
      if (x < fromX) {
        x -= 1;
      } else {
        x += 1;
      }
      if (y < fromY) {
        y -= 1;
      } else {
        y += 1;
      }
      return new ResultPoint_default(x, y);
    };
    Detector5.prototype.detectSolid1 = function(cornerPoints) {
      var pointA = cornerPoints[0];
      var pointB = cornerPoints[1];
      var pointC = cornerPoints[3];
      var pointD = cornerPoints[2];
      var trAB = this.transitionsBetween(pointA, pointB);
      var trBC = this.transitionsBetween(pointB, pointC);
      var trCD = this.transitionsBetween(pointC, pointD);
      var trDA = this.transitionsBetween(pointD, pointA);
      var min = trAB;
      var points = [pointD, pointA, pointB, pointC];
      if (min > trBC) {
        min = trBC;
        points[0] = pointA;
        points[1] = pointB;
        points[2] = pointC;
        points[3] = pointD;
      }
      if (min > trCD) {
        min = trCD;
        points[0] = pointB;
        points[1] = pointC;
        points[2] = pointD;
        points[3] = pointA;
      }
      if (min > trDA) {
        points[0] = pointC;
        points[1] = pointD;
        points[2] = pointA;
        points[3] = pointB;
      }
      return points;
    };
    Detector5.prototype.detectSolid2 = function(points) {
      var pointA = points[0];
      var pointB = points[1];
      var pointC = points[2];
      var pointD = points[3];
      var tr = this.transitionsBetween(pointA, pointD);
      var pointBs = Detector5.shiftPoint(pointB, pointC, (tr + 1) * 4);
      var pointCs = Detector5.shiftPoint(pointC, pointB, (tr + 1) * 4);
      var trBA = this.transitionsBetween(pointBs, pointA);
      var trCD = this.transitionsBetween(pointCs, pointD);
      if (trBA < trCD) {
        points[0] = pointA;
        points[1] = pointB;
        points[2] = pointC;
        points[3] = pointD;
      } else {
        points[0] = pointB;
        points[1] = pointC;
        points[2] = pointD;
        points[3] = pointA;
      }
      return points;
    };
    Detector5.prototype.correctTopRight = function(points) {
      var pointA = points[0];
      var pointB = points[1];
      var pointC = points[2];
      var pointD = points[3];
      var trTop = this.transitionsBetween(pointA, pointD);
      var trRight = this.transitionsBetween(pointB, pointD);
      var pointAs = Detector5.shiftPoint(pointA, pointB, (trRight + 1) * 4);
      var pointCs = Detector5.shiftPoint(pointC, pointB, (trTop + 1) * 4);
      trTop = this.transitionsBetween(pointAs, pointD);
      trRight = this.transitionsBetween(pointCs, pointD);
      var candidate1 = new ResultPoint_default(pointD.getX() + (pointC.getX() - pointB.getX()) / (trTop + 1), pointD.getY() + (pointC.getY() - pointB.getY()) / (trTop + 1));
      var candidate2 = new ResultPoint_default(pointD.getX() + (pointA.getX() - pointB.getX()) / (trRight + 1), pointD.getY() + (pointA.getY() - pointB.getY()) / (trRight + 1));
      if (!this.isValid(candidate1)) {
        if (this.isValid(candidate2)) {
          return candidate2;
        }
        return null;
      }
      if (!this.isValid(candidate2)) {
        return candidate1;
      }
      var sumc1 = this.transitionsBetween(pointAs, candidate1) + this.transitionsBetween(pointCs, candidate1);
      var sumc2 = this.transitionsBetween(pointAs, candidate2) + this.transitionsBetween(pointCs, candidate2);
      if (sumc1 > sumc2) {
        return candidate1;
      } else {
        return candidate2;
      }
    };
    Detector5.prototype.shiftToModuleCenter = function(points) {
      var pointA = points[0];
      var pointB = points[1];
      var pointC = points[2];
      var pointD = points[3];
      var dimH = this.transitionsBetween(pointA, pointD) + 1;
      var dimV = this.transitionsBetween(pointC, pointD) + 1;
      var pointAs = Detector5.shiftPoint(pointA, pointB, dimV * 4);
      var pointCs = Detector5.shiftPoint(pointC, pointB, dimH * 4);
      dimH = this.transitionsBetween(pointAs, pointD) + 1;
      dimV = this.transitionsBetween(pointCs, pointD) + 1;
      if ((dimH & 1) === 1) {
        dimH += 1;
      }
      if ((dimV & 1) === 1) {
        dimV += 1;
      }
      var centerX = (pointA.getX() + pointB.getX() + pointC.getX() + pointD.getX()) / 4;
      var centerY = (pointA.getY() + pointB.getY() + pointC.getY() + pointD.getY()) / 4;
      pointA = Detector5.moveAway(pointA, centerX, centerY);
      pointB = Detector5.moveAway(pointB, centerX, centerY);
      pointC = Detector5.moveAway(pointC, centerX, centerY);
      pointD = Detector5.moveAway(pointD, centerX, centerY);
      var pointBs;
      var pointDs;
      pointAs = Detector5.shiftPoint(pointA, pointB, dimV * 4);
      pointAs = Detector5.shiftPoint(pointAs, pointD, dimH * 4);
      pointBs = Detector5.shiftPoint(pointB, pointA, dimV * 4);
      pointBs = Detector5.shiftPoint(pointBs, pointC, dimH * 4);
      pointCs = Detector5.shiftPoint(pointC, pointD, dimV * 4);
      pointCs = Detector5.shiftPoint(pointCs, pointB, dimH * 4);
      pointDs = Detector5.shiftPoint(pointD, pointC, dimV * 4);
      pointDs = Detector5.shiftPoint(pointDs, pointA, dimH * 4);
      return [pointAs, pointBs, pointCs, pointDs];
    };
    Detector5.prototype.isValid = function(p) {
      return p.getX() >= 0 && p.getX() < this.image.getWidth() && p.getY() > 0 && p.getY() < this.image.getHeight();
    };
    Detector5.sampleGrid = function(image, topLeft, bottomLeft, bottomRight, topRight, dimensionX, dimensionY) {
      var sampler = GridSamplerInstance_default.getInstance();
      return sampler.sampleGrid(image, dimensionX, dimensionY, 0.5, 0.5, dimensionX - 0.5, 0.5, dimensionX - 0.5, dimensionY - 0.5, 0.5, dimensionY - 0.5, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRight.getX(), bottomRight.getY(), bottomLeft.getX(), bottomLeft.getY());
    };
    Detector5.prototype.transitionsBetween = function(from, to) {
      var fromX = Math.trunc(from.getX());
      var fromY = Math.trunc(from.getY());
      var toX = Math.trunc(to.getX());
      var toY = Math.trunc(to.getY());
      var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);
      if (steep) {
        var temp = fromX;
        fromX = fromY;
        fromY = temp;
        temp = toX;
        toX = toY;
        toY = temp;
      }
      var dx = Math.abs(toX - fromX);
      var dy = Math.abs(toY - fromY);
      var error = -dx / 2;
      var ystep = fromY < toY ? 1 : -1;
      var xstep = fromX < toX ? 1 : -1;
      var transitions = 0;
      var inBlack = this.image.get(steep ? fromY : fromX, steep ? fromX : fromY);
      for (var x = fromX, y = fromY; x !== toX; x += xstep) {
        var isBlack = this.image.get(steep ? y : x, steep ? x : y);
        if (isBlack !== inBlack) {
          transitions++;
          inBlack = isBlack;
        }
        error += dy;
        if (error > 0) {
          if (y === toY) {
            break;
          }
          y += ystep;
          error -= dx;
        }
      }
      return transitions;
    };
    return Detector5;
  }()
);
var Detector_default2 = Detector2;

// node_modules/@zxing/library/esm/core/datamatrix/DataMatrixReader.js
var DataMatrixReader = (
  /** @class */
  function() {
    function DataMatrixReader2() {
      this.decoder = new Decoder_default2();
    }
    DataMatrixReader2.prototype.decode = function(image, hints) {
      if (hints === void 0) {
        hints = null;
      }
      var decoderResult;
      var points;
      if (hints != null && hints.has(DecodeHintType_default.PURE_BARCODE)) {
        var bits = DataMatrixReader2.extractPureBits(image.getBlackMatrix());
        decoderResult = this.decoder.decode(bits);
        points = DataMatrixReader2.NO_POINTS;
      } else {
        var detectorResult = new Detector_default2(image.getBlackMatrix()).detect();
        decoderResult = this.decoder.decode(detectorResult.getBits());
        points = detectorResult.getPoints();
      }
      var rawBytes = decoderResult.getRawBytes();
      var result = new Result_default(decoderResult.getText(), rawBytes, 8 * rawBytes.length, points, BarcodeFormat_default.DATA_MATRIX, System_default.currentTimeMillis());
      var byteSegments = decoderResult.getByteSegments();
      if (byteSegments != null) {
        result.putMetadata(ResultMetadataType_default.BYTE_SEGMENTS, byteSegments);
      }
      var ecLevel = decoderResult.getECLevel();
      if (ecLevel != null) {
        result.putMetadata(ResultMetadataType_default.ERROR_CORRECTION_LEVEL, ecLevel);
      }
      return result;
    };
    DataMatrixReader2.prototype.reset = function() {
    };
    DataMatrixReader2.extractPureBits = function(image) {
      var leftTopBlack = image.getTopLeftOnBit();
      var rightBottomBlack = image.getBottomRightOnBit();
      if (leftTopBlack == null || rightBottomBlack == null) {
        throw new NotFoundException_default();
      }
      var moduleSize = this.moduleSize(leftTopBlack, image);
      var top = leftTopBlack[1];
      var bottom = rightBottomBlack[1];
      var left = leftTopBlack[0];
      var right = rightBottomBlack[0];
      var matrixWidth = (right - left + 1) / moduleSize;
      var matrixHeight = (bottom - top + 1) / moduleSize;
      if (matrixWidth <= 0 || matrixHeight <= 0) {
        throw new NotFoundException_default();
      }
      var nudge = moduleSize / 2;
      top += nudge;
      left += nudge;
      var bits = new BitMatrix_default(matrixWidth, matrixHeight);
      for (var y = 0; y < matrixHeight; y++) {
        var iOffset = top + y * moduleSize;
        for (var x = 0; x < matrixWidth; x++) {
          if (image.get(left + x * moduleSize, iOffset)) {
            bits.set(x, y);
          }
        }
      }
      return bits;
    };
    DataMatrixReader2.moduleSize = function(leftTopBlack, image) {
      var width = image.getWidth();
      var x = leftTopBlack[0];
      var y = leftTopBlack[1];
      while (x < width && image.get(x, y)) {
        x++;
      }
      if (x === width) {
        throw new NotFoundException_default();
      }
      var moduleSize = x - leftTopBlack[0];
      if (moduleSize === 0) {
        throw new NotFoundException_default();
      }
      return moduleSize;
    };
    DataMatrixReader2.NO_POINTS = [];
    return DataMatrixReader2;
  }()
);
var DataMatrixReader_default = DataMatrixReader;

// node_modules/@zxing/library/esm/browser/BrowserDatamatrixCodeReader.js
var __extends53 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserDatamatrixCodeReader = (
  /** @class */
  function(_super) {
    __extends53(BrowserDatamatrixCodeReader3, _super);
    function BrowserDatamatrixCodeReader3(timeBetweenScansMillis) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      return _super.call(this, new DataMatrixReader_default(), timeBetweenScansMillis) || this;
    }
    return BrowserDatamatrixCodeReader3;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/core/qrcode/decoder/ErrorCorrectionLevel.js
var ErrorCorrectionLevelValues;
(function(ErrorCorrectionLevelValues2) {
  ErrorCorrectionLevelValues2[ErrorCorrectionLevelValues2["L"] = 0] = "L";
  ErrorCorrectionLevelValues2[ErrorCorrectionLevelValues2["M"] = 1] = "M";
  ErrorCorrectionLevelValues2[ErrorCorrectionLevelValues2["Q"] = 2] = "Q";
  ErrorCorrectionLevelValues2[ErrorCorrectionLevelValues2["H"] = 3] = "H";
})(ErrorCorrectionLevelValues || (ErrorCorrectionLevelValues = {}));
var ErrorCorrectionLevel = (
  /** @class */
  function() {
    function ErrorCorrectionLevel2(value, stringValue, bits) {
      this.value = value;
      this.stringValue = stringValue;
      this.bits = bits;
      ErrorCorrectionLevel2.FOR_BITS.set(bits, this);
      ErrorCorrectionLevel2.FOR_VALUE.set(value, this);
    }
    ErrorCorrectionLevel2.prototype.getValue = function() {
      return this.value;
    };
    ErrorCorrectionLevel2.prototype.getBits = function() {
      return this.bits;
    };
    ErrorCorrectionLevel2.fromString = function(s) {
      switch (s) {
        case "L":
          return ErrorCorrectionLevel2.L;
        case "M":
          return ErrorCorrectionLevel2.M;
        case "Q":
          return ErrorCorrectionLevel2.Q;
        case "H":
          return ErrorCorrectionLevel2.H;
        default:
          throw new ArgumentException_default(s + "not available");
      }
    };
    ErrorCorrectionLevel2.prototype.toString = function() {
      return this.stringValue;
    };
    ErrorCorrectionLevel2.prototype.equals = function(o) {
      if (!(o instanceof ErrorCorrectionLevel2)) {
        return false;
      }
      var other = o;
      return this.value === other.value;
    };
    ErrorCorrectionLevel2.forBits = function(bits) {
      if (bits < 0 || bits >= ErrorCorrectionLevel2.FOR_BITS.size) {
        throw new IllegalArgumentException_default();
      }
      return ErrorCorrectionLevel2.FOR_BITS.get(bits);
    };
    ErrorCorrectionLevel2.FOR_BITS = /* @__PURE__ */ new Map();
    ErrorCorrectionLevel2.FOR_VALUE = /* @__PURE__ */ new Map();
    ErrorCorrectionLevel2.L = new ErrorCorrectionLevel2(ErrorCorrectionLevelValues.L, "L", 1);
    ErrorCorrectionLevel2.M = new ErrorCorrectionLevel2(ErrorCorrectionLevelValues.M, "M", 0);
    ErrorCorrectionLevel2.Q = new ErrorCorrectionLevel2(ErrorCorrectionLevelValues.Q, "Q", 3);
    ErrorCorrectionLevel2.H = new ErrorCorrectionLevel2(ErrorCorrectionLevelValues.H, "H", 2);
    return ErrorCorrectionLevel2;
  }()
);
var ErrorCorrectionLevel_default = ErrorCorrectionLevel;

// node_modules/@zxing/library/esm/core/qrcode/decoder/FormatInformation.js
var __values21 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var FormatInformation = (
  /** @class */
  function() {
    function FormatInformation2(formatInfo) {
      this.errorCorrectionLevel = ErrorCorrectionLevel_default.forBits(formatInfo >> 3 & 3);
      this.dataMask = /*(byte) */
      formatInfo & 7;
    }
    FormatInformation2.numBitsDiffering = function(a, b) {
      return Integer_default.bitCount(a ^ b);
    };
    FormatInformation2.decodeFormatInformation = function(maskedFormatInfo1, maskedFormatInfo2) {
      var formatInfo = FormatInformation2.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);
      if (formatInfo !== null) {
        return formatInfo;
      }
      return FormatInformation2.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation2.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation2.FORMAT_INFO_MASK_QR);
    };
    FormatInformation2.doDecodeFormatInformation = function(maskedFormatInfo1, maskedFormatInfo2) {
      var e_1, _a2;
      var bestDifference = Number.MAX_SAFE_INTEGER;
      var bestFormatInfo = 0;
      try {
        for (var _b = __values21(FormatInformation2.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {
          var decodeInfo = _c.value;
          var targetInfo = decodeInfo[0];
          if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {
            return new FormatInformation2(decodeInfo[1]);
          }
          var bitsDifference = FormatInformation2.numBitsDiffering(maskedFormatInfo1, targetInfo);
          if (bitsDifference < bestDifference) {
            bestFormatInfo = decodeInfo[1];
            bestDifference = bitsDifference;
          }
          if (maskedFormatInfo1 !== maskedFormatInfo2) {
            bitsDifference = FormatInformation2.numBitsDiffering(maskedFormatInfo2, targetInfo);
            if (bitsDifference < bestDifference) {
              bestFormatInfo = decodeInfo[1];
              bestDifference = bitsDifference;
            }
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (bestDifference <= 3) {
        return new FormatInformation2(bestFormatInfo);
      }
      return null;
    };
    FormatInformation2.prototype.getErrorCorrectionLevel = function() {
      return this.errorCorrectionLevel;
    };
    FormatInformation2.prototype.getDataMask = function() {
      return this.dataMask;
    };
    FormatInformation2.prototype.hashCode = function() {
      return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;
    };
    FormatInformation2.prototype.equals = function(o) {
      if (!(o instanceof FormatInformation2)) {
        return false;
      }
      var other = o;
      return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;
    };
    FormatInformation2.FORMAT_INFO_MASK_QR = 21522;
    FormatInformation2.FORMAT_INFO_DECODE_LOOKUP = [
      Int32Array.from([21522, 0]),
      Int32Array.from([20773, 1]),
      Int32Array.from([24188, 2]),
      Int32Array.from([23371, 3]),
      Int32Array.from([17913, 4]),
      Int32Array.from([16590, 5]),
      Int32Array.from([20375, 6]),
      Int32Array.from([19104, 7]),
      Int32Array.from([30660, 8]),
      Int32Array.from([29427, 9]),
      Int32Array.from([32170, 10]),
      Int32Array.from([30877, 11]),
      Int32Array.from([26159, 12]),
      Int32Array.from([25368, 13]),
      Int32Array.from([27713, 14]),
      Int32Array.from([26998, 15]),
      Int32Array.from([5769, 16]),
      Int32Array.from([5054, 17]),
      Int32Array.from([7399, 18]),
      Int32Array.from([6608, 19]),
      Int32Array.from([1890, 20]),
      Int32Array.from([597, 21]),
      Int32Array.from([3340, 22]),
      Int32Array.from([2107, 23]),
      Int32Array.from([13663, 24]),
      Int32Array.from([12392, 25]),
      Int32Array.from([16177, 26]),
      Int32Array.from([14854, 27]),
      Int32Array.from([9396, 28]),
      Int32Array.from([8579, 29]),
      Int32Array.from([11994, 30]),
      Int32Array.from([11245, 31])
    ];
    return FormatInformation2;
  }()
);
var FormatInformation_default = FormatInformation;

// node_modules/@zxing/library/esm/core/qrcode/decoder/ECBlocks.js
var __values22 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ECBlocks2 = (
  /** @class */
  function() {
    function ECBlocks3(ecCodewordsPerBlock) {
      var ecBlocks = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        ecBlocks[_i - 1] = arguments[_i];
      }
      this.ecCodewordsPerBlock = ecCodewordsPerBlock;
      this.ecBlocks = ecBlocks;
    }
    ECBlocks3.prototype.getECCodewordsPerBlock = function() {
      return this.ecCodewordsPerBlock;
    };
    ECBlocks3.prototype.getNumBlocks = function() {
      var e_1, _a2;
      var total = 0;
      var ecBlocks = this.ecBlocks;
      try {
        for (var ecBlocks_1 = __values22(ecBlocks), ecBlocks_1_1 = ecBlocks_1.next(); !ecBlocks_1_1.done; ecBlocks_1_1 = ecBlocks_1.next()) {
          var ecBlock = ecBlocks_1_1.value;
          total += ecBlock.getCount();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (ecBlocks_1_1 && !ecBlocks_1_1.done && (_a2 = ecBlocks_1.return)) _a2.call(ecBlocks_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return total;
    };
    ECBlocks3.prototype.getTotalECCodewords = function() {
      return this.ecCodewordsPerBlock * this.getNumBlocks();
    };
    ECBlocks3.prototype.getECBlocks = function() {
      return this.ecBlocks;
    };
    return ECBlocks3;
  }()
);
var ECBlocks_default = ECBlocks2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/ECB.js
var ECB2 = (
  /** @class */
  function() {
    function ECB3(count, dataCodewords) {
      this.count = count;
      this.dataCodewords = dataCodewords;
    }
    ECB3.prototype.getCount = function() {
      return this.count;
    };
    ECB3.prototype.getDataCodewords = function() {
      return this.dataCodewords;
    };
    return ECB3;
  }()
);
var ECB_default = ECB2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/Version.js
var __values23 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Version2 = (
  /** @class */
  function() {
    function Version3(versionNumber, alignmentPatternCenters) {
      var e_1, _a2;
      var ecBlocks = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        ecBlocks[_i - 2] = arguments[_i];
      }
      this.versionNumber = versionNumber;
      this.alignmentPatternCenters = alignmentPatternCenters;
      this.ecBlocks = ecBlocks;
      var total = 0;
      var ecCodewords = ecBlocks[0].getECCodewordsPerBlock();
      var ecbArray = ecBlocks[0].getECBlocks();
      try {
        for (var ecbArray_1 = __values23(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {
          var ecBlock = ecbArray_1_1.value;
          total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (ecbArray_1_1 && !ecbArray_1_1.done && (_a2 = ecbArray_1.return)) _a2.call(ecbArray_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      this.totalCodewords = total;
    }
    Version3.prototype.getVersionNumber = function() {
      return this.versionNumber;
    };
    Version3.prototype.getAlignmentPatternCenters = function() {
      return this.alignmentPatternCenters;
    };
    Version3.prototype.getTotalCodewords = function() {
      return this.totalCodewords;
    };
    Version3.prototype.getDimensionForVersion = function() {
      return 17 + 4 * this.versionNumber;
    };
    Version3.prototype.getECBlocksForLevel = function(ecLevel) {
      return this.ecBlocks[ecLevel.getValue()];
    };
    Version3.getProvisionalVersionForDimension = function(dimension) {
      if (dimension % 4 !== 1) {
        throw new FormatException_default();
      }
      try {
        return this.getVersionForNumber((dimension - 17) / 4);
      } catch (ignored) {
        throw new FormatException_default();
      }
    };
    Version3.getVersionForNumber = function(versionNumber) {
      if (versionNumber < 1 || versionNumber > 40) {
        throw new IllegalArgumentException_default();
      }
      return Version3.VERSIONS[versionNumber - 1];
    };
    Version3.decodeVersionInformation = function(versionBits) {
      var bestDifference = Number.MAX_SAFE_INTEGER;
      var bestVersion = 0;
      for (var i = 0; i < Version3.VERSION_DECODE_INFO.length; i++) {
        var targetVersion = Version3.VERSION_DECODE_INFO[i];
        if (targetVersion === versionBits) {
          return Version3.getVersionForNumber(i + 7);
        }
        var bitsDifference = FormatInformation_default.numBitsDiffering(versionBits, targetVersion);
        if (bitsDifference < bestDifference) {
          bestVersion = i + 7;
          bestDifference = bitsDifference;
        }
      }
      if (bestDifference <= 3) {
        return Version3.getVersionForNumber(bestVersion);
      }
      return null;
    };
    Version3.prototype.buildFunctionPattern = function() {
      var dimension = this.getDimensionForVersion();
      var bitMatrix = new BitMatrix_default(dimension);
      bitMatrix.setRegion(0, 0, 9, 9);
      bitMatrix.setRegion(dimension - 8, 0, 8, 9);
      bitMatrix.setRegion(0, dimension - 8, 9, 8);
      var max = this.alignmentPatternCenters.length;
      for (var x = 0; x < max; x++) {
        var i = this.alignmentPatternCenters[x] - 2;
        for (var y = 0; y < max; y++) {
          if (x === 0 && (y === 0 || y === max - 1) || x === max - 1 && y === 0) {
            continue;
          }
          bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);
        }
      }
      bitMatrix.setRegion(6, 9, 1, dimension - 17);
      bitMatrix.setRegion(9, 6, dimension - 17, 1);
      if (this.versionNumber > 6) {
        bitMatrix.setRegion(dimension - 11, 0, 3, 6);
        bitMatrix.setRegion(0, dimension - 11, 6, 3);
      }
      return bitMatrix;
    };
    Version3.prototype.toString = function() {
      return "" + this.versionNumber;
    };
    Version3.VERSION_DECODE_INFO = Int32Array.from([
      31892,
      34236,
      39577,
      42195,
      48118,
      51042,
      55367,
      58893,
      63784,
      68472,
      70749,
      76311,
      79154,
      84390,
      87683,
      92361,
      96236,
      102084,
      102881,
      110507,
      110734,
      117786,
      119615,
      126325,
      127568,
      133589,
      136944,
      141498,
      145311,
      150283,
      152622,
      158308,
      161089,
      167017
    ]);
    Version3.VERSIONS = [
      new Version3(1, new Int32Array(0), new ECBlocks_default(7, new ECB_default(1, 19)), new ECBlocks_default(10, new ECB_default(1, 16)), new ECBlocks_default(13, new ECB_default(1, 13)), new ECBlocks_default(17, new ECB_default(1, 9))),
      new Version3(2, Int32Array.from([6, 18]), new ECBlocks_default(10, new ECB_default(1, 34)), new ECBlocks_default(16, new ECB_default(1, 28)), new ECBlocks_default(22, new ECB_default(1, 22)), new ECBlocks_default(28, new ECB_default(1, 16))),
      new Version3(3, Int32Array.from([6, 22]), new ECBlocks_default(15, new ECB_default(1, 55)), new ECBlocks_default(26, new ECB_default(1, 44)), new ECBlocks_default(18, new ECB_default(2, 17)), new ECBlocks_default(22, new ECB_default(2, 13))),
      new Version3(4, Int32Array.from([6, 26]), new ECBlocks_default(20, new ECB_default(1, 80)), new ECBlocks_default(18, new ECB_default(2, 32)), new ECBlocks_default(26, new ECB_default(2, 24)), new ECBlocks_default(16, new ECB_default(4, 9))),
      new Version3(5, Int32Array.from([6, 30]), new ECBlocks_default(26, new ECB_default(1, 108)), new ECBlocks_default(24, new ECB_default(2, 43)), new ECBlocks_default(18, new ECB_default(2, 15), new ECB_default(2, 16)), new ECBlocks_default(22, new ECB_default(2, 11), new ECB_default(2, 12))),
      new Version3(6, Int32Array.from([6, 34]), new ECBlocks_default(18, new ECB_default(2, 68)), new ECBlocks_default(16, new ECB_default(4, 27)), new ECBlocks_default(24, new ECB_default(4, 19)), new ECBlocks_default(28, new ECB_default(4, 15))),
      new Version3(7, Int32Array.from([6, 22, 38]), new ECBlocks_default(20, new ECB_default(2, 78)), new ECBlocks_default(18, new ECB_default(4, 31)), new ECBlocks_default(18, new ECB_default(2, 14), new ECB_default(4, 15)), new ECBlocks_default(26, new ECB_default(4, 13), new ECB_default(1, 14))),
      new Version3(8, Int32Array.from([6, 24, 42]), new ECBlocks_default(24, new ECB_default(2, 97)), new ECBlocks_default(22, new ECB_default(2, 38), new ECB_default(2, 39)), new ECBlocks_default(22, new ECB_default(4, 18), new ECB_default(2, 19)), new ECBlocks_default(26, new ECB_default(4, 14), new ECB_default(2, 15))),
      new Version3(9, Int32Array.from([6, 26, 46]), new ECBlocks_default(30, new ECB_default(2, 116)), new ECBlocks_default(22, new ECB_default(3, 36), new ECB_default(2, 37)), new ECBlocks_default(20, new ECB_default(4, 16), new ECB_default(4, 17)), new ECBlocks_default(24, new ECB_default(4, 12), new ECB_default(4, 13))),
      new Version3(10, Int32Array.from([6, 28, 50]), new ECBlocks_default(18, new ECB_default(2, 68), new ECB_default(2, 69)), new ECBlocks_default(26, new ECB_default(4, 43), new ECB_default(1, 44)), new ECBlocks_default(24, new ECB_default(6, 19), new ECB_default(2, 20)), new ECBlocks_default(28, new ECB_default(6, 15), new ECB_default(2, 16))),
      new Version3(11, Int32Array.from([6, 30, 54]), new ECBlocks_default(20, new ECB_default(4, 81)), new ECBlocks_default(30, new ECB_default(1, 50), new ECB_default(4, 51)), new ECBlocks_default(28, new ECB_default(4, 22), new ECB_default(4, 23)), new ECBlocks_default(24, new ECB_default(3, 12), new ECB_default(8, 13))),
      new Version3(12, Int32Array.from([6, 32, 58]), new ECBlocks_default(24, new ECB_default(2, 92), new ECB_default(2, 93)), new ECBlocks_default(22, new ECB_default(6, 36), new ECB_default(2, 37)), new ECBlocks_default(26, new ECB_default(4, 20), new ECB_default(6, 21)), new ECBlocks_default(28, new ECB_default(7, 14), new ECB_default(4, 15))),
      new Version3(13, Int32Array.from([6, 34, 62]), new ECBlocks_default(26, new ECB_default(4, 107)), new ECBlocks_default(22, new ECB_default(8, 37), new ECB_default(1, 38)), new ECBlocks_default(24, new ECB_default(8, 20), new ECB_default(4, 21)), new ECBlocks_default(22, new ECB_default(12, 11), new ECB_default(4, 12))),
      new Version3(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks_default(30, new ECB_default(3, 115), new ECB_default(1, 116)), new ECBlocks_default(24, new ECB_default(4, 40), new ECB_default(5, 41)), new ECBlocks_default(20, new ECB_default(11, 16), new ECB_default(5, 17)), new ECBlocks_default(24, new ECB_default(11, 12), new ECB_default(5, 13))),
      new Version3(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks_default(22, new ECB_default(5, 87), new ECB_default(1, 88)), new ECBlocks_default(24, new ECB_default(5, 41), new ECB_default(5, 42)), new ECBlocks_default(30, new ECB_default(5, 24), new ECB_default(7, 25)), new ECBlocks_default(24, new ECB_default(11, 12), new ECB_default(7, 13))),
      new Version3(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks_default(24, new ECB_default(5, 98), new ECB_default(1, 99)), new ECBlocks_default(28, new ECB_default(7, 45), new ECB_default(3, 46)), new ECBlocks_default(24, new ECB_default(15, 19), new ECB_default(2, 20)), new ECBlocks_default(30, new ECB_default(3, 15), new ECB_default(13, 16))),
      new Version3(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks_default(28, new ECB_default(1, 107), new ECB_default(5, 108)), new ECBlocks_default(28, new ECB_default(10, 46), new ECB_default(1, 47)), new ECBlocks_default(28, new ECB_default(1, 22), new ECB_default(15, 23)), new ECBlocks_default(28, new ECB_default(2, 14), new ECB_default(17, 15))),
      new Version3(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks_default(30, new ECB_default(5, 120), new ECB_default(1, 121)), new ECBlocks_default(26, new ECB_default(9, 43), new ECB_default(4, 44)), new ECBlocks_default(28, new ECB_default(17, 22), new ECB_default(1, 23)), new ECBlocks_default(28, new ECB_default(2, 14), new ECB_default(19, 15))),
      new Version3(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks_default(28, new ECB_default(3, 113), new ECB_default(4, 114)), new ECBlocks_default(26, new ECB_default(3, 44), new ECB_default(11, 45)), new ECBlocks_default(26, new ECB_default(17, 21), new ECB_default(4, 22)), new ECBlocks_default(26, new ECB_default(9, 13), new ECB_default(16, 14))),
      new Version3(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks_default(28, new ECB_default(3, 107), new ECB_default(5, 108)), new ECBlocks_default(26, new ECB_default(3, 41), new ECB_default(13, 42)), new ECBlocks_default(30, new ECB_default(15, 24), new ECB_default(5, 25)), new ECBlocks_default(28, new ECB_default(15, 15), new ECB_default(10, 16))),
      new Version3(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks_default(28, new ECB_default(4, 116), new ECB_default(4, 117)), new ECBlocks_default(26, new ECB_default(17, 42)), new ECBlocks_default(28, new ECB_default(17, 22), new ECB_default(6, 23)), new ECBlocks_default(30, new ECB_default(19, 16), new ECB_default(6, 17))),
      new Version3(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks_default(28, new ECB_default(2, 111), new ECB_default(7, 112)), new ECBlocks_default(28, new ECB_default(17, 46)), new ECBlocks_default(30, new ECB_default(7, 24), new ECB_default(16, 25)), new ECBlocks_default(24, new ECB_default(34, 13))),
      new Version3(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks_default(30, new ECB_default(4, 121), new ECB_default(5, 122)), new ECBlocks_default(28, new ECB_default(4, 47), new ECB_default(14, 48)), new ECBlocks_default(30, new ECB_default(11, 24), new ECB_default(14, 25)), new ECBlocks_default(30, new ECB_default(16, 15), new ECB_default(14, 16))),
      new Version3(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks_default(30, new ECB_default(6, 117), new ECB_default(4, 118)), new ECBlocks_default(28, new ECB_default(6, 45), new ECB_default(14, 46)), new ECBlocks_default(30, new ECB_default(11, 24), new ECB_default(16, 25)), new ECBlocks_default(30, new ECB_default(30, 16), new ECB_default(2, 17))),
      new Version3(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks_default(26, new ECB_default(8, 106), new ECB_default(4, 107)), new ECBlocks_default(28, new ECB_default(8, 47), new ECB_default(13, 48)), new ECBlocks_default(30, new ECB_default(7, 24), new ECB_default(22, 25)), new ECBlocks_default(30, new ECB_default(22, 15), new ECB_default(13, 16))),
      new Version3(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks_default(28, new ECB_default(10, 114), new ECB_default(2, 115)), new ECBlocks_default(28, new ECB_default(19, 46), new ECB_default(4, 47)), new ECBlocks_default(28, new ECB_default(28, 22), new ECB_default(6, 23)), new ECBlocks_default(30, new ECB_default(33, 16), new ECB_default(4, 17))),
      new Version3(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks_default(30, new ECB_default(8, 122), new ECB_default(4, 123)), new ECBlocks_default(28, new ECB_default(22, 45), new ECB_default(3, 46)), new ECBlocks_default(30, new ECB_default(8, 23), new ECB_default(26, 24)), new ECBlocks_default(30, new ECB_default(12, 15), new ECB_default(28, 16))),
      new Version3(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks_default(30, new ECB_default(3, 117), new ECB_default(10, 118)), new ECBlocks_default(28, new ECB_default(3, 45), new ECB_default(23, 46)), new ECBlocks_default(30, new ECB_default(4, 24), new ECB_default(31, 25)), new ECBlocks_default(30, new ECB_default(11, 15), new ECB_default(31, 16))),
      new Version3(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks_default(30, new ECB_default(7, 116), new ECB_default(7, 117)), new ECBlocks_default(28, new ECB_default(21, 45), new ECB_default(7, 46)), new ECBlocks_default(30, new ECB_default(1, 23), new ECB_default(37, 24)), new ECBlocks_default(30, new ECB_default(19, 15), new ECB_default(26, 16))),
      new Version3(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks_default(30, new ECB_default(5, 115), new ECB_default(10, 116)), new ECBlocks_default(28, new ECB_default(19, 47), new ECB_default(10, 48)), new ECBlocks_default(30, new ECB_default(15, 24), new ECB_default(25, 25)), new ECBlocks_default(30, new ECB_default(23, 15), new ECB_default(25, 16))),
      new Version3(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks_default(30, new ECB_default(13, 115), new ECB_default(3, 116)), new ECBlocks_default(28, new ECB_default(2, 46), new ECB_default(29, 47)), new ECBlocks_default(30, new ECB_default(42, 24), new ECB_default(1, 25)), new ECBlocks_default(30, new ECB_default(23, 15), new ECB_default(28, 16))),
      new Version3(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks_default(30, new ECB_default(17, 115)), new ECBlocks_default(28, new ECB_default(10, 46), new ECB_default(23, 47)), new ECBlocks_default(30, new ECB_default(10, 24), new ECB_default(35, 25)), new ECBlocks_default(30, new ECB_default(19, 15), new ECB_default(35, 16))),
      new Version3(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks_default(30, new ECB_default(17, 115), new ECB_default(1, 116)), new ECBlocks_default(28, new ECB_default(14, 46), new ECB_default(21, 47)), new ECBlocks_default(30, new ECB_default(29, 24), new ECB_default(19, 25)), new ECBlocks_default(30, new ECB_default(11, 15), new ECB_default(46, 16))),
      new Version3(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks_default(30, new ECB_default(13, 115), new ECB_default(6, 116)), new ECBlocks_default(28, new ECB_default(14, 46), new ECB_default(23, 47)), new ECBlocks_default(30, new ECB_default(44, 24), new ECB_default(7, 25)), new ECBlocks_default(30, new ECB_default(59, 16), new ECB_default(1, 17))),
      new Version3(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks_default(30, new ECB_default(12, 121), new ECB_default(7, 122)), new ECBlocks_default(28, new ECB_default(12, 47), new ECB_default(26, 48)), new ECBlocks_default(30, new ECB_default(39, 24), new ECB_default(14, 25)), new ECBlocks_default(30, new ECB_default(22, 15), new ECB_default(41, 16))),
      new Version3(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks_default(30, new ECB_default(6, 121), new ECB_default(14, 122)), new ECBlocks_default(28, new ECB_default(6, 47), new ECB_default(34, 48)), new ECBlocks_default(30, new ECB_default(46, 24), new ECB_default(10, 25)), new ECBlocks_default(30, new ECB_default(2, 15), new ECB_default(64, 16))),
      new Version3(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks_default(30, new ECB_default(17, 122), new ECB_default(4, 123)), new ECBlocks_default(28, new ECB_default(29, 46), new ECB_default(14, 47)), new ECBlocks_default(30, new ECB_default(49, 24), new ECB_default(10, 25)), new ECBlocks_default(30, new ECB_default(24, 15), new ECB_default(46, 16))),
      new Version3(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks_default(30, new ECB_default(4, 122), new ECB_default(18, 123)), new ECBlocks_default(28, new ECB_default(13, 46), new ECB_default(32, 47)), new ECBlocks_default(30, new ECB_default(48, 24), new ECB_default(14, 25)), new ECBlocks_default(30, new ECB_default(42, 15), new ECB_default(32, 16))),
      new Version3(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks_default(30, new ECB_default(20, 117), new ECB_default(4, 118)), new ECBlocks_default(28, new ECB_default(40, 47), new ECB_default(7, 48)), new ECBlocks_default(30, new ECB_default(43, 24), new ECB_default(22, 25)), new ECBlocks_default(30, new ECB_default(10, 15), new ECB_default(67, 16))),
      new Version3(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks_default(30, new ECB_default(19, 118), new ECB_default(6, 119)), new ECBlocks_default(28, new ECB_default(18, 47), new ECB_default(31, 48)), new ECBlocks_default(30, new ECB_default(34, 24), new ECB_default(34, 25)), new ECBlocks_default(30, new ECB_default(20, 15), new ECB_default(61, 16)))
    ];
    return Version3;
  }()
);
var Version_default2 = Version2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/DataMask.js
var DataMaskValues;
(function(DataMaskValues2) {
  DataMaskValues2[DataMaskValues2["DATA_MASK_000"] = 0] = "DATA_MASK_000";
  DataMaskValues2[DataMaskValues2["DATA_MASK_001"] = 1] = "DATA_MASK_001";
  DataMaskValues2[DataMaskValues2["DATA_MASK_010"] = 2] = "DATA_MASK_010";
  DataMaskValues2[DataMaskValues2["DATA_MASK_011"] = 3] = "DATA_MASK_011";
  DataMaskValues2[DataMaskValues2["DATA_MASK_100"] = 4] = "DATA_MASK_100";
  DataMaskValues2[DataMaskValues2["DATA_MASK_101"] = 5] = "DATA_MASK_101";
  DataMaskValues2[DataMaskValues2["DATA_MASK_110"] = 6] = "DATA_MASK_110";
  DataMaskValues2[DataMaskValues2["DATA_MASK_111"] = 7] = "DATA_MASK_111";
})(DataMaskValues || (DataMaskValues = {}));
var DataMask = (
  /** @class */
  function() {
    function DataMask2(value, isMasked) {
      this.value = value;
      this.isMasked = isMasked;
    }
    DataMask2.prototype.unmaskBitMatrix = function(bits, dimension) {
      for (var i = 0; i < dimension; i++) {
        for (var j = 0; j < dimension; j++) {
          if (this.isMasked(i, j)) {
            bits.flip(j, i);
          }
        }
      }
    };
    DataMask2.values = /* @__PURE__ */ new Map([
      /**
       * 000: mask bits for which (x + y) mod 2 == 0
       */
      [DataMaskValues.DATA_MASK_000, new DataMask2(DataMaskValues.DATA_MASK_000, function(i, j) {
        return (i + j & 1) === 0;
      })],
      /**
       * 001: mask bits for which x mod 2 == 0
       */
      [DataMaskValues.DATA_MASK_001, new DataMask2(DataMaskValues.DATA_MASK_001, function(i, j) {
        return (i & 1) === 0;
      })],
      /**
       * 010: mask bits for which y mod 3 == 0
       */
      [DataMaskValues.DATA_MASK_010, new DataMask2(DataMaskValues.DATA_MASK_010, function(i, j) {
        return j % 3 === 0;
      })],
      /**
       * 011: mask bits for which (x + y) mod 3 == 0
       */
      [DataMaskValues.DATA_MASK_011, new DataMask2(DataMaskValues.DATA_MASK_011, function(i, j) {
        return (i + j) % 3 === 0;
      })],
      /**
       * 100: mask bits for which (x/2 + y/3) mod 2 == 0
       */
      [DataMaskValues.DATA_MASK_100, new DataMask2(DataMaskValues.DATA_MASK_100, function(i, j) {
        return (Math.floor(i / 2) + Math.floor(j / 3) & 1) === 0;
      })],
      /**
       * 101: mask bits for which xy mod 2 + xy mod 3 == 0
       * equivalently, such that xy mod 6 == 0
       */
      [DataMaskValues.DATA_MASK_101, new DataMask2(DataMaskValues.DATA_MASK_101, function(i, j) {
        return i * j % 6 === 0;
      })],
      /**
       * 110: mask bits for which (xy mod 2 + xy mod 3) mod 2 == 0
       * equivalently, such that xy mod 6 < 3
       */
      [DataMaskValues.DATA_MASK_110, new DataMask2(DataMaskValues.DATA_MASK_110, function(i, j) {
        return i * j % 6 < 3;
      })],
      /**
       * 111: mask bits for which ((x+y)mod 2 + xy mod 3) mod 2 == 0
       * equivalently, such that (x + y + xy mod 3) mod 2 == 0
       */
      [DataMaskValues.DATA_MASK_111, new DataMask2(DataMaskValues.DATA_MASK_111, function(i, j) {
        return (i + j + i * j % 3 & 1) === 0;
      })]
    ]);
    return DataMask2;
  }()
);
var DataMask_default = DataMask;

// node_modules/@zxing/library/esm/core/qrcode/decoder/BitMatrixParser.js
var BitMatrixParser2 = (
  /** @class */
  function() {
    function BitMatrixParser3(bitMatrix) {
      var dimension = bitMatrix.getHeight();
      if (dimension < 21 || (dimension & 3) !== 1) {
        throw new FormatException_default();
      }
      this.bitMatrix = bitMatrix;
    }
    BitMatrixParser3.prototype.readFormatInformation = function() {
      if (this.parsedFormatInfo !== null && this.parsedFormatInfo !== void 0) {
        return this.parsedFormatInfo;
      }
      var formatInfoBits1 = 0;
      for (var i = 0; i < 6; i++) {
        formatInfoBits1 = this.copyBit(i, 8, formatInfoBits1);
      }
      formatInfoBits1 = this.copyBit(7, 8, formatInfoBits1);
      formatInfoBits1 = this.copyBit(8, 8, formatInfoBits1);
      formatInfoBits1 = this.copyBit(8, 7, formatInfoBits1);
      for (var j = 5; j >= 0; j--) {
        formatInfoBits1 = this.copyBit(8, j, formatInfoBits1);
      }
      var dimension = this.bitMatrix.getHeight();
      var formatInfoBits2 = 0;
      var jMin = dimension - 7;
      for (var j = dimension - 1; j >= jMin; j--) {
        formatInfoBits2 = this.copyBit(8, j, formatInfoBits2);
      }
      for (var i = dimension - 8; i < dimension; i++) {
        formatInfoBits2 = this.copyBit(i, 8, formatInfoBits2);
      }
      this.parsedFormatInfo = FormatInformation_default.decodeFormatInformation(formatInfoBits1, formatInfoBits2);
      if (this.parsedFormatInfo !== null) {
        return this.parsedFormatInfo;
      }
      throw new FormatException_default();
    };
    BitMatrixParser3.prototype.readVersion = function() {
      if (this.parsedVersion !== null && this.parsedVersion !== void 0) {
        return this.parsedVersion;
      }
      var dimension = this.bitMatrix.getHeight();
      var provisionalVersion = Math.floor((dimension - 17) / 4);
      if (provisionalVersion <= 6) {
        return Version_default2.getVersionForNumber(provisionalVersion);
      }
      var versionBits = 0;
      var ijMin = dimension - 11;
      for (var j = 5; j >= 0; j--) {
        for (var i = dimension - 9; i >= ijMin; i--) {
          versionBits = this.copyBit(i, j, versionBits);
        }
      }
      var theParsedVersion = Version_default2.decodeVersionInformation(versionBits);
      if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {
        this.parsedVersion = theParsedVersion;
        return theParsedVersion;
      }
      versionBits = 0;
      for (var i = 5; i >= 0; i--) {
        for (var j = dimension - 9; j >= ijMin; j--) {
          versionBits = this.copyBit(i, j, versionBits);
        }
      }
      theParsedVersion = Version_default2.decodeVersionInformation(versionBits);
      if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {
        this.parsedVersion = theParsedVersion;
        return theParsedVersion;
      }
      throw new FormatException_default();
    };
    BitMatrixParser3.prototype.copyBit = function(i, j, versionBits) {
      var bit = this.isMirror ? this.bitMatrix.get(j, i) : this.bitMatrix.get(i, j);
      return bit ? versionBits << 1 | 1 : versionBits << 1;
    };
    BitMatrixParser3.prototype.readCodewords = function() {
      var formatInfo = this.readFormatInformation();
      var version = this.readVersion();
      var dataMask = DataMask_default.values.get(formatInfo.getDataMask());
      var dimension = this.bitMatrix.getHeight();
      dataMask.unmaskBitMatrix(this.bitMatrix, dimension);
      var functionPattern = version.buildFunctionPattern();
      var readingUp = true;
      var result = new Uint8Array(version.getTotalCodewords());
      var resultOffset = 0;
      var currentByte = 0;
      var bitsRead = 0;
      for (var j = dimension - 1; j > 0; j -= 2) {
        if (j === 6) {
          j--;
        }
        for (var count = 0; count < dimension; count++) {
          var i = readingUp ? dimension - 1 - count : count;
          for (var col = 0; col < 2; col++) {
            if (!functionPattern.get(j - col, i)) {
              bitsRead++;
              currentByte <<= 1;
              if (this.bitMatrix.get(j - col, i)) {
                currentByte |= 1;
              }
              if (bitsRead === 8) {
                result[resultOffset++] = /*(byte) */
                currentByte;
                bitsRead = 0;
                currentByte = 0;
              }
            }
          }
        }
        readingUp = !readingUp;
      }
      if (resultOffset !== version.getTotalCodewords()) {
        throw new FormatException_default();
      }
      return result;
    };
    BitMatrixParser3.prototype.remask = function() {
      if (this.parsedFormatInfo === null) {
        return;
      }
      var dataMask = DataMask_default.values.get(this.parsedFormatInfo.getDataMask());
      var dimension = this.bitMatrix.getHeight();
      dataMask.unmaskBitMatrix(this.bitMatrix, dimension);
    };
    BitMatrixParser3.prototype.setMirror = function(isMirror) {
      this.parsedVersion = null;
      this.parsedFormatInfo = null;
      this.isMirror = isMirror;
    };
    BitMatrixParser3.prototype.mirror = function() {
      var bitMatrix = this.bitMatrix;
      for (var x = 0, width = bitMatrix.getWidth(); x < width; x++) {
        for (var y = x + 1, height = bitMatrix.getHeight(); y < height; y++) {
          if (bitMatrix.get(x, y) !== bitMatrix.get(y, x)) {
            bitMatrix.flip(y, x);
            bitMatrix.flip(x, y);
          }
        }
      }
    };
    return BitMatrixParser3;
  }()
);
var BitMatrixParser_default2 = BitMatrixParser2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/DataBlock.js
var __values24 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DataBlock2 = (
  /** @class */
  function() {
    function DataBlock3(numDataCodewords, codewords) {
      this.numDataCodewords = numDataCodewords;
      this.codewords = codewords;
    }
    DataBlock3.getDataBlocks = function(rawCodewords, version, ecLevel) {
      var e_1, _a2, e_2, _b;
      if (rawCodewords.length !== version.getTotalCodewords()) {
        throw new IllegalArgumentException_default();
      }
      var ecBlocks = version.getECBlocksForLevel(ecLevel);
      var totalBlocks = 0;
      var ecBlockArray = ecBlocks.getECBlocks();
      try {
        for (var ecBlockArray_1 = __values24(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {
          var ecBlock = ecBlockArray_1_1.value;
          totalBlocks += ecBlock.getCount();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a2 = ecBlockArray_1.return)) _a2.call(ecBlockArray_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var result = new Array(totalBlocks);
      var numResultBlocks = 0;
      try {
        for (var ecBlockArray_2 = __values24(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {
          var ecBlock = ecBlockArray_2_1.value;
          for (var i = 0; i < ecBlock.getCount(); i++) {
            var numDataCodewords = ecBlock.getDataCodewords();
            var numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;
            result[numResultBlocks++] = new DataBlock3(numDataCodewords, new Uint8Array(numBlockCodewords));
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      var shorterBlocksTotalCodewords = result[0].codewords.length;
      var longerBlocksStartAt = result.length - 1;
      while (longerBlocksStartAt >= 0) {
        var numCodewords = result[longerBlocksStartAt].codewords.length;
        if (numCodewords === shorterBlocksTotalCodewords) {
          break;
        }
        longerBlocksStartAt--;
      }
      longerBlocksStartAt++;
      var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();
      var rawCodewordsOffset = 0;
      for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {
        for (var j = 0; j < numResultBlocks; j++) {
          result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];
        }
      }
      for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {
        result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];
      }
      var max = result[0].codewords.length;
      for (var i = shorterBlocksNumDataCodewords; i < max; i++) {
        for (var j = 0; j < numResultBlocks; j++) {
          var iOffset = j < longerBlocksStartAt ? i : i + 1;
          result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];
        }
      }
      return result;
    };
    DataBlock3.prototype.getNumDataCodewords = function() {
      return this.numDataCodewords;
    };
    DataBlock3.prototype.getCodewords = function() {
      return this.codewords;
    };
    return DataBlock3;
  }()
);
var DataBlock_default2 = DataBlock2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/Mode.js
var ModeValues;
(function(ModeValues2) {
  ModeValues2[ModeValues2["TERMINATOR"] = 0] = "TERMINATOR";
  ModeValues2[ModeValues2["NUMERIC"] = 1] = "NUMERIC";
  ModeValues2[ModeValues2["ALPHANUMERIC"] = 2] = "ALPHANUMERIC";
  ModeValues2[ModeValues2["STRUCTURED_APPEND"] = 3] = "STRUCTURED_APPEND";
  ModeValues2[ModeValues2["BYTE"] = 4] = "BYTE";
  ModeValues2[ModeValues2["ECI"] = 5] = "ECI";
  ModeValues2[ModeValues2["KANJI"] = 6] = "KANJI";
  ModeValues2[ModeValues2["FNC1_FIRST_POSITION"] = 7] = "FNC1_FIRST_POSITION";
  ModeValues2[ModeValues2["FNC1_SECOND_POSITION"] = 8] = "FNC1_SECOND_POSITION";
  ModeValues2[ModeValues2["HANZI"] = 9] = "HANZI";
})(ModeValues || (ModeValues = {}));
var Mode2 = (
  /** @class */
  function() {
    function Mode5(value, stringValue, characterCountBitsForVersions, bits) {
      this.value = value;
      this.stringValue = stringValue;
      this.characterCountBitsForVersions = characterCountBitsForVersions;
      this.bits = bits;
      Mode5.FOR_BITS.set(bits, this);
      Mode5.FOR_VALUE.set(value, this);
    }
    Mode5.forBits = function(bits) {
      var mode = Mode5.FOR_BITS.get(bits);
      if (void 0 === mode) {
        throw new IllegalArgumentException_default();
      }
      return mode;
    };
    Mode5.prototype.getCharacterCountBits = function(version) {
      var versionNumber = version.getVersionNumber();
      var offset;
      if (versionNumber <= 9) {
        offset = 0;
      } else if (versionNumber <= 26) {
        offset = 1;
      } else {
        offset = 2;
      }
      return this.characterCountBitsForVersions[offset];
    };
    Mode5.prototype.getValue = function() {
      return this.value;
    };
    Mode5.prototype.getBits = function() {
      return this.bits;
    };
    Mode5.prototype.equals = function(o) {
      if (!(o instanceof Mode5)) {
        return false;
      }
      var other = o;
      return this.value === other.value;
    };
    Mode5.prototype.toString = function() {
      return this.stringValue;
    };
    Mode5.FOR_BITS = /* @__PURE__ */ new Map();
    Mode5.FOR_VALUE = /* @__PURE__ */ new Map();
    Mode5.TERMINATOR = new Mode5(ModeValues.TERMINATOR, "TERMINATOR", Int32Array.from([0, 0, 0]), 0);
    Mode5.NUMERIC = new Mode5(ModeValues.NUMERIC, "NUMERIC", Int32Array.from([10, 12, 14]), 1);
    Mode5.ALPHANUMERIC = new Mode5(ModeValues.ALPHANUMERIC, "ALPHANUMERIC", Int32Array.from([9, 11, 13]), 2);
    Mode5.STRUCTURED_APPEND = new Mode5(ModeValues.STRUCTURED_APPEND, "STRUCTURED_APPEND", Int32Array.from([0, 0, 0]), 3);
    Mode5.BYTE = new Mode5(ModeValues.BYTE, "BYTE", Int32Array.from([8, 16, 16]), 4);
    Mode5.ECI = new Mode5(ModeValues.ECI, "ECI", Int32Array.from([0, 0, 0]), 7);
    Mode5.KANJI = new Mode5(ModeValues.KANJI, "KANJI", Int32Array.from([8, 10, 12]), 8);
    Mode5.FNC1_FIRST_POSITION = new Mode5(ModeValues.FNC1_FIRST_POSITION, "FNC1_FIRST_POSITION", Int32Array.from([0, 0, 0]), 5);
    Mode5.FNC1_SECOND_POSITION = new Mode5(ModeValues.FNC1_SECOND_POSITION, "FNC1_SECOND_POSITION", Int32Array.from([0, 0, 0]), 9);
    Mode5.HANZI = new Mode5(ModeValues.HANZI, "HANZI", Int32Array.from([8, 10, 12]), 13);
    return Mode5;
  }()
);
var Mode_default = Mode2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/DecodedBitStreamParser.js
var DecodedBitStreamParser2 = (
  /** @class */
  function() {
    function DecodedBitStreamParser4() {
    }
    DecodedBitStreamParser4.decode = function(bytes, version, ecLevel, hints) {
      var bits = new BitSource_default(bytes);
      var result = new StringBuilder_default();
      var byteSegments = new Array();
      var symbolSequence = -1;
      var parityData = -1;
      try {
        var currentCharacterSetECI = null;
        var fc1InEffect = false;
        var mode = void 0;
        do {
          if (bits.available() < 4) {
            mode = Mode_default.TERMINATOR;
          } else {
            var modeBits = bits.readBits(4);
            mode = Mode_default.forBits(modeBits);
          }
          switch (mode) {
            case Mode_default.TERMINATOR:
              break;
            case Mode_default.FNC1_FIRST_POSITION:
            case Mode_default.FNC1_SECOND_POSITION:
              fc1InEffect = true;
              break;
            case Mode_default.STRUCTURED_APPEND:
              if (bits.available() < 16) {
                throw new FormatException_default();
              }
              symbolSequence = bits.readBits(8);
              parityData = bits.readBits(8);
              break;
            case Mode_default.ECI:
              var value = DecodedBitStreamParser4.parseECIValue(bits);
              currentCharacterSetECI = CharacterSetECI_default.getCharacterSetECIByValue(value);
              if (currentCharacterSetECI === null) {
                throw new FormatException_default();
              }
              break;
            case Mode_default.HANZI:
              var subset = bits.readBits(4);
              var countHanzi = bits.readBits(mode.getCharacterCountBits(version));
              if (subset === DecodedBitStreamParser4.GB2312_SUBSET) {
                DecodedBitStreamParser4.decodeHanziSegment(bits, result, countHanzi);
              }
              break;
            default:
              var count = bits.readBits(mode.getCharacterCountBits(version));
              switch (mode) {
                case Mode_default.NUMERIC:
                  DecodedBitStreamParser4.decodeNumericSegment(bits, result, count);
                  break;
                case Mode_default.ALPHANUMERIC:
                  DecodedBitStreamParser4.decodeAlphanumericSegment(bits, result, count, fc1InEffect);
                  break;
                case Mode_default.BYTE:
                  DecodedBitStreamParser4.decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);
                  break;
                case Mode_default.KANJI:
                  DecodedBitStreamParser4.decodeKanjiSegment(bits, result, count);
                  break;
                default:
                  throw new FormatException_default();
              }
              break;
          }
        } while (mode !== Mode_default.TERMINATOR);
      } catch (iae) {
        throw new FormatException_default();
      }
      return new DecoderResult_default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, ecLevel === null ? null : ecLevel.toString(), symbolSequence, parityData);
    };
    DecodedBitStreamParser4.decodeHanziSegment = function(bits, result, count) {
      if (count * 13 > bits.available()) {
        throw new FormatException_default();
      }
      var buffer = new Uint8Array(2 * count);
      var offset = 0;
      while (count > 0) {
        var twoBytes = bits.readBits(13);
        var assembledTwoBytes = twoBytes / 96 << 8 & 4294967295 | twoBytes % 96;
        if (assembledTwoBytes < 959) {
          assembledTwoBytes += 41377;
        } else {
          assembledTwoBytes += 42657;
        }
        buffer[offset] = /*(byte) */
        assembledTwoBytes >> 8 & 255;
        buffer[offset + 1] = /*(byte) */
        assembledTwoBytes & 255;
        offset += 2;
        count--;
      }
      try {
        result.append(StringEncoding_default.decode(buffer, StringUtils_default.GB2312));
      } catch (ignored) {
        throw new FormatException_default(ignored);
      }
    };
    DecodedBitStreamParser4.decodeKanjiSegment = function(bits, result, count) {
      if (count * 13 > bits.available()) {
        throw new FormatException_default();
      }
      var buffer = new Uint8Array(2 * count);
      var offset = 0;
      while (count > 0) {
        var twoBytes = bits.readBits(13);
        var assembledTwoBytes = twoBytes / 192 << 8 & 4294967295 | twoBytes % 192;
        if (assembledTwoBytes < 7936) {
          assembledTwoBytes += 33088;
        } else {
          assembledTwoBytes += 49472;
        }
        buffer[offset] = /*(byte) */
        assembledTwoBytes >> 8;
        buffer[offset + 1] = /*(byte) */
        assembledTwoBytes;
        offset += 2;
        count--;
      }
      try {
        result.append(StringEncoding_default.decode(buffer, StringUtils_default.SHIFT_JIS));
      } catch (ignored) {
        throw new FormatException_default(ignored);
      }
    };
    DecodedBitStreamParser4.decodeByteSegment = function(bits, result, count, currentCharacterSetECI, byteSegments, hints) {
      if (8 * count > bits.available()) {
        throw new FormatException_default();
      }
      var readBytes = new Uint8Array(count);
      for (var i = 0; i < count; i++) {
        readBytes[i] = /*(byte) */
        bits.readBits(8);
      }
      var encoding;
      if (currentCharacterSetECI === null) {
        encoding = StringUtils_default.guessEncoding(readBytes, hints);
      } else {
        encoding = currentCharacterSetECI.getName();
      }
      try {
        result.append(StringEncoding_default.decode(readBytes, encoding));
      } catch (ignored) {
        throw new FormatException_default(ignored);
      }
      byteSegments.push(readBytes);
    };
    DecodedBitStreamParser4.toAlphaNumericChar = function(value) {
      if (value >= DecodedBitStreamParser4.ALPHANUMERIC_CHARS.length) {
        throw new FormatException_default();
      }
      return DecodedBitStreamParser4.ALPHANUMERIC_CHARS[value];
    };
    DecodedBitStreamParser4.decodeAlphanumericSegment = function(bits, result, count, fc1InEffect) {
      var start = result.length();
      while (count > 1) {
        if (bits.available() < 11) {
          throw new FormatException_default();
        }
        var nextTwoCharsBits = bits.readBits(11);
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(Math.floor(nextTwoCharsBits / 45)));
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(nextTwoCharsBits % 45));
        count -= 2;
      }
      if (count === 1) {
        if (bits.available() < 6) {
          throw new FormatException_default();
        }
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(bits.readBits(6)));
      }
      if (fc1InEffect) {
        for (var i = start; i < result.length(); i++) {
          if (result.charAt(i) === "%") {
            if (i < result.length() - 1 && result.charAt(i + 1) === "%") {
              result.deleteCharAt(i + 1);
            } else {
              result.setCharAt(i, String.fromCharCode(29));
            }
          }
        }
      }
    };
    DecodedBitStreamParser4.decodeNumericSegment = function(bits, result, count) {
      while (count >= 3) {
        if (bits.available() < 10) {
          throw new FormatException_default();
        }
        var threeDigitsBits = bits.readBits(10);
        if (threeDigitsBits >= 1e3) {
          throw new FormatException_default();
        }
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(Math.floor(threeDigitsBits / 100)));
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(Math.floor(threeDigitsBits / 10) % 10));
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(threeDigitsBits % 10));
        count -= 3;
      }
      if (count === 2) {
        if (bits.available() < 7) {
          throw new FormatException_default();
        }
        var twoDigitsBits = bits.readBits(7);
        if (twoDigitsBits >= 100) {
          throw new FormatException_default();
        }
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(Math.floor(twoDigitsBits / 10)));
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(twoDigitsBits % 10));
      } else if (count === 1) {
        if (bits.available() < 4) {
          throw new FormatException_default();
        }
        var digitBits = bits.readBits(4);
        if (digitBits >= 10) {
          throw new FormatException_default();
        }
        result.append(DecodedBitStreamParser4.toAlphaNumericChar(digitBits));
      }
    };
    DecodedBitStreamParser4.parseECIValue = function(bits) {
      var firstByte = bits.readBits(8);
      if ((firstByte & 128) === 0) {
        return firstByte & 127;
      }
      if ((firstByte & 192) === 128) {
        var secondByte = bits.readBits(8);
        return (firstByte & 63) << 8 & 4294967295 | secondByte;
      }
      if ((firstByte & 224) === 192) {
        var secondThirdBytes = bits.readBits(16);
        return (firstByte & 31) << 16 & 4294967295 | secondThirdBytes;
      }
      throw new FormatException_default();
    };
    DecodedBitStreamParser4.ALPHANUMERIC_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
    DecodedBitStreamParser4.GB2312_SUBSET = 1;
    return DecodedBitStreamParser4;
  }()
);
var DecodedBitStreamParser_default2 = DecodedBitStreamParser2;

// node_modules/@zxing/library/esm/core/qrcode/decoder/QRCodeDecoderMetaData.js
var QRCodeDecoderMetaData = (
  /** @class */
  function() {
    function QRCodeDecoderMetaData2(mirrored) {
      this.mirrored = mirrored;
    }
    QRCodeDecoderMetaData2.prototype.isMirrored = function() {
      return this.mirrored;
    };
    QRCodeDecoderMetaData2.prototype.applyMirroredCorrection = function(points) {
      if (!this.mirrored || points === null || points.length < 3) {
        return;
      }
      var bottomLeft = points[0];
      points[0] = points[2];
      points[2] = bottomLeft;
    };
    return QRCodeDecoderMetaData2;
  }()
);
var QRCodeDecoderMetaData_default = QRCodeDecoderMetaData;

// node_modules/@zxing/library/esm/core/qrcode/decoder/Decoder.js
var __values25 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Decoder3 = (
  /** @class */
  function() {
    function Decoder4() {
      this.rsDecoder = new ReedSolomonDecoder_default(GenericGF_default.QR_CODE_FIELD_256);
    }
    Decoder4.prototype.decodeBooleanArray = function(image, hints) {
      return this.decodeBitMatrix(BitMatrix_default.parseFromBooleanArray(image), hints);
    };
    Decoder4.prototype.decodeBitMatrix = function(bits, hints) {
      var parser = new BitMatrixParser_default2(bits);
      var ex = null;
      try {
        return this.decodeBitMatrixParser(parser, hints);
      } catch (e) {
        ex = e;
      }
      try {
        parser.remask();
        parser.setMirror(true);
        parser.readVersion();
        parser.readFormatInformation();
        parser.mirror();
        var result = this.decodeBitMatrixParser(parser, hints);
        result.setOther(new QRCodeDecoderMetaData_default(true));
        return result;
      } catch (e) {
        if (ex !== null) {
          throw ex;
        }
        throw e;
      }
    };
    Decoder4.prototype.decodeBitMatrixParser = function(parser, hints) {
      var e_1, _a2, e_2, _b;
      var version = parser.readVersion();
      var ecLevel = parser.readFormatInformation().getErrorCorrectionLevel();
      var codewords = parser.readCodewords();
      var dataBlocks = DataBlock_default2.getDataBlocks(codewords, version, ecLevel);
      var totalBytes = 0;
      try {
        for (var dataBlocks_1 = __values25(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {
          var dataBlock = dataBlocks_1_1.value;
          totalBytes += dataBlock.getNumDataCodewords();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a2 = dataBlocks_1.return)) _a2.call(dataBlocks_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var resultBytes = new Uint8Array(totalBytes);
      var resultOffset = 0;
      try {
        for (var dataBlocks_2 = __values25(dataBlocks), dataBlocks_2_1 = dataBlocks_2.next(); !dataBlocks_2_1.done; dataBlocks_2_1 = dataBlocks_2.next()) {
          var dataBlock = dataBlocks_2_1.value;
          var codewordBytes = dataBlock.getCodewords();
          var numDataCodewords = dataBlock.getNumDataCodewords();
          this.correctErrors(codewordBytes, numDataCodewords);
          for (var i = 0; i < numDataCodewords; i++) {
            resultBytes[resultOffset++] = codewordBytes[i];
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (dataBlocks_2_1 && !dataBlocks_2_1.done && (_b = dataBlocks_2.return)) _b.call(dataBlocks_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return DecodedBitStreamParser_default2.decode(resultBytes, version, ecLevel, hints);
    };
    Decoder4.prototype.correctErrors = function(codewordBytes, numDataCodewords) {
      var codewordsInts = new Int32Array(codewordBytes);
      try {
        this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);
      } catch (ignored) {
        throw new ChecksumException_default();
      }
      for (var i = 0; i < numDataCodewords; i++) {
        codewordBytes[i] = /*(byte) */
        codewordsInts[i];
      }
    };
    return Decoder4;
  }()
);
var Decoder_default3 = Decoder3;

// node_modules/@zxing/library/esm/core/qrcode/detector/AlignmentPattern.js
var __extends54 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AlignmentPattern = (
  /** @class */
  function(_super) {
    __extends54(AlignmentPattern2, _super);
    function AlignmentPattern2(posX, posY, estimatedModuleSize) {
      var _this = _super.call(this, posX, posY) || this;
      _this.estimatedModuleSize = estimatedModuleSize;
      return _this;
    }
    AlignmentPattern2.prototype.aboutEquals = function(moduleSize, i, j) {
      if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {
        var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
        return moduleSizeDiff <= 1 || moduleSizeDiff <= this.estimatedModuleSize;
      }
      return false;
    };
    AlignmentPattern2.prototype.combineEstimate = function(i, j, newModuleSize) {
      var combinedX = (this.getX() + j) / 2;
      var combinedY = (this.getY() + i) / 2;
      var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2;
      return new AlignmentPattern2(combinedX, combinedY, combinedModuleSize);
    };
    return AlignmentPattern2;
  }(ResultPoint_default)
);
var AlignmentPattern_default = AlignmentPattern;

// node_modules/@zxing/library/esm/core/qrcode/detector/AlignmentPatternFinder.js
var __values26 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var AlignmentPatternFinder = (
  /** @class */
  function() {
    function AlignmentPatternFinder2(image, startX, startY, width, height, moduleSize, resultPointCallback) {
      this.image = image;
      this.startX = startX;
      this.startY = startY;
      this.width = width;
      this.height = height;
      this.moduleSize = moduleSize;
      this.resultPointCallback = resultPointCallback;
      this.possibleCenters = [];
      this.crossCheckStateCount = new Int32Array(3);
    }
    AlignmentPatternFinder2.prototype.find = function() {
      var startX = this.startX;
      var height = this.height;
      var width = this.width;
      var maxJ = startX + width;
      var middleI = this.startY + height / 2;
      var stateCount = new Int32Array(3);
      var image = this.image;
      for (var iGen = 0; iGen < height; iGen++) {
        var i = middleI + ((iGen & 1) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));
        stateCount[0] = 0;
        stateCount[1] = 0;
        stateCount[2] = 0;
        var j = startX;
        while (j < maxJ && !image.get(j, i)) {
          j++;
        }
        var currentState = 0;
        while (j < maxJ) {
          if (image.get(j, i)) {
            if (currentState === 1) {
              stateCount[1]++;
            } else {
              if (currentState === 2) {
                if (this.foundPatternCross(stateCount)) {
                  var confirmed = this.handlePossibleCenter(stateCount, i, j);
                  if (confirmed !== null) {
                    return confirmed;
                  }
                }
                stateCount[0] = stateCount[2];
                stateCount[1] = 1;
                stateCount[2] = 0;
                currentState = 1;
              } else {
                stateCount[++currentState]++;
              }
            }
          } else {
            if (currentState === 1) {
              currentState++;
            }
            stateCount[currentState]++;
          }
          j++;
        }
        if (this.foundPatternCross(stateCount)) {
          var confirmed = this.handlePossibleCenter(stateCount, i, maxJ);
          if (confirmed !== null) {
            return confirmed;
          }
        }
      }
      if (this.possibleCenters.length !== 0) {
        return this.possibleCenters[0];
      }
      throw new NotFoundException_default();
    };
    AlignmentPatternFinder2.centerFromEnd = function(stateCount, end) {
      return end - stateCount[2] - stateCount[1] / 2;
    };
    AlignmentPatternFinder2.prototype.foundPatternCross = function(stateCount) {
      var moduleSize = this.moduleSize;
      var maxVariance = moduleSize / 2;
      for (var i = 0; i < 3; i++) {
        if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {
          return false;
        }
      }
      return true;
    };
    AlignmentPatternFinder2.prototype.crossCheckVertical = function(startI, centerJ, maxCount, originalStateCountTotal) {
      var image = this.image;
      var maxI = image.getHeight();
      var stateCount = this.crossCheckStateCount;
      stateCount[0] = 0;
      stateCount[1] = 0;
      stateCount[2] = 0;
      var i = startI;
      while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {
        stateCount[1]++;
        i--;
      }
      if (i < 0 || stateCount[1] > maxCount) {
        return NaN;
      }
      while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {
        stateCount[0]++;
        i--;
      }
      if (stateCount[0] > maxCount) {
        return NaN;
      }
      i = startI + 1;
      while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {
        stateCount[1]++;
        i++;
      }
      if (i === maxI || stateCount[1] > maxCount) {
        return NaN;
      }
      while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {
        stateCount[2]++;
        i++;
      }
      if (stateCount[2] > maxCount) {
        return NaN;
      }
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
      if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {
        return NaN;
      }
      return this.foundPatternCross(stateCount) ? AlignmentPatternFinder2.centerFromEnd(stateCount, i) : NaN;
    };
    AlignmentPatternFinder2.prototype.handlePossibleCenter = function(stateCount, i, j) {
      var e_1, _a2;
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];
      var centerJ = AlignmentPatternFinder2.centerFromEnd(stateCount, j);
      var centerI = this.crossCheckVertical(
        i,
        /*(int) */
        centerJ,
        2 * stateCount[1],
        stateCountTotal
      );
      if (!isNaN(centerI)) {
        var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3;
        try {
          for (var _b = __values26(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {
            var center = _c.value;
            if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
              return center.combineEstimate(centerI, centerJ, estimatedModuleSize);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        var point = new AlignmentPattern_default(centerJ, centerI, estimatedModuleSize);
        this.possibleCenters.push(point);
        if (this.resultPointCallback !== null && this.resultPointCallback !== void 0) {
          this.resultPointCallback.foundPossibleResultPoint(point);
        }
      }
      return null;
    };
    return AlignmentPatternFinder2;
  }()
);
var AlignmentPatternFinder_default = AlignmentPatternFinder;

// node_modules/@zxing/library/esm/core/qrcode/detector/FinderPattern.js
var __extends55 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FinderPattern2 = (
  /** @class */
  function(_super) {
    __extends55(FinderPattern3, _super);
    function FinderPattern3(posX, posY, estimatedModuleSize, count) {
      var _this = _super.call(this, posX, posY) || this;
      _this.estimatedModuleSize = estimatedModuleSize;
      _this.count = count;
      if (void 0 === count) {
        _this.count = 1;
      }
      return _this;
    }
    FinderPattern3.prototype.getEstimatedModuleSize = function() {
      return this.estimatedModuleSize;
    };
    FinderPattern3.prototype.getCount = function() {
      return this.count;
    };
    FinderPattern3.prototype.aboutEquals = function(moduleSize, i, j) {
      if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {
        var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);
        return moduleSizeDiff <= 1 || moduleSizeDiff <= this.estimatedModuleSize;
      }
      return false;
    };
    FinderPattern3.prototype.combineEstimate = function(i, j, newModuleSize) {
      var combinedCount = this.count + 1;
      var combinedX = (this.count * this.getX() + j) / combinedCount;
      var combinedY = (this.count * this.getY() + i) / combinedCount;
      var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;
      return new FinderPattern3(combinedX, combinedY, combinedModuleSize, combinedCount);
    };
    return FinderPattern3;
  }(ResultPoint_default)
);
var FinderPattern_default2 = FinderPattern2;

// node_modules/@zxing/library/esm/core/qrcode/detector/FinderPatternInfo.js
var FinderPatternInfo = (
  /** @class */
  function() {
    function FinderPatternInfo2(patternCenters) {
      this.bottomLeft = patternCenters[0];
      this.topLeft = patternCenters[1];
      this.topRight = patternCenters[2];
    }
    FinderPatternInfo2.prototype.getBottomLeft = function() {
      return this.bottomLeft;
    };
    FinderPatternInfo2.prototype.getTopLeft = function() {
      return this.topLeft;
    };
    FinderPatternInfo2.prototype.getTopRight = function() {
      return this.topRight;
    };
    return FinderPatternInfo2;
  }()
);
var FinderPatternInfo_default = FinderPatternInfo;

// node_modules/@zxing/library/esm/core/qrcode/detector/FinderPatternFinder.js
var __values27 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var FinderPatternFinder = (
  /** @class */
  function() {
    function FinderPatternFinder2(image, resultPointCallback) {
      this.image = image;
      this.resultPointCallback = resultPointCallback;
      this.possibleCenters = [];
      this.crossCheckStateCount = new Int32Array(5);
      this.resultPointCallback = resultPointCallback;
    }
    FinderPatternFinder2.prototype.getImage = function() {
      return this.image;
    };
    FinderPatternFinder2.prototype.getPossibleCenters = function() {
      return this.possibleCenters;
    };
    FinderPatternFinder2.prototype.find = function(hints) {
      var tryHarder = hints !== null && hints !== void 0 && void 0 !== hints.get(DecodeHintType_default.TRY_HARDER);
      var pureBarcode = hints !== null && hints !== void 0 && void 0 !== hints.get(DecodeHintType_default.PURE_BARCODE);
      var image = this.image;
      var maxI = image.getHeight();
      var maxJ = image.getWidth();
      var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder2.MAX_MODULES));
      if (iSkip < FinderPatternFinder2.MIN_SKIP || tryHarder) {
        iSkip = FinderPatternFinder2.MIN_SKIP;
      }
      var done = false;
      var stateCount = new Int32Array(5);
      for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {
        stateCount[0] = 0;
        stateCount[1] = 0;
        stateCount[2] = 0;
        stateCount[3] = 0;
        stateCount[4] = 0;
        var currentState = 0;
        for (var j = 0; j < maxJ; j++) {
          if (image.get(j, i)) {
            if ((currentState & 1) === 1) {
              currentState++;
            }
            stateCount[currentState]++;
          } else {
            if ((currentState & 1) === 0) {
              if (currentState === 4) {
                if (FinderPatternFinder2.foundPatternCross(stateCount)) {
                  var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);
                  if (confirmed === true) {
                    iSkip = 2;
                    if (this.hasSkipped === true) {
                      done = this.haveMultiplyConfirmedCenters();
                    } else {
                      var rowSkip = this.findRowSkip();
                      if (rowSkip > stateCount[2]) {
                        i += rowSkip - stateCount[2] - iSkip;
                        j = maxJ - 1;
                      }
                    }
                  } else {
                    stateCount[0] = stateCount[2];
                    stateCount[1] = stateCount[3];
                    stateCount[2] = stateCount[4];
                    stateCount[3] = 1;
                    stateCount[4] = 0;
                    currentState = 3;
                    continue;
                  }
                  currentState = 0;
                  stateCount[0] = 0;
                  stateCount[1] = 0;
                  stateCount[2] = 0;
                  stateCount[3] = 0;
                  stateCount[4] = 0;
                } else {
                  stateCount[0] = stateCount[2];
                  stateCount[1] = stateCount[3];
                  stateCount[2] = stateCount[4];
                  stateCount[3] = 1;
                  stateCount[4] = 0;
                  currentState = 3;
                }
              } else {
                stateCount[++currentState]++;
              }
            } else {
              stateCount[currentState]++;
            }
          }
        }
        if (FinderPatternFinder2.foundPatternCross(stateCount)) {
          var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);
          if (confirmed === true) {
            iSkip = stateCount[0];
            if (this.hasSkipped) {
              done = this.haveMultiplyConfirmedCenters();
            }
          }
        }
      }
      var patternInfo = this.selectBestPatterns();
      ResultPoint_default.orderBestPatterns(patternInfo);
      return new FinderPatternInfo_default(patternInfo);
    };
    FinderPatternFinder2.centerFromEnd = function(stateCount, end) {
      return end - stateCount[4] - stateCount[3] - stateCount[2] / 2;
    };
    FinderPatternFinder2.foundPatternCross = function(stateCount) {
      var totalModuleSize = 0;
      for (var i = 0; i < 5; i++) {
        var count = stateCount[i];
        if (count === 0) {
          return false;
        }
        totalModuleSize += count;
      }
      if (totalModuleSize < 7) {
        return false;
      }
      var moduleSize = totalModuleSize / 7;
      var maxVariance = moduleSize / 2;
      return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;
    };
    FinderPatternFinder2.prototype.getCrossCheckStateCount = function() {
      var crossCheckStateCount = this.crossCheckStateCount;
      crossCheckStateCount[0] = 0;
      crossCheckStateCount[1] = 0;
      crossCheckStateCount[2] = 0;
      crossCheckStateCount[3] = 0;
      crossCheckStateCount[4] = 0;
      return crossCheckStateCount;
    };
    FinderPatternFinder2.prototype.crossCheckDiagonal = function(startI, centerJ, maxCount, originalStateCountTotal) {
      var stateCount = this.getCrossCheckStateCount();
      var i = 0;
      var image = this.image;
      while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {
        stateCount[2]++;
        i++;
      }
      if (startI < i || centerJ < i) {
        return false;
      }
      while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {
        stateCount[1]++;
        i++;
      }
      if (startI < i || centerJ < i || stateCount[1] > maxCount) {
        return false;
      }
      while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {
        stateCount[0]++;
        i++;
      }
      if (stateCount[0] > maxCount) {
        return false;
      }
      var maxI = image.getHeight();
      var maxJ = image.getWidth();
      i = 1;
      while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {
        stateCount[2]++;
        i++;
      }
      if (startI + i >= maxI || centerJ + i >= maxJ) {
        return false;
      }
      while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {
        stateCount[3]++;
        i++;
      }
      if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {
        return false;
      }
      while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {
        stateCount[4]++;
        i++;
      }
      if (stateCount[4] >= maxCount) {
        return false;
      }
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
      return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder2.foundPatternCross(stateCount);
    };
    FinderPatternFinder2.prototype.crossCheckVertical = function(startI, centerJ, maxCount, originalStateCountTotal) {
      var image = this.image;
      var maxI = image.getHeight();
      var stateCount = this.getCrossCheckStateCount();
      var i = startI;
      while (i >= 0 && image.get(centerJ, i)) {
        stateCount[2]++;
        i--;
      }
      if (i < 0) {
        return NaN;
      }
      while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {
        stateCount[1]++;
        i--;
      }
      if (i < 0 || stateCount[1] > maxCount) {
        return NaN;
      }
      while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {
        stateCount[0]++;
        i--;
      }
      if (stateCount[0] > maxCount) {
        return NaN;
      }
      i = startI + 1;
      while (i < maxI && image.get(centerJ, i)) {
        stateCount[2]++;
        i++;
      }
      if (i === maxI) {
        return NaN;
      }
      while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {
        stateCount[3]++;
        i++;
      }
      if (i === maxI || stateCount[3] >= maxCount) {
        return NaN;
      }
      while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {
        stateCount[4]++;
        i++;
      }
      if (stateCount[4] >= maxCount) {
        return NaN;
      }
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
      if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {
        return NaN;
      }
      return FinderPatternFinder2.foundPatternCross(stateCount) ? FinderPatternFinder2.centerFromEnd(stateCount, i) : NaN;
    };
    FinderPatternFinder2.prototype.crossCheckHorizontal = function(startJ, centerI, maxCount, originalStateCountTotal) {
      var image = this.image;
      var maxJ = image.getWidth();
      var stateCount = this.getCrossCheckStateCount();
      var j = startJ;
      while (j >= 0 && image.get(j, centerI)) {
        stateCount[2]++;
        j--;
      }
      if (j < 0) {
        return NaN;
      }
      while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {
        stateCount[1]++;
        j--;
      }
      if (j < 0 || stateCount[1] > maxCount) {
        return NaN;
      }
      while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {
        stateCount[0]++;
        j--;
      }
      if (stateCount[0] > maxCount) {
        return NaN;
      }
      j = startJ + 1;
      while (j < maxJ && image.get(j, centerI)) {
        stateCount[2]++;
        j++;
      }
      if (j === maxJ) {
        return NaN;
      }
      while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {
        stateCount[3]++;
        j++;
      }
      if (j === maxJ || stateCount[3] >= maxCount) {
        return NaN;
      }
      while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {
        stateCount[4]++;
        j++;
      }
      if (stateCount[4] >= maxCount) {
        return NaN;
      }
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
      if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {
        return NaN;
      }
      return FinderPatternFinder2.foundPatternCross(stateCount) ? FinderPatternFinder2.centerFromEnd(stateCount, j) : NaN;
    };
    FinderPatternFinder2.prototype.handlePossibleCenter = function(stateCount, i, j, pureBarcode) {
      var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];
      var centerJ = FinderPatternFinder2.centerFromEnd(stateCount, j);
      var centerI = this.crossCheckVertical(
        i,
        /*(int) */
        Math.floor(centerJ),
        stateCount[2],
        stateCountTotal
      );
      if (!isNaN(centerI)) {
        centerJ = this.crossCheckHorizontal(
          /*(int) */
          Math.floor(centerJ),
          /*(int) */
          Math.floor(centerI),
          stateCount[2],
          stateCountTotal
        );
        if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal(
          /*(int) */
          Math.floor(centerI),
          /*(int) */
          Math.floor(centerJ),
          stateCount[2],
          stateCountTotal
        ))) {
          var estimatedModuleSize = stateCountTotal / 7;
          var found = false;
          var possibleCenters = this.possibleCenters;
          for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {
            var center = possibleCenters[index];
            if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {
              possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);
              found = true;
              break;
            }
          }
          if (!found) {
            var point = new FinderPattern_default2(centerJ, centerI, estimatedModuleSize);
            possibleCenters.push(point);
            if (this.resultPointCallback !== null && this.resultPointCallback !== void 0) {
              this.resultPointCallback.foundPossibleResultPoint(point);
            }
          }
          return true;
        }
      }
      return false;
    };
    FinderPatternFinder2.prototype.findRowSkip = function() {
      var e_1, _a2;
      var max = this.possibleCenters.length;
      if (max <= 1) {
        return 0;
      }
      var firstConfirmedCenter = null;
      try {
        for (var _b = __values27(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {
          var center = _c.value;
          if (center.getCount() >= FinderPatternFinder2.CENTER_QUORUM) {
            if (firstConfirmedCenter == null) {
              firstConfirmedCenter = center;
            } else {
              this.hasSkipped = true;
              return (
                /*(int) */
                Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)
              );
            }
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return 0;
    };
    FinderPatternFinder2.prototype.haveMultiplyConfirmedCenters = function() {
      var e_2, _a2, e_3, _b;
      var confirmedCount = 0;
      var totalModuleSize = 0;
      var max = this.possibleCenters.length;
      try {
        for (var _c = __values27(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {
          var pattern = _d.value;
          if (pattern.getCount() >= FinderPatternFinder2.CENTER_QUORUM) {
            confirmedCount++;
            totalModuleSize += pattern.getEstimatedModuleSize();
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return)) _a2.call(_c);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      if (confirmedCount < 3) {
        return false;
      }
      var average = totalModuleSize / max;
      var totalDeviation = 0;
      try {
        for (var _e = __values27(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {
          var pattern = _f.value;
          totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return totalDeviation <= 0.05 * totalModuleSize;
    };
    FinderPatternFinder2.prototype.selectBestPatterns = function() {
      var e_4, _a2, e_5, _b;
      var startSize = this.possibleCenters.length;
      if (startSize < 3) {
        throw new NotFoundException_default();
      }
      var possibleCenters = this.possibleCenters;
      var average;
      if (startSize > 3) {
        var totalModuleSize = 0;
        var square = 0;
        try {
          for (var _c = __values27(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {
            var center = _d.value;
            var size = center.getEstimatedModuleSize();
            totalModuleSize += size;
            square += size * size;
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a2 = _c.return)) _a2.call(_c);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
        average = totalModuleSize / startSize;
        var stdDev = Math.sqrt(square / startSize - average * average);
        possibleCenters.sort(
          /**
           * <p>Orders by furthest from average</p>
           */
          // FurthestFromAverageComparator implements Comparator<FinderPattern>
          function(center1, center2) {
            var dA = Math.abs(center2.getEstimatedModuleSize() - average);
            var dB = Math.abs(center1.getEstimatedModuleSize() - average);
            return dA < dB ? -1 : dA > dB ? 1 : 0;
          }
        );
        var limit = Math.max(0.2 * average, stdDev);
        for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {
          var pattern = possibleCenters[i];
          if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {
            possibleCenters.splice(i, 1);
            i--;
          }
        }
      }
      if (possibleCenters.length > 3) {
        var totalModuleSize = 0;
        try {
          for (var possibleCenters_1 = __values27(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {
            var possibleCenter = possibleCenters_1_1.value;
            totalModuleSize += possibleCenter.getEstimatedModuleSize();
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
        average = totalModuleSize / possibleCenters.length;
        possibleCenters.sort(
          /**
           * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>
           */
          // CenterComparator implements Comparator<FinderPattern>
          function(center1, center2) {
            if (center2.getCount() === center1.getCount()) {
              var dA = Math.abs(center2.getEstimatedModuleSize() - average);
              var dB = Math.abs(center1.getEstimatedModuleSize() - average);
              return dA < dB ? 1 : dA > dB ? -1 : 0;
            } else {
              return center2.getCount() - center1.getCount();
            }
          }
        );
        possibleCenters.splice(3);
      }
      return [
        possibleCenters[0],
        possibleCenters[1],
        possibleCenters[2]
      ];
    };
    FinderPatternFinder2.CENTER_QUORUM = 2;
    FinderPatternFinder2.MIN_SKIP = 3;
    FinderPatternFinder2.MAX_MODULES = 57;
    return FinderPatternFinder2;
  }()
);
var FinderPatternFinder_default = FinderPatternFinder;

// node_modules/@zxing/library/esm/core/qrcode/detector/Detector.js
var Detector3 = (
  /** @class */
  function() {
    function Detector5(image) {
      this.image = image;
    }
    Detector5.prototype.getImage = function() {
      return this.image;
    };
    Detector5.prototype.getResultPointCallback = function() {
      return this.resultPointCallback;
    };
    Detector5.prototype.detect = function(hints) {
      this.resultPointCallback = hints === null || hints === void 0 ? null : (
        /*(ResultPointCallback) */
        hints.get(DecodeHintType_default.NEED_RESULT_POINT_CALLBACK)
      );
      var finder = new FinderPatternFinder_default(this.image, this.resultPointCallback);
      var info = finder.find(hints);
      return this.processFinderPatternInfo(info);
    };
    Detector5.prototype.processFinderPatternInfo = function(info) {
      var topLeft = info.getTopLeft();
      var topRight = info.getTopRight();
      var bottomLeft = info.getBottomLeft();
      var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);
      if (moduleSize < 1) {
        throw new NotFoundException_default("No pattern found in proccess finder.");
      }
      var dimension = Detector5.computeDimension(topLeft, topRight, bottomLeft, moduleSize);
      var provisionalVersion = Version_default2.getProvisionalVersionForDimension(dimension);
      var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;
      var alignmentPattern = null;
      if (provisionalVersion.getAlignmentPatternCenters().length > 0) {
        var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();
        var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();
        var correctionToTopLeft = 1 - 3 / modulesBetweenFPCenters;
        var estAlignmentX = (
          /*(int) */
          Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()))
        );
        var estAlignmentY = (
          /*(int) */
          Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()))
        );
        for (var i = 4; i <= 16; i <<= 1) {
          try {
            alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);
            break;
          } catch (re) {
            if (!(re instanceof NotFoundException_default)) {
              throw re;
            }
          }
        }
      }
      var transform = Detector5.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);
      var bits = Detector5.sampleGrid(this.image, transform, dimension);
      var points;
      if (alignmentPattern === null) {
        points = [bottomLeft, topLeft, topRight];
      } else {
        points = [bottomLeft, topLeft, topRight, alignmentPattern];
      }
      return new DetectorResult_default(bits, points);
    };
    Detector5.createTransform = function(topLeft, topRight, bottomLeft, alignmentPattern, dimension) {
      var dimMinusThree = dimension - 3.5;
      var bottomRightX;
      var bottomRightY;
      var sourceBottomRightX;
      var sourceBottomRightY;
      if (alignmentPattern !== null) {
        bottomRightX = alignmentPattern.getX();
        bottomRightY = alignmentPattern.getY();
        sourceBottomRightX = dimMinusThree - 3;
        sourceBottomRightY = sourceBottomRightX;
      } else {
        bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();
        bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();
        sourceBottomRightX = dimMinusThree;
        sourceBottomRightY = dimMinusThree;
      }
      return PerspectiveTransform_default.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());
    };
    Detector5.sampleGrid = function(image, transform, dimension) {
      var sampler = GridSamplerInstance_default.getInstance();
      return sampler.sampleGridWithTransform(image, dimension, dimension, transform);
    };
    Detector5.computeDimension = function(topLeft, topRight, bottomLeft, moduleSize) {
      var tltrCentersDimension = MathUtils_default.round(ResultPoint_default.distance(topLeft, topRight) / moduleSize);
      var tlblCentersDimension = MathUtils_default.round(ResultPoint_default.distance(topLeft, bottomLeft) / moduleSize);
      var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;
      switch (dimension & 3) {
        case 0:
          dimension++;
          break;
        case 2:
          dimension--;
          break;
        case 3:
          throw new NotFoundException_default("Dimensions could be not found.");
      }
      return dimension;
    };
    Detector5.prototype.calculateModuleSize = function(topLeft, topRight, bottomLeft) {
      return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2;
    };
    Detector5.prototype.calculateModuleSizeOneWay = function(pattern, otherPattern) {
      var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(
        /*(int) */
        Math.floor(pattern.getX()),
        /*(int) */
        Math.floor(pattern.getY()),
        /*(int) */
        Math.floor(otherPattern.getX()),
        /*(int) */
        Math.floor(otherPattern.getY())
      );
      var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(
        /*(int) */
        Math.floor(otherPattern.getX()),
        /*(int) */
        Math.floor(otherPattern.getY()),
        /*(int) */
        Math.floor(pattern.getX()),
        /*(int) */
        Math.floor(pattern.getY())
      );
      if (isNaN(moduleSizeEst1)) {
        return moduleSizeEst2 / 7;
      }
      if (isNaN(moduleSizeEst2)) {
        return moduleSizeEst1 / 7;
      }
      return (moduleSizeEst1 + moduleSizeEst2) / 14;
    };
    Detector5.prototype.sizeOfBlackWhiteBlackRunBothWays = function(fromX, fromY, toX, toY) {
      var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);
      var scale = 1;
      var otherToX = fromX - (toX - fromX);
      if (otherToX < 0) {
        scale = fromX / /*(float) */
        (fromX - otherToX);
        otherToX = 0;
      } else if (otherToX >= this.image.getWidth()) {
        scale = (this.image.getWidth() - 1 - fromX) / /*(float) */
        (otherToX - fromX);
        otherToX = this.image.getWidth() - 1;
      }
      var otherToY = (
        /*(int) */
        Math.floor(fromY - (toY - fromY) * scale)
      );
      scale = 1;
      if (otherToY < 0) {
        scale = fromY / /*(float) */
        (fromY - otherToY);
        otherToY = 0;
      } else if (otherToY >= this.image.getHeight()) {
        scale = (this.image.getHeight() - 1 - fromY) / /*(float) */
        (otherToY - fromY);
        otherToY = this.image.getHeight() - 1;
      }
      otherToX = /*(int) */
      Math.floor(fromX + (otherToX - fromX) * scale);
      result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);
      return result - 1;
    };
    Detector5.prototype.sizeOfBlackWhiteBlackRun = function(fromX, fromY, toX, toY) {
      var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);
      if (steep) {
        var temp = fromX;
        fromX = fromY;
        fromY = temp;
        temp = toX;
        toX = toY;
        toY = temp;
      }
      var dx = Math.abs(toX - fromX);
      var dy = Math.abs(toY - fromY);
      var error = -dx / 2;
      var xstep = fromX < toX ? 1 : -1;
      var ystep = fromY < toY ? 1 : -1;
      var state = 0;
      var xLimit = toX + xstep;
      for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {
        var realX = steep ? y : x;
        var realY = steep ? x : y;
        if (state === 1 === this.image.get(realX, realY)) {
          if (state === 2) {
            return MathUtils_default.distance(x, y, fromX, fromY);
          }
          state++;
        }
        error += dy;
        if (error > 0) {
          if (y === toY) {
            break;
          }
          y += ystep;
          error -= dx;
        }
      }
      if (state === 2) {
        return MathUtils_default.distance(toX + xstep, toY, fromX, fromY);
      }
      return NaN;
    };
    Detector5.prototype.findAlignmentInRegion = function(overallEstModuleSize, estAlignmentX, estAlignmentY, allowanceFactor) {
      var allowance = (
        /*(int) */
        Math.floor(allowanceFactor * overallEstModuleSize)
      );
      var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);
      var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);
      if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {
        throw new NotFoundException_default("Alignment top exceeds estimated module size.");
      }
      var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);
      var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);
      if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {
        throw new NotFoundException_default("Alignment bottom exceeds estimated module size.");
      }
      var alignmentFinder = new AlignmentPatternFinder_default(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);
      return alignmentFinder.find();
    };
    return Detector5;
  }()
);
var Detector_default3 = Detector3;

// node_modules/@zxing/library/esm/core/qrcode/QRCodeReader.js
var QRCodeReader = (
  /** @class */
  function() {
    function QRCodeReader2() {
      this.decoder = new Decoder_default3();
    }
    QRCodeReader2.prototype.getDecoder = function() {
      return this.decoder;
    };
    QRCodeReader2.prototype.decode = function(image, hints) {
      var decoderResult;
      var points;
      if (hints !== void 0 && hints !== null && void 0 !== hints.get(DecodeHintType_default.PURE_BARCODE)) {
        var bits = QRCodeReader2.extractPureBits(image.getBlackMatrix());
        decoderResult = this.decoder.decodeBitMatrix(bits, hints);
        points = QRCodeReader2.NO_POINTS;
      } else {
        var detectorResult = new Detector_default3(image.getBlackMatrix()).detect(hints);
        decoderResult = this.decoder.decodeBitMatrix(detectorResult.getBits(), hints);
        points = detectorResult.getPoints();
      }
      if (decoderResult.getOther() instanceof QRCodeDecoderMetaData_default) {
        decoderResult.getOther().applyMirroredCorrection(points);
      }
      var result = new Result_default(decoderResult.getText(), decoderResult.getRawBytes(), void 0, points, BarcodeFormat_default.QR_CODE, void 0);
      var byteSegments = decoderResult.getByteSegments();
      if (byteSegments !== null) {
        result.putMetadata(ResultMetadataType_default.BYTE_SEGMENTS, byteSegments);
      }
      var ecLevel = decoderResult.getECLevel();
      if (ecLevel !== null) {
        result.putMetadata(ResultMetadataType_default.ERROR_CORRECTION_LEVEL, ecLevel);
      }
      if (decoderResult.hasStructuredAppend()) {
        result.putMetadata(ResultMetadataType_default.STRUCTURED_APPEND_SEQUENCE, decoderResult.getStructuredAppendSequenceNumber());
        result.putMetadata(ResultMetadataType_default.STRUCTURED_APPEND_PARITY, decoderResult.getStructuredAppendParity());
      }
      return result;
    };
    QRCodeReader2.prototype.reset = function() {
    };
    QRCodeReader2.extractPureBits = function(image) {
      var leftTopBlack = image.getTopLeftOnBit();
      var rightBottomBlack = image.getBottomRightOnBit();
      if (leftTopBlack === null || rightBottomBlack === null) {
        throw new NotFoundException_default();
      }
      var moduleSize = this.moduleSize(leftTopBlack, image);
      var top = leftTopBlack[1];
      var bottom = rightBottomBlack[1];
      var left = leftTopBlack[0];
      var right = rightBottomBlack[0];
      if (left >= right || top >= bottom) {
        throw new NotFoundException_default();
      }
      if (bottom - top !== right - left) {
        right = left + (bottom - top);
        if (right >= image.getWidth()) {
          throw new NotFoundException_default();
        }
      }
      var matrixWidth = Math.round((right - left + 1) / moduleSize);
      var matrixHeight = Math.round((bottom - top + 1) / moduleSize);
      if (matrixWidth <= 0 || matrixHeight <= 0) {
        throw new NotFoundException_default();
      }
      if (matrixHeight !== matrixWidth) {
        throw new NotFoundException_default();
      }
      var nudge = (
        /*(int) */
        Math.floor(moduleSize / 2)
      );
      top += nudge;
      left += nudge;
      var nudgedTooFarRight = left + /*(int) */
      Math.floor((matrixWidth - 1) * moduleSize) - right;
      if (nudgedTooFarRight > 0) {
        if (nudgedTooFarRight > nudge) {
          throw new NotFoundException_default();
        }
        left -= nudgedTooFarRight;
      }
      var nudgedTooFarDown = top + /*(int) */
      Math.floor((matrixHeight - 1) * moduleSize) - bottom;
      if (nudgedTooFarDown > 0) {
        if (nudgedTooFarDown > nudge) {
          throw new NotFoundException_default();
        }
        top -= nudgedTooFarDown;
      }
      var bits = new BitMatrix_default(matrixWidth, matrixHeight);
      for (var y = 0; y < matrixHeight; y++) {
        var iOffset = top + /*(int) */
        Math.floor(y * moduleSize);
        for (var x = 0; x < matrixWidth; x++) {
          if (image.get(left + /*(int) */
          Math.floor(x * moduleSize), iOffset)) {
            bits.set(x, y);
          }
        }
      }
      return bits;
    };
    QRCodeReader2.moduleSize = function(leftTopBlack, image) {
      var height = image.getHeight();
      var width = image.getWidth();
      var x = leftTopBlack[0];
      var y = leftTopBlack[1];
      var inBlack = true;
      var transitions = 0;
      while (x < width && y < height) {
        if (inBlack !== image.get(x, y)) {
          if (++transitions === 5) {
            break;
          }
          inBlack = !inBlack;
        }
        x++;
        y++;
      }
      if (x === width || y === height) {
        throw new NotFoundException_default();
      }
      return (x - leftTopBlack[0]) / 7;
    };
    QRCodeReader2.NO_POINTS = new Array();
    return QRCodeReader2;
  }()
);
var QRCodeReader_default = QRCodeReader;

// node_modules/@zxing/library/esm/core/pdf417/PDF417Common.js
var __values28 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var PDF417Common = (
  /** @class */
  function() {
    function PDF417Common2() {
    }
    PDF417Common2.prototype.PDF417Common = function() {
    };
    PDF417Common2.getBitCountSum = function(moduleBitCount) {
      return MathUtils_default.sum(moduleBitCount);
    };
    PDF417Common2.toIntArray = function(list) {
      var e_1, _a2;
      if (list == null || !list.length) {
        return PDF417Common2.EMPTY_INT_ARRAY;
      }
      var result = new Int32Array(list.length);
      var i = 0;
      try {
        for (var list_1 = __values28(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
          var integer = list_1_1.value;
          result[i++] = integer;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (list_1_1 && !list_1_1.done && (_a2 = list_1.return)) _a2.call(list_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return result;
    };
    PDF417Common2.getCodeword = function(symbol) {
      var i = Arrays_default.binarySearch(PDF417Common2.SYMBOL_TABLE, symbol & 262143);
      if (i < 0) {
        return -1;
      }
      return (PDF417Common2.CODEWORD_TABLE[i] - 1) % PDF417Common2.NUMBER_OF_CODEWORDS;
    };
    PDF417Common2.NUMBER_OF_CODEWORDS = 929;
    PDF417Common2.MAX_CODEWORDS_IN_BARCODE = PDF417Common2.NUMBER_OF_CODEWORDS - 1;
    PDF417Common2.MIN_ROWS_IN_BARCODE = 3;
    PDF417Common2.MAX_ROWS_IN_BARCODE = 90;
    PDF417Common2.MODULES_IN_CODEWORD = 17;
    PDF417Common2.MODULES_IN_STOP_PATTERN = 18;
    PDF417Common2.BARS_IN_MODULE = 8;
    PDF417Common2.EMPTY_INT_ARRAY = new Int32Array([]);
    PDF417Common2.SYMBOL_TABLE = Int32Array.from([
      66142,
      66170,
      66206,
      66236,
      66290,
      66292,
      66350,
      66382,
      66396,
      66454,
      66470,
      66476,
      66594,
      66600,
      66614,
      66626,
      66628,
      66632,
      66640,
      66654,
      66662,
      66668,
      66682,
      66690,
      66718,
      66720,
      66748,
      66758,
      66776,
      66798,
      66802,
      66804,
      66820,
      66824,
      66832,
      66846,
      66848,
      66876,
      66880,
      66936,
      66950,
      66956,
      66968,
      66992,
      67006,
      67022,
      67036,
      67042,
      67044,
      67048,
      67062,
      67118,
      67150,
      67164,
      67214,
      67228,
      67256,
      67294,
      67322,
      67350,
      67366,
      67372,
      67398,
      67404,
      67416,
      67438,
      67474,
      67476,
      67490,
      67492,
      67496,
      67510,
      67618,
      67624,
      67650,
      67656,
      67664,
      67678,
      67686,
      67692,
      67706,
      67714,
      67716,
      67728,
      67742,
      67744,
      67772,
      67782,
      67788,
      67800,
      67822,
      67826,
      67828,
      67842,
      67848,
      67870,
      67872,
      67900,
      67904,
      67960,
      67974,
      67992,
      68016,
      68030,
      68046,
      68060,
      68066,
      68068,
      68072,
      68086,
      68104,
      68112,
      68126,
      68128,
      68156,
      68160,
      68216,
      68336,
      68358,
      68364,
      68376,
      68400,
      68414,
      68448,
      68476,
      68494,
      68508,
      68536,
      68546,
      68548,
      68552,
      68560,
      68574,
      68582,
      68588,
      68654,
      68686,
      68700,
      68706,
      68708,
      68712,
      68726,
      68750,
      68764,
      68792,
      68802,
      68804,
      68808,
      68816,
      68830,
      68838,
      68844,
      68858,
      68878,
      68892,
      68920,
      68976,
      68990,
      68994,
      68996,
      69e3,
      69008,
      69022,
      69024,
      69052,
      69062,
      69068,
      69080,
      69102,
      69106,
      69108,
      69142,
      69158,
      69164,
      69190,
      69208,
      69230,
      69254,
      69260,
      69272,
      69296,
      69310,
      69326,
      69340,
      69386,
      69394,
      69396,
      69410,
      69416,
      69430,
      69442,
      69444,
      69448,
      69456,
      69470,
      69478,
      69484,
      69554,
      69556,
      69666,
      69672,
      69698,
      69704,
      69712,
      69726,
      69754,
      69762,
      69764,
      69776,
      69790,
      69792,
      69820,
      69830,
      69836,
      69848,
      69870,
      69874,
      69876,
      69890,
      69918,
      69920,
      69948,
      69952,
      70008,
      70022,
      70040,
      70064,
      70078,
      70094,
      70108,
      70114,
      70116,
      70120,
      70134,
      70152,
      70174,
      70176,
      70264,
      70384,
      70412,
      70448,
      70462,
      70496,
      70524,
      70542,
      70556,
      70584,
      70594,
      70600,
      70608,
      70622,
      70630,
      70636,
      70664,
      70672,
      70686,
      70688,
      70716,
      70720,
      70776,
      70896,
      71136,
      71180,
      71192,
      71216,
      71230,
      71264,
      71292,
      71360,
      71416,
      71452,
      71480,
      71536,
      71550,
      71554,
      71556,
      71560,
      71568,
      71582,
      71584,
      71612,
      71622,
      71628,
      71640,
      71662,
      71726,
      71732,
      71758,
      71772,
      71778,
      71780,
      71784,
      71798,
      71822,
      71836,
      71864,
      71874,
      71880,
      71888,
      71902,
      71910,
      71916,
      71930,
      71950,
      71964,
      71992,
      72048,
      72062,
      72066,
      72068,
      72080,
      72094,
      72096,
      72124,
      72134,
      72140,
      72152,
      72174,
      72178,
      72180,
      72206,
      72220,
      72248,
      72304,
      72318,
      72416,
      72444,
      72456,
      72464,
      72478,
      72480,
      72508,
      72512,
      72568,
      72588,
      72600,
      72624,
      72638,
      72654,
      72668,
      72674,
      72676,
      72680,
      72694,
      72726,
      72742,
      72748,
      72774,
      72780,
      72792,
      72814,
      72838,
      72856,
      72880,
      72894,
      72910,
      72924,
      72930,
      72932,
      72936,
      72950,
      72966,
      72972,
      72984,
      73008,
      73022,
      73056,
      73084,
      73102,
      73116,
      73144,
      73156,
      73160,
      73168,
      73182,
      73190,
      73196,
      73210,
      73226,
      73234,
      73236,
      73250,
      73252,
      73256,
      73270,
      73282,
      73284,
      73296,
      73310,
      73318,
      73324,
      73346,
      73348,
      73352,
      73360,
      73374,
      73376,
      73404,
      73414,
      73420,
      73432,
      73454,
      73498,
      73518,
      73522,
      73524,
      73550,
      73564,
      73570,
      73572,
      73576,
      73590,
      73800,
      73822,
      73858,
      73860,
      73872,
      73886,
      73888,
      73916,
      73944,
      73970,
      73972,
      73992,
      74014,
      74016,
      74044,
      74048,
      74104,
      74118,
      74136,
      74160,
      74174,
      74210,
      74212,
      74216,
      74230,
      74244,
      74256,
      74270,
      74272,
      74360,
      74480,
      74502,
      74508,
      74544,
      74558,
      74592,
      74620,
      74638,
      74652,
      74680,
      74690,
      74696,
      74704,
      74726,
      74732,
      74782,
      74784,
      74812,
      74992,
      75232,
      75288,
      75326,
      75360,
      75388,
      75456,
      75512,
      75576,
      75632,
      75646,
      75650,
      75652,
      75664,
      75678,
      75680,
      75708,
      75718,
      75724,
      75736,
      75758,
      75808,
      75836,
      75840,
      75896,
      76016,
      76256,
      76736,
      76824,
      76848,
      76862,
      76896,
      76924,
      76992,
      77048,
      77296,
      77340,
      77368,
      77424,
      77438,
      77536,
      77564,
      77572,
      77576,
      77584,
      77600,
      77628,
      77632,
      77688,
      77702,
      77708,
      77720,
      77744,
      77758,
      77774,
      77788,
      77870,
      77902,
      77916,
      77922,
      77928,
      77966,
      77980,
      78008,
      78018,
      78024,
      78032,
      78046,
      78060,
      78074,
      78094,
      78136,
      78192,
      78206,
      78210,
      78212,
      78224,
      78238,
      78240,
      78268,
      78278,
      78284,
      78296,
      78322,
      78324,
      78350,
      78364,
      78448,
      78462,
      78560,
      78588,
      78600,
      78622,
      78624,
      78652,
      78656,
      78712,
      78726,
      78744,
      78768,
      78782,
      78798,
      78812,
      78818,
      78820,
      78824,
      78838,
      78862,
      78876,
      78904,
      78960,
      78974,
      79072,
      79100,
      79296,
      79352,
      79368,
      79376,
      79390,
      79392,
      79420,
      79424,
      79480,
      79600,
      79628,
      79640,
      79664,
      79678,
      79712,
      79740,
      79772,
      79800,
      79810,
      79812,
      79816,
      79824,
      79838,
      79846,
      79852,
      79894,
      79910,
      79916,
      79942,
      79948,
      79960,
      79982,
      79988,
      80006,
      80024,
      80048,
      80062,
      80078,
      80092,
      80098,
      80100,
      80104,
      80134,
      80140,
      80176,
      80190,
      80224,
      80252,
      80270,
      80284,
      80312,
      80328,
      80336,
      80350,
      80358,
      80364,
      80378,
      80390,
      80396,
      80408,
      80432,
      80446,
      80480,
      80508,
      80576,
      80632,
      80654,
      80668,
      80696,
      80752,
      80766,
      80776,
      80784,
      80798,
      80800,
      80828,
      80844,
      80856,
      80878,
      80882,
      80884,
      80914,
      80916,
      80930,
      80932,
      80936,
      80950,
      80962,
      80968,
      80976,
      80990,
      80998,
      81004,
      81026,
      81028,
      81040,
      81054,
      81056,
      81084,
      81094,
      81100,
      81112,
      81134,
      81154,
      81156,
      81160,
      81168,
      81182,
      81184,
      81212,
      81216,
      81272,
      81286,
      81292,
      81304,
      81328,
      81342,
      81358,
      81372,
      81380,
      81384,
      81398,
      81434,
      81454,
      81458,
      81460,
      81486,
      81500,
      81506,
      81508,
      81512,
      81526,
      81550,
      81564,
      81592,
      81602,
      81604,
      81608,
      81616,
      81630,
      81638,
      81644,
      81702,
      81708,
      81722,
      81734,
      81740,
      81752,
      81774,
      81778,
      81780,
      82050,
      82078,
      82080,
      82108,
      82180,
      82184,
      82192,
      82206,
      82208,
      82236,
      82240,
      82296,
      82316,
      82328,
      82352,
      82366,
      82402,
      82404,
      82408,
      82440,
      82448,
      82462,
      82464,
      82492,
      82496,
      82552,
      82672,
      82694,
      82700,
      82712,
      82736,
      82750,
      82784,
      82812,
      82830,
      82882,
      82884,
      82888,
      82896,
      82918,
      82924,
      82952,
      82960,
      82974,
      82976,
      83004,
      83008,
      83064,
      83184,
      83424,
      83468,
      83480,
      83504,
      83518,
      83552,
      83580,
      83648,
      83704,
      83740,
      83768,
      83824,
      83838,
      83842,
      83844,
      83848,
      83856,
      83872,
      83900,
      83910,
      83916,
      83928,
      83950,
      83984,
      84e3,
      84028,
      84032,
      84088,
      84208,
      84448,
      84928,
      85040,
      85054,
      85088,
      85116,
      85184,
      85240,
      85488,
      85560,
      85616,
      85630,
      85728,
      85756,
      85764,
      85768,
      85776,
      85790,
      85792,
      85820,
      85824,
      85880,
      85894,
      85900,
      85912,
      85936,
      85966,
      85980,
      86048,
      86080,
      86136,
      86256,
      86496,
      86976,
      88160,
      88188,
      88256,
      88312,
      88560,
      89056,
      89200,
      89214,
      89312,
      89340,
      89536,
      89592,
      89608,
      89616,
      89632,
      89664,
      89720,
      89840,
      89868,
      89880,
      89904,
      89952,
      89980,
      89998,
      90012,
      90040,
      90190,
      90204,
      90254,
      90268,
      90296,
      90306,
      90308,
      90312,
      90334,
      90382,
      90396,
      90424,
      90480,
      90494,
      90500,
      90504,
      90512,
      90526,
      90528,
      90556,
      90566,
      90572,
      90584,
      90610,
      90612,
      90638,
      90652,
      90680,
      90736,
      90750,
      90848,
      90876,
      90884,
      90888,
      90896,
      90910,
      90912,
      90940,
      90944,
      91e3,
      91014,
      91020,
      91032,
      91056,
      91070,
      91086,
      91100,
      91106,
      91108,
      91112,
      91126,
      91150,
      91164,
      91192,
      91248,
      91262,
      91360,
      91388,
      91584,
      91640,
      91664,
      91678,
      91680,
      91708,
      91712,
      91768,
      91888,
      91928,
      91952,
      91966,
      92e3,
      92028,
      92046,
      92060,
      92088,
      92098,
      92100,
      92104,
      92112,
      92126,
      92134,
      92140,
      92188,
      92216,
      92272,
      92384,
      92412,
      92608,
      92664,
      93168,
      93200,
      93214,
      93216,
      93244,
      93248,
      93304,
      93424,
      93664,
      93720,
      93744,
      93758,
      93792,
      93820,
      93888,
      93944,
      93980,
      94008,
      94064,
      94078,
      94084,
      94088,
      94096,
      94110,
      94112,
      94140,
      94150,
      94156,
      94168,
      94246,
      94252,
      94278,
      94284,
      94296,
      94318,
      94342,
      94348,
      94360,
      94384,
      94398,
      94414,
      94428,
      94440,
      94470,
      94476,
      94488,
      94512,
      94526,
      94560,
      94588,
      94606,
      94620,
      94648,
      94658,
      94660,
      94664,
      94672,
      94686,
      94694,
      94700,
      94714,
      94726,
      94732,
      94744,
      94768,
      94782,
      94816,
      94844,
      94912,
      94968,
      94990,
      95004,
      95032,
      95088,
      95102,
      95112,
      95120,
      95134,
      95136,
      95164,
      95180,
      95192,
      95214,
      95218,
      95220,
      95244,
      95256,
      95280,
      95294,
      95328,
      95356,
      95424,
      95480,
      95728,
      95758,
      95772,
      95800,
      95856,
      95870,
      95968,
      95996,
      96008,
      96016,
      96030,
      96032,
      96060,
      96064,
      96120,
      96152,
      96176,
      96190,
      96220,
      96226,
      96228,
      96232,
      96290,
      96292,
      96296,
      96310,
      96322,
      96324,
      96328,
      96336,
      96350,
      96358,
      96364,
      96386,
      96388,
      96392,
      96400,
      96414,
      96416,
      96444,
      96454,
      96460,
      96472,
      96494,
      96498,
      96500,
      96514,
      96516,
      96520,
      96528,
      96542,
      96544,
      96572,
      96576,
      96632,
      96646,
      96652,
      96664,
      96688,
      96702,
      96718,
      96732,
      96738,
      96740,
      96744,
      96758,
      96772,
      96776,
      96784,
      96798,
      96800,
      96828,
      96832,
      96888,
      97008,
      97030,
      97036,
      97048,
      97072,
      97086,
      97120,
      97148,
      97166,
      97180,
      97208,
      97220,
      97224,
      97232,
      97246,
      97254,
      97260,
      97326,
      97330,
      97332,
      97358,
      97372,
      97378,
      97380,
      97384,
      97398,
      97422,
      97436,
      97464,
      97474,
      97476,
      97480,
      97488,
      97502,
      97510,
      97516,
      97550,
      97564,
      97592,
      97648,
      97666,
      97668,
      97672,
      97680,
      97694,
      97696,
      97724,
      97734,
      97740,
      97752,
      97774,
      97830,
      97836,
      97850,
      97862,
      97868,
      97880,
      97902,
      97906,
      97908,
      97926,
      97932,
      97944,
      97968,
      97998,
      98012,
      98018,
      98020,
      98024,
      98038,
      98618,
      98674,
      98676,
      98838,
      98854,
      98874,
      98892,
      98904,
      98926,
      98930,
      98932,
      98968,
      99006,
      99042,
      99044,
      99048,
      99062,
      99166,
      99194,
      99246,
      99286,
      99350,
      99366,
      99372,
      99386,
      99398,
      99416,
      99438,
      99442,
      99444,
      99462,
      99504,
      99518,
      99534,
      99548,
      99554,
      99556,
      99560,
      99574,
      99590,
      99596,
      99608,
      99632,
      99646,
      99680,
      99708,
      99726,
      99740,
      99768,
      99778,
      99780,
      99784,
      99792,
      99806,
      99814,
      99820,
      99834,
      99858,
      99860,
      99874,
      99880,
      99894,
      99906,
      99920,
      99934,
      99962,
      99970,
      99972,
      99976,
      99984,
      99998,
      1e5,
      100028,
      100038,
      100044,
      100056,
      100078,
      100082,
      100084,
      100142,
      100174,
      100188,
      100246,
      100262,
      100268,
      100306,
      100308,
      100390,
      100396,
      100410,
      100422,
      100428,
      100440,
      100462,
      100466,
      100468,
      100486,
      100504,
      100528,
      100542,
      100558,
      100572,
      100578,
      100580,
      100584,
      100598,
      100620,
      100656,
      100670,
      100704,
      100732,
      100750,
      100792,
      100802,
      100808,
      100816,
      100830,
      100838,
      100844,
      100858,
      100888,
      100912,
      100926,
      100960,
      100988,
      101056,
      101112,
      101148,
      101176,
      101232,
      101246,
      101250,
      101252,
      101256,
      101264,
      101278,
      101280,
      101308,
      101318,
      101324,
      101336,
      101358,
      101362,
      101364,
      101410,
      101412,
      101416,
      101430,
      101442,
      101448,
      101456,
      101470,
      101478,
      101498,
      101506,
      101508,
      101520,
      101534,
      101536,
      101564,
      101580,
      101618,
      101620,
      101636,
      101640,
      101648,
      101662,
      101664,
      101692,
      101696,
      101752,
      101766,
      101784,
      101838,
      101858,
      101860,
      101864,
      101934,
      101938,
      101940,
      101966,
      101980,
      101986,
      101988,
      101992,
      102030,
      102044,
      102072,
      102082,
      102084,
      102088,
      102096,
      102138,
      102166,
      102182,
      102188,
      102214,
      102220,
      102232,
      102254,
      102282,
      102290,
      102292,
      102306,
      102308,
      102312,
      102326,
      102444,
      102458,
      102470,
      102476,
      102488,
      102514,
      102516,
      102534,
      102552,
      102576,
      102590,
      102606,
      102620,
      102626,
      102632,
      102646,
      102662,
      102668,
      102704,
      102718,
      102752,
      102780,
      102798,
      102812,
      102840,
      102850,
      102856,
      102864,
      102878,
      102886,
      102892,
      102906,
      102936,
      102974,
      103008,
      103036,
      103104,
      103160,
      103224,
      103280,
      103294,
      103298,
      103300,
      103312,
      103326,
      103328,
      103356,
      103366,
      103372,
      103384,
      103406,
      103410,
      103412,
      103472,
      103486,
      103520,
      103548,
      103616,
      103672,
      103920,
      103992,
      104048,
      104062,
      104160,
      104188,
      104194,
      104196,
      104200,
      104208,
      104224,
      104252,
      104256,
      104312,
      104326,
      104332,
      104344,
      104368,
      104382,
      104398,
      104412,
      104418,
      104420,
      104424,
      104482,
      104484,
      104514,
      104520,
      104528,
      104542,
      104550,
      104570,
      104578,
      104580,
      104592,
      104606,
      104608,
      104636,
      104652,
      104690,
      104692,
      104706,
      104712,
      104734,
      104736,
      104764,
      104768,
      104824,
      104838,
      104856,
      104910,
      104930,
      104932,
      104936,
      104968,
      104976,
      104990,
      104992,
      105020,
      105024,
      105080,
      105200,
      105240,
      105278,
      105312,
      105372,
      105410,
      105412,
      105416,
      105424,
      105446,
      105518,
      105524,
      105550,
      105564,
      105570,
      105572,
      105576,
      105614,
      105628,
      105656,
      105666,
      105672,
      105680,
      105702,
      105722,
      105742,
      105756,
      105784,
      105840,
      105854,
      105858,
      105860,
      105864,
      105872,
      105888,
      105932,
      105970,
      105972,
      106006,
      106022,
      106028,
      106054,
      106060,
      106072,
      106100,
      106118,
      106124,
      106136,
      106160,
      106174,
      106190,
      106210,
      106212,
      106216,
      106250,
      106258,
      106260,
      106274,
      106276,
      106280,
      106306,
      106308,
      106312,
      106320,
      106334,
      106348,
      106394,
      106414,
      106418,
      106420,
      106566,
      106572,
      106610,
      106612,
      106630,
      106636,
      106648,
      106672,
      106686,
      106722,
      106724,
      106728,
      106742,
      106758,
      106764,
      106776,
      106800,
      106814,
      106848,
      106876,
      106894,
      106908,
      106936,
      106946,
      106948,
      106952,
      106960,
      106974,
      106982,
      106988,
      107032,
      107056,
      107070,
      107104,
      107132,
      107200,
      107256,
      107292,
      107320,
      107376,
      107390,
      107394,
      107396,
      107400,
      107408,
      107422,
      107424,
      107452,
      107462,
      107468,
      107480,
      107502,
      107506,
      107508,
      107544,
      107568,
      107582,
      107616,
      107644,
      107712,
      107768,
      108016,
      108060,
      108088,
      108144,
      108158,
      108256,
      108284,
      108290,
      108292,
      108296,
      108304,
      108318,
      108320,
      108348,
      108352,
      108408,
      108422,
      108428,
      108440,
      108464,
      108478,
      108494,
      108508,
      108514,
      108516,
      108520,
      108592,
      108640,
      108668,
      108736,
      108792,
      109040,
      109536,
      109680,
      109694,
      109792,
      109820,
      110016,
      110072,
      110084,
      110088,
      110096,
      110112,
      110140,
      110144,
      110200,
      110320,
      110342,
      110348,
      110360,
      110384,
      110398,
      110432,
      110460,
      110478,
      110492,
      110520,
      110532,
      110536,
      110544,
      110558,
      110658,
      110686,
      110714,
      110722,
      110724,
      110728,
      110736,
      110750,
      110752,
      110780,
      110796,
      110834,
      110836,
      110850,
      110852,
      110856,
      110864,
      110878,
      110880,
      110908,
      110912,
      110968,
      110982,
      111e3,
      111054,
      111074,
      111076,
      111080,
      111108,
      111112,
      111120,
      111134,
      111136,
      111164,
      111168,
      111224,
      111344,
      111372,
      111422,
      111456,
      111516,
      111554,
      111556,
      111560,
      111568,
      111590,
      111632,
      111646,
      111648,
      111676,
      111680,
      111736,
      111856,
      112096,
      112152,
      112224,
      112252,
      112320,
      112440,
      112514,
      112516,
      112520,
      112528,
      112542,
      112544,
      112588,
      112686,
      112718,
      112732,
      112782,
      112796,
      112824,
      112834,
      112836,
      112840,
      112848,
      112870,
      112890,
      112910,
      112924,
      112952,
      113008,
      113022,
      113026,
      113028,
      113032,
      113040,
      113054,
      113056,
      113100,
      113138,
      113140,
      113166,
      113180,
      113208,
      113264,
      113278,
      113376,
      113404,
      113416,
      113424,
      113440,
      113468,
      113472,
      113560,
      113614,
      113634,
      113636,
      113640,
      113686,
      113702,
      113708,
      113734,
      113740,
      113752,
      113778,
      113780,
      113798,
      113804,
      113816,
      113840,
      113854,
      113870,
      113890,
      113892,
      113896,
      113926,
      113932,
      113944,
      113968,
      113982,
      114016,
      114044,
      114076,
      114114,
      114116,
      114120,
      114128,
      114150,
      114170,
      114194,
      114196,
      114210,
      114212,
      114216,
      114242,
      114244,
      114248,
      114256,
      114270,
      114278,
      114306,
      114308,
      114312,
      114320,
      114334,
      114336,
      114364,
      114380,
      114420,
      114458,
      114478,
      114482,
      114484,
      114510,
      114524,
      114530,
      114532,
      114536,
      114842,
      114866,
      114868,
      114970,
      114994,
      114996,
      115042,
      115044,
      115048,
      115062,
      115130,
      115226,
      115250,
      115252,
      115278,
      115292,
      115298,
      115300,
      115304,
      115318,
      115342,
      115394,
      115396,
      115400,
      115408,
      115422,
      115430,
      115436,
      115450,
      115478,
      115494,
      115514,
      115526,
      115532,
      115570,
      115572,
      115738,
      115758,
      115762,
      115764,
      115790,
      115804,
      115810,
      115812,
      115816,
      115830,
      115854,
      115868,
      115896,
      115906,
      115912,
      115920,
      115934,
      115942,
      115948,
      115962,
      115996,
      116024,
      116080,
      116094,
      116098,
      116100,
      116104,
      116112,
      116126,
      116128,
      116156,
      116166,
      116172,
      116184,
      116206,
      116210,
      116212,
      116246,
      116262,
      116268,
      116282,
      116294,
      116300,
      116312,
      116334,
      116338,
      116340,
      116358,
      116364,
      116376,
      116400,
      116414,
      116430,
      116444,
      116450,
      116452,
      116456,
      116498,
      116500,
      116514,
      116520,
      116534,
      116546,
      116548,
      116552,
      116560,
      116574,
      116582,
      116588,
      116602,
      116654,
      116694,
      116714,
      116762,
      116782,
      116786,
      116788,
      116814,
      116828,
      116834,
      116836,
      116840,
      116854,
      116878,
      116892,
      116920,
      116930,
      116936,
      116944,
      116958,
      116966,
      116972,
      116986,
      117006,
      117048,
      117104,
      117118,
      117122,
      117124,
      117136,
      117150,
      117152,
      117180,
      117190,
      117196,
      117208,
      117230,
      117234,
      117236,
      117304,
      117360,
      117374,
      117472,
      117500,
      117506,
      117508,
      117512,
      117520,
      117536,
      117564,
      117568,
      117624,
      117638,
      117644,
      117656,
      117680,
      117694,
      117710,
      117724,
      117730,
      117732,
      117736,
      117750,
      117782,
      117798,
      117804,
      117818,
      117830,
      117848,
      117874,
      117876,
      117894,
      117936,
      117950,
      117966,
      117986,
      117988,
      117992,
      118022,
      118028,
      118040,
      118064,
      118078,
      118112,
      118140,
      118172,
      118210,
      118212,
      118216,
      118224,
      118238,
      118246,
      118266,
      118306,
      118312,
      118338,
      118352,
      118366,
      118374,
      118394,
      118402,
      118404,
      118408,
      118416,
      118430,
      118432,
      118460,
      118476,
      118514,
      118516,
      118574,
      118578,
      118580,
      118606,
      118620,
      118626,
      118628,
      118632,
      118678,
      118694,
      118700,
      118730,
      118738,
      118740,
      118830,
      118834,
      118836,
      118862,
      118876,
      118882,
      118884,
      118888,
      118902,
      118926,
      118940,
      118968,
      118978,
      118980,
      118984,
      118992,
      119006,
      119014,
      119020,
      119034,
      119068,
      119096,
      119152,
      119166,
      119170,
      119172,
      119176,
      119184,
      119198,
      119200,
      119228,
      119238,
      119244,
      119256,
      119278,
      119282,
      119284,
      119324,
      119352,
      119408,
      119422,
      119520,
      119548,
      119554,
      119556,
      119560,
      119568,
      119582,
      119584,
      119612,
      119616,
      119672,
      119686,
      119692,
      119704,
      119728,
      119742,
      119758,
      119772,
      119778,
      119780,
      119784,
      119798,
      119920,
      119934,
      120032,
      120060,
      120256,
      120312,
      120324,
      120328,
      120336,
      120352,
      120384,
      120440,
      120560,
      120582,
      120588,
      120600,
      120624,
      120638,
      120672,
      120700,
      120718,
      120732,
      120760,
      120770,
      120772,
      120776,
      120784,
      120798,
      120806,
      120812,
      120870,
      120876,
      120890,
      120902,
      120908,
      120920,
      120946,
      120948,
      120966,
      120972,
      120984,
      121008,
      121022,
      121038,
      121058,
      121060,
      121064,
      121078,
      121100,
      121112,
      121136,
      121150,
      121184,
      121212,
      121244,
      121282,
      121284,
      121288,
      121296,
      121318,
      121338,
      121356,
      121368,
      121392,
      121406,
      121440,
      121468,
      121536,
      121592,
      121656,
      121730,
      121732,
      121736,
      121744,
      121758,
      121760,
      121804,
      121842,
      121844,
      121890,
      121922,
      121924,
      121928,
      121936,
      121950,
      121958,
      121978,
      121986,
      121988,
      121992,
      122e3,
      122014,
      122016,
      122044,
      122060,
      122098,
      122100,
      122116,
      122120,
      122128,
      122142,
      122144,
      122172,
      122176,
      122232,
      122246,
      122264,
      122318,
      122338,
      122340,
      122344,
      122414,
      122418,
      122420,
      122446,
      122460,
      122466,
      122468,
      122472,
      122510,
      122524,
      122552,
      122562,
      122564,
      122568,
      122576,
      122598,
      122618,
      122646,
      122662,
      122668,
      122694,
      122700,
      122712,
      122738,
      122740,
      122762,
      122770,
      122772,
      122786,
      122788,
      122792,
      123018,
      123026,
      123028,
      123042,
      123044,
      123048,
      123062,
      123098,
      123146,
      123154,
      123156,
      123170,
      123172,
      123176,
      123190,
      123202,
      123204,
      123208,
      123216,
      123238,
      123244,
      123258,
      123290,
      123314,
      123316,
      123402,
      123410,
      123412,
      123426,
      123428,
      123432,
      123446,
      123458,
      123464,
      123472,
      123486,
      123494,
      123500,
      123514,
      123522,
      123524,
      123528,
      123536,
      123552,
      123580,
      123590,
      123596,
      123608,
      123630,
      123634,
      123636,
      123674,
      123698,
      123700,
      123740,
      123746,
      123748,
      123752,
      123834,
      123914,
      123922,
      123924,
      123938,
      123944,
      123958,
      123970,
      123976,
      123984,
      123998,
      124006,
      124012,
      124026,
      124034,
      124036,
      124048,
      124062,
      124064,
      124092,
      124102,
      124108,
      124120,
      124142,
      124146,
      124148,
      124162,
      124164,
      124168,
      124176,
      124190,
      124192,
      124220,
      124224,
      124280,
      124294,
      124300,
      124312,
      124336,
      124350,
      124366,
      124380,
      124386,
      124388,
      124392,
      124406,
      124442,
      124462,
      124466,
      124468,
      124494,
      124508,
      124514,
      124520,
      124558,
      124572,
      124600,
      124610,
      124612,
      124616,
      124624,
      124646,
      124666,
      124694,
      124710,
      124716,
      124730,
      124742,
      124748,
      124760,
      124786,
      124788,
      124818,
      124820,
      124834,
      124836,
      124840,
      124854,
      124946,
      124948,
      124962,
      124964,
      124968,
      124982,
      124994,
      124996,
      125e3,
      125008,
      125022,
      125030,
      125036,
      125050,
      125058,
      125060,
      125064,
      125072,
      125086,
      125088,
      125116,
      125126,
      125132,
      125144,
      125166,
      125170,
      125172,
      125186,
      125188,
      125192,
      125200,
      125216,
      125244,
      125248,
      125304,
      125318,
      125324,
      125336,
      125360,
      125374,
      125390,
      125404,
      125410,
      125412,
      125416,
      125430,
      125444,
      125448,
      125456,
      125472,
      125504,
      125560,
      125680,
      125702,
      125708,
      125720,
      125744,
      125758,
      125792,
      125820,
      125838,
      125852,
      125880,
      125890,
      125892,
      125896,
      125904,
      125918,
      125926,
      125932,
      125978,
      125998,
      126002,
      126004,
      126030,
      126044,
      126050,
      126052,
      126056,
      126094,
      126108,
      126136,
      126146,
      126148,
      126152,
      126160,
      126182,
      126202,
      126222,
      126236,
      126264,
      126320,
      126334,
      126338,
      126340,
      126344,
      126352,
      126366,
      126368,
      126412,
      126450,
      126452,
      126486,
      126502,
      126508,
      126522,
      126534,
      126540,
      126552,
      126574,
      126578,
      126580,
      126598,
      126604,
      126616,
      126640,
      126654,
      126670,
      126684,
      126690,
      126692,
      126696,
      126738,
      126754,
      126756,
      126760,
      126774,
      126786,
      126788,
      126792,
      126800,
      126814,
      126822,
      126828,
      126842,
      126894,
      126898,
      126900,
      126934,
      127126,
      127142,
      127148,
      127162,
      127178,
      127186,
      127188,
      127254,
      127270,
      127276,
      127290,
      127302,
      127308,
      127320,
      127342,
      127346,
      127348,
      127370,
      127378,
      127380,
      127394,
      127396,
      127400,
      127450,
      127510,
      127526,
      127532,
      127546,
      127558,
      127576,
      127598,
      127602,
      127604,
      127622,
      127628,
      127640,
      127664,
      127678,
      127694,
      127708,
      127714,
      127716,
      127720,
      127734,
      127754,
      127762,
      127764,
      127778,
      127784,
      127810,
      127812,
      127816,
      127824,
      127838,
      127846,
      127866,
      127898,
      127918,
      127922,
      127924,
      128022,
      128038,
      128044,
      128058,
      128070,
      128076,
      128088,
      128110,
      128114,
      128116,
      128134,
      128140,
      128152,
      128176,
      128190,
      128206,
      128220,
      128226,
      128228,
      128232,
      128246,
      128262,
      128268,
      128280,
      128304,
      128318,
      128352,
      128380,
      128398,
      128412,
      128440,
      128450,
      128452,
      128456,
      128464,
      128478,
      128486,
      128492,
      128506,
      128522,
      128530,
      128532,
      128546,
      128548,
      128552,
      128566,
      128578,
      128580,
      128584,
      128592,
      128606,
      128614,
      128634,
      128642,
      128644,
      128648,
      128656,
      128670,
      128672,
      128700,
      128716,
      128754,
      128756,
      128794,
      128814,
      128818,
      128820,
      128846,
      128860,
      128866,
      128868,
      128872,
      128886,
      128918,
      128934,
      128940,
      128954,
      128978,
      128980,
      129178,
      129198,
      129202,
      129204,
      129238,
      129258,
      129306,
      129326,
      129330,
      129332,
      129358,
      129372,
      129378,
      129380,
      129384,
      129398,
      129430,
      129446,
      129452,
      129466,
      129482,
      129490,
      129492,
      129562,
      129582,
      129586,
      129588,
      129614,
      129628,
      129634,
      129636,
      129640,
      129654,
      129678,
      129692,
      129720,
      129730,
      129732,
      129736,
      129744,
      129758,
      129766,
      129772,
      129814,
      129830,
      129836,
      129850,
      129862,
      129868,
      129880,
      129902,
      129906,
      129908,
      129930,
      129938,
      129940,
      129954,
      129956,
      129960,
      129974,
      130010
    ]);
    PDF417Common2.CODEWORD_TABLE = Int32Array.from([
      2627,
      1819,
      2622,
      2621,
      1813,
      1812,
      2729,
      2724,
      2723,
      2779,
      2774,
      2773,
      902,
      896,
      908,
      868,
      865,
      861,
      859,
      2511,
      873,
      871,
      1780,
      835,
      2493,
      825,
      2491,
      842,
      837,
      844,
      1764,
      1762,
      811,
      810,
      809,
      2483,
      807,
      2482,
      806,
      2480,
      815,
      814,
      813,
      812,
      2484,
      817,
      816,
      1745,
      1744,
      1742,
      1746,
      2655,
      2637,
      2635,
      2626,
      2625,
      2623,
      2628,
      1820,
      2752,
      2739,
      2737,
      2728,
      2727,
      2725,
      2730,
      2785,
      2783,
      2778,
      2777,
      2775,
      2780,
      787,
      781,
      747,
      739,
      736,
      2413,
      754,
      752,
      1719,
      692,
      689,
      681,
      2371,
      678,
      2369,
      700,
      697,
      694,
      703,
      1688,
      1686,
      642,
      638,
      2343,
      631,
      2341,
      627,
      2338,
      651,
      646,
      643,
      2345,
      654,
      652,
      1652,
      1650,
      1647,
      1654,
      601,
      599,
      2322,
      596,
      2321,
      594,
      2319,
      2317,
      611,
      610,
      608,
      606,
      2324,
      603,
      2323,
      615,
      614,
      612,
      1617,
      1616,
      1614,
      1612,
      616,
      1619,
      1618,
      2575,
      2538,
      2536,
      905,
      901,
      898,
      909,
      2509,
      2507,
      2504,
      870,
      867,
      864,
      860,
      2512,
      875,
      872,
      1781,
      2490,
      2489,
      2487,
      2485,
      1748,
      836,
      834,
      832,
      830,
      2494,
      827,
      2492,
      843,
      841,
      839,
      845,
      1765,
      1763,
      2701,
      2676,
      2674,
      2653,
      2648,
      2656,
      2634,
      2633,
      2631,
      2629,
      1821,
      2638,
      2636,
      2770,
      2763,
      2761,
      2750,
      2745,
      2753,
      2736,
      2735,
      2733,
      2731,
      1848,
      2740,
      2738,
      2786,
      2784,
      591,
      588,
      576,
      569,
      566,
      2296,
      1590,
      537,
      534,
      526,
      2276,
      522,
      2274,
      545,
      542,
      539,
      548,
      1572,
      1570,
      481,
      2245,
      466,
      2242,
      462,
      2239,
      492,
      485,
      482,
      2249,
      496,
      494,
      1534,
      1531,
      1528,
      1538,
      413,
      2196,
      406,
      2191,
      2188,
      425,
      419,
      2202,
      415,
      2199,
      432,
      430,
      427,
      1472,
      1467,
      1464,
      433,
      1476,
      1474,
      368,
      367,
      2160,
      365,
      2159,
      362,
      2157,
      2155,
      2152,
      378,
      377,
      375,
      2166,
      372,
      2165,
      369,
      2162,
      383,
      381,
      379,
      2168,
      1419,
      1418,
      1416,
      1414,
      385,
      1411,
      384,
      1423,
      1422,
      1420,
      1424,
      2461,
      802,
      2441,
      2439,
      790,
      786,
      783,
      794,
      2409,
      2406,
      2403,
      750,
      742,
      738,
      2414,
      756,
      753,
      1720,
      2367,
      2365,
      2362,
      2359,
      1663,
      693,
      691,
      684,
      2373,
      680,
      2370,
      702,
      699,
      696,
      704,
      1690,
      1687,
      2337,
      2336,
      2334,
      2332,
      1624,
      2329,
      1622,
      640,
      637,
      2344,
      634,
      2342,
      630,
      2340,
      650,
      648,
      645,
      2346,
      655,
      653,
      1653,
      1651,
      1649,
      1655,
      2612,
      2597,
      2595,
      2571,
      2568,
      2565,
      2576,
      2534,
      2529,
      2526,
      1787,
      2540,
      2537,
      907,
      904,
      900,
      910,
      2503,
      2502,
      2500,
      2498,
      1768,
      2495,
      1767,
      2510,
      2508,
      2506,
      869,
      866,
      863,
      2513,
      876,
      874,
      1782,
      2720,
      2713,
      2711,
      2697,
      2694,
      2691,
      2702,
      2672,
      2670,
      2664,
      1828,
      2678,
      2675,
      2647,
      2646,
      2644,
      2642,
      1823,
      2639,
      1822,
      2654,
      2652,
      2650,
      2657,
      2771,
      1855,
      2765,
      2762,
      1850,
      1849,
      2751,
      2749,
      2747,
      2754,
      353,
      2148,
      344,
      342,
      336,
      2142,
      332,
      2140,
      345,
      1375,
      1373,
      306,
      2130,
      299,
      2128,
      295,
      2125,
      319,
      314,
      311,
      2132,
      1354,
      1352,
      1349,
      1356,
      262,
      257,
      2101,
      253,
      2096,
      2093,
      274,
      273,
      267,
      2107,
      263,
      2104,
      280,
      278,
      275,
      1316,
      1311,
      1308,
      1320,
      1318,
      2052,
      202,
      2050,
      2044,
      2040,
      219,
      2063,
      212,
      2060,
      208,
      2055,
      224,
      221,
      2066,
      1260,
      1258,
      1252,
      231,
      1248,
      229,
      1266,
      1264,
      1261,
      1268,
      155,
      1998,
      153,
      1996,
      1994,
      1991,
      1988,
      165,
      164,
      2007,
      162,
      2006,
      159,
      2003,
      2e3,
      172,
      171,
      169,
      2012,
      166,
      2010,
      1186,
      1184,
      1182,
      1179,
      175,
      1176,
      173,
      1192,
      1191,
      1189,
      1187,
      176,
      1194,
      1193,
      2313,
      2307,
      2305,
      592,
      589,
      2294,
      2292,
      2289,
      578,
      572,
      568,
      2297,
      580,
      1591,
      2272,
      2267,
      2264,
      1547,
      538,
      536,
      529,
      2278,
      525,
      2275,
      547,
      544,
      541,
      1574,
      1571,
      2237,
      2235,
      2229,
      1493,
      2225,
      1489,
      478,
      2247,
      470,
      2244,
      465,
      2241,
      493,
      488,
      484,
      2250,
      498,
      495,
      1536,
      1533,
      1530,
      1539,
      2187,
      2186,
      2184,
      2182,
      1432,
      2179,
      1430,
      2176,
      1427,
      414,
      412,
      2197,
      409,
      2195,
      405,
      2193,
      2190,
      426,
      424,
      421,
      2203,
      418,
      2201,
      431,
      429,
      1473,
      1471,
      1469,
      1466,
      434,
      1477,
      1475,
      2478,
      2472,
      2470,
      2459,
      2457,
      2454,
      2462,
      803,
      2437,
      2432,
      2429,
      1726,
      2443,
      2440,
      792,
      789,
      785,
      2401,
      2399,
      2393,
      1702,
      2389,
      1699,
      2411,
      2408,
      2405,
      745,
      741,
      2415,
      758,
      755,
      1721,
      2358,
      2357,
      2355,
      2353,
      1661,
      2350,
      1660,
      2347,
      1657,
      2368,
      2366,
      2364,
      2361,
      1666,
      690,
      687,
      2374,
      683,
      2372,
      701,
      698,
      705,
      1691,
      1689,
      2619,
      2617,
      2610,
      2608,
      2605,
      2613,
      2593,
      2588,
      2585,
      1803,
      2599,
      2596,
      2563,
      2561,
      2555,
      1797,
      2551,
      1795,
      2573,
      2570,
      2567,
      2577,
      2525,
      2524,
      2522,
      2520,
      1786,
      2517,
      1785,
      2514,
      1783,
      2535,
      2533,
      2531,
      2528,
      1788,
      2541,
      2539,
      906,
      903,
      911,
      2721,
      1844,
      2715,
      2712,
      1838,
      1836,
      2699,
      2696,
      2693,
      2703,
      1827,
      1826,
      1824,
      2673,
      2671,
      2669,
      2666,
      1829,
      2679,
      2677,
      1858,
      1857,
      2772,
      1854,
      1853,
      1851,
      1856,
      2766,
      2764,
      143,
      1987,
      139,
      1986,
      135,
      133,
      131,
      1984,
      128,
      1983,
      125,
      1981,
      138,
      137,
      136,
      1985,
      1133,
      1132,
      1130,
      112,
      110,
      1974,
      107,
      1973,
      104,
      1971,
      1969,
      122,
      121,
      119,
      117,
      1977,
      114,
      1976,
      124,
      1115,
      1114,
      1112,
      1110,
      1117,
      1116,
      84,
      83,
      1953,
      81,
      1952,
      78,
      1950,
      1948,
      1945,
      94,
      93,
      91,
      1959,
      88,
      1958,
      85,
      1955,
      99,
      97,
      95,
      1961,
      1086,
      1085,
      1083,
      1081,
      1078,
      100,
      1090,
      1089,
      1087,
      1091,
      49,
      47,
      1917,
      44,
      1915,
      1913,
      1910,
      1907,
      59,
      1926,
      56,
      1925,
      53,
      1922,
      1919,
      66,
      64,
      1931,
      61,
      1929,
      1042,
      1040,
      1038,
      71,
      1035,
      70,
      1032,
      68,
      1048,
      1047,
      1045,
      1043,
      1050,
      1049,
      12,
      10,
      1869,
      1867,
      1864,
      1861,
      21,
      1880,
      19,
      1877,
      1874,
      1871,
      28,
      1888,
      25,
      1886,
      22,
      1883,
      982,
      980,
      977,
      974,
      32,
      30,
      991,
      989,
      987,
      984,
      34,
      995,
      994,
      992,
      2151,
      2150,
      2147,
      2146,
      2144,
      356,
      355,
      354,
      2149,
      2139,
      2138,
      2136,
      2134,
      1359,
      343,
      341,
      338,
      2143,
      335,
      2141,
      348,
      347,
      346,
      1376,
      1374,
      2124,
      2123,
      2121,
      2119,
      1326,
      2116,
      1324,
      310,
      308,
      305,
      2131,
      302,
      2129,
      298,
      2127,
      320,
      318,
      316,
      313,
      2133,
      322,
      321,
      1355,
      1353,
      1351,
      1357,
      2092,
      2091,
      2089,
      2087,
      1276,
      2084,
      1274,
      2081,
      1271,
      259,
      2102,
      256,
      2100,
      252,
      2098,
      2095,
      272,
      269,
      2108,
      266,
      2106,
      281,
      279,
      277,
      1317,
      1315,
      1313,
      1310,
      282,
      1321,
      1319,
      2039,
      2037,
      2035,
      2032,
      1203,
      2029,
      1200,
      1197,
      207,
      2053,
      205,
      2051,
      201,
      2049,
      2046,
      2043,
      220,
      218,
      2064,
      215,
      2062,
      211,
      2059,
      228,
      226,
      223,
      2069,
      1259,
      1257,
      1254,
      232,
      1251,
      230,
      1267,
      1265,
      1263,
      2316,
      2315,
      2312,
      2311,
      2309,
      2314,
      2304,
      2303,
      2301,
      2299,
      1593,
      2308,
      2306,
      590,
      2288,
      2287,
      2285,
      2283,
      1578,
      2280,
      1577,
      2295,
      2293,
      2291,
      579,
      577,
      574,
      571,
      2298,
      582,
      581,
      1592,
      2263,
      2262,
      2260,
      2258,
      1545,
      2255,
      1544,
      2252,
      1541,
      2273,
      2271,
      2269,
      2266,
      1550,
      535,
      532,
      2279,
      528,
      2277,
      546,
      543,
      549,
      1575,
      1573,
      2224,
      2222,
      2220,
      1486,
      2217,
      1485,
      2214,
      1482,
      1479,
      2238,
      2236,
      2234,
      2231,
      1496,
      2228,
      1492,
      480,
      477,
      2248,
      473,
      2246,
      469,
      2243,
      490,
      487,
      2251,
      497,
      1537,
      1535,
      1532,
      2477,
      2476,
      2474,
      2479,
      2469,
      2468,
      2466,
      2464,
      1730,
      2473,
      2471,
      2453,
      2452,
      2450,
      2448,
      1729,
      2445,
      1728,
      2460,
      2458,
      2456,
      2463,
      805,
      804,
      2428,
      2427,
      2425,
      2423,
      1725,
      2420,
      1724,
      2417,
      1722,
      2438,
      2436,
      2434,
      2431,
      1727,
      2444,
      2442,
      793,
      791,
      788,
      795,
      2388,
      2386,
      2384,
      1697,
      2381,
      1696,
      2378,
      1694,
      1692,
      2402,
      2400,
      2398,
      2395,
      1703,
      2392,
      1701,
      2412,
      2410,
      2407,
      751,
      748,
      744,
      2416,
      759,
      757,
      1807,
      2620,
      2618,
      1806,
      1805,
      2611,
      2609,
      2607,
      2614,
      1802,
      1801,
      1799,
      2594,
      2592,
      2590,
      2587,
      1804,
      2600,
      2598,
      1794,
      1793,
      1791,
      1789,
      2564,
      2562,
      2560,
      2557,
      1798,
      2554,
      1796,
      2574,
      2572,
      2569,
      2578,
      1847,
      1846,
      2722,
      1843,
      1842,
      1840,
      1845,
      2716,
      2714,
      1835,
      1834,
      1832,
      1830,
      1839,
      1837,
      2700,
      2698,
      2695,
      2704,
      1817,
      1811,
      1810,
      897,
      862,
      1777,
      829,
      826,
      838,
      1760,
      1758,
      808,
      2481,
      1741,
      1740,
      1738,
      1743,
      2624,
      1818,
      2726,
      2776,
      782,
      740,
      737,
      1715,
      686,
      679,
      695,
      1682,
      1680,
      639,
      628,
      2339,
      647,
      644,
      1645,
      1643,
      1640,
      1648,
      602,
      600,
      597,
      595,
      2320,
      593,
      2318,
      609,
      607,
      604,
      1611,
      1610,
      1608,
      1606,
      613,
      1615,
      1613,
      2328,
      926,
      924,
      892,
      886,
      899,
      857,
      850,
      2505,
      1778,
      824,
      823,
      821,
      819,
      2488,
      818,
      2486,
      833,
      831,
      828,
      840,
      1761,
      1759,
      2649,
      2632,
      2630,
      2746,
      2734,
      2732,
      2782,
      2781,
      570,
      567,
      1587,
      531,
      527,
      523,
      540,
      1566,
      1564,
      476,
      467,
      463,
      2240,
      486,
      483,
      1524,
      1521,
      1518,
      1529,
      411,
      403,
      2192,
      399,
      2189,
      423,
      416,
      1462,
      1457,
      1454,
      428,
      1468,
      1465,
      2210,
      366,
      363,
      2158,
      360,
      2156,
      357,
      2153,
      376,
      373,
      370,
      2163,
      1410,
      1409,
      1407,
      1405,
      382,
      1402,
      380,
      1417,
      1415,
      1412,
      1421,
      2175,
      2174,
      777,
      774,
      771,
      784,
      732,
      725,
      722,
      2404,
      743,
      1716,
      676,
      674,
      668,
      2363,
      665,
      2360,
      685,
      1684,
      1681,
      626,
      624,
      622,
      2335,
      620,
      2333,
      617,
      2330,
      641,
      635,
      649,
      1646,
      1644,
      1642,
      2566,
      928,
      925,
      2530,
      2527,
      894,
      891,
      888,
      2501,
      2499,
      2496,
      858,
      856,
      854,
      851,
      1779,
      2692,
      2668,
      2665,
      2645,
      2643,
      2640,
      2651,
      2768,
      2759,
      2757,
      2744,
      2743,
      2741,
      2748,
      352,
      1382,
      340,
      337,
      333,
      1371,
      1369,
      307,
      300,
      296,
      2126,
      315,
      312,
      1347,
      1342,
      1350,
      261,
      258,
      250,
      2097,
      246,
      2094,
      271,
      268,
      264,
      1306,
      1301,
      1298,
      276,
      1312,
      1309,
      2115,
      203,
      2048,
      195,
      2045,
      191,
      2041,
      213,
      209,
      2056,
      1246,
      1244,
      1238,
      225,
      1234,
      222,
      1256,
      1253,
      1249,
      1262,
      2080,
      2079,
      154,
      1997,
      150,
      1995,
      147,
      1992,
      1989,
      163,
      160,
      2004,
      156,
      2001,
      1175,
      1174,
      1172,
      1170,
      1167,
      170,
      1164,
      167,
      1185,
      1183,
      1180,
      1177,
      174,
      1190,
      1188,
      2025,
      2024,
      2022,
      587,
      586,
      564,
      559,
      556,
      2290,
      573,
      1588,
      520,
      518,
      512,
      2268,
      508,
      2265,
      530,
      1568,
      1565,
      461,
      457,
      2233,
      450,
      2230,
      446,
      2226,
      479,
      471,
      489,
      1526,
      1523,
      1520,
      397,
      395,
      2185,
      392,
      2183,
      389,
      2180,
      2177,
      410,
      2194,
      402,
      422,
      1463,
      1461,
      1459,
      1456,
      1470,
      2455,
      799,
      2433,
      2430,
      779,
      776,
      773,
      2397,
      2394,
      2390,
      734,
      728,
      724,
      746,
      1717,
      2356,
      2354,
      2351,
      2348,
      1658,
      677,
      675,
      673,
      670,
      667,
      688,
      1685,
      1683,
      2606,
      2589,
      2586,
      2559,
      2556,
      2552,
      927,
      2523,
      2521,
      2518,
      2515,
      1784,
      2532,
      895,
      893,
      890,
      2718,
      2709,
      2707,
      2689,
      2687,
      2684,
      2663,
      2662,
      2660,
      2658,
      1825,
      2667,
      2769,
      1852,
      2760,
      2758,
      142,
      141,
      1139,
      1138,
      134,
      132,
      129,
      126,
      1982,
      1129,
      1128,
      1126,
      1131,
      113,
      111,
      108,
      105,
      1972,
      101,
      1970,
      120,
      118,
      115,
      1109,
      1108,
      1106,
      1104,
      123,
      1113,
      1111,
      82,
      79,
      1951,
      75,
      1949,
      72,
      1946,
      92,
      89,
      86,
      1956,
      1077,
      1076,
      1074,
      1072,
      98,
      1069,
      96,
      1084,
      1082,
      1079,
      1088,
      1968,
      1967,
      48,
      45,
      1916,
      42,
      1914,
      39,
      1911,
      1908,
      60,
      57,
      54,
      1923,
      50,
      1920,
      1031,
      1030,
      1028,
      1026,
      67,
      1023,
      65,
      1020,
      62,
      1041,
      1039,
      1036,
      1033,
      69,
      1046,
      1044,
      1944,
      1943,
      1941,
      11,
      9,
      1868,
      7,
      1865,
      1862,
      1859,
      20,
      1878,
      16,
      1875,
      13,
      1872,
      970,
      968,
      966,
      963,
      29,
      960,
      26,
      23,
      983,
      981,
      978,
      975,
      33,
      971,
      31,
      990,
      988,
      985,
      1906,
      1904,
      1902,
      993,
      351,
      2145,
      1383,
      331,
      330,
      328,
      326,
      2137,
      323,
      2135,
      339,
      1372,
      1370,
      294,
      293,
      291,
      289,
      2122,
      286,
      2120,
      283,
      2117,
      309,
      303,
      317,
      1348,
      1346,
      1344,
      245,
      244,
      242,
      2090,
      239,
      2088,
      236,
      2085,
      2082,
      260,
      2099,
      249,
      270,
      1307,
      1305,
      1303,
      1300,
      1314,
      189,
      2038,
      186,
      2036,
      183,
      2033,
      2030,
      2026,
      206,
      198,
      2047,
      194,
      216,
      1247,
      1245,
      1243,
      1240,
      227,
      1237,
      1255,
      2310,
      2302,
      2300,
      2286,
      2284,
      2281,
      565,
      563,
      561,
      558,
      575,
      1589,
      2261,
      2259,
      2256,
      2253,
      1542,
      521,
      519,
      517,
      514,
      2270,
      511,
      533,
      1569,
      1567,
      2223,
      2221,
      2218,
      2215,
      1483,
      2211,
      1480,
      459,
      456,
      453,
      2232,
      449,
      474,
      491,
      1527,
      1525,
      1522,
      2475,
      2467,
      2465,
      2451,
      2449,
      2446,
      801,
      800,
      2426,
      2424,
      2421,
      2418,
      1723,
      2435,
      780,
      778,
      775,
      2387,
      2385,
      2382,
      2379,
      1695,
      2375,
      1693,
      2396,
      735,
      733,
      730,
      727,
      749,
      1718,
      2616,
      2615,
      2604,
      2603,
      2601,
      2584,
      2583,
      2581,
      2579,
      1800,
      2591,
      2550,
      2549,
      2547,
      2545,
      1792,
      2542,
      1790,
      2558,
      929,
      2719,
      1841,
      2710,
      2708,
      1833,
      1831,
      2690,
      2688,
      2686,
      1815,
      1809,
      1808,
      1774,
      1756,
      1754,
      1737,
      1736,
      1734,
      1739,
      1816,
      1711,
      1676,
      1674,
      633,
      629,
      1638,
      1636,
      1633,
      1641,
      598,
      1605,
      1604,
      1602,
      1600,
      605,
      1609,
      1607,
      2327,
      887,
      853,
      1775,
      822,
      820,
      1757,
      1755,
      1584,
      524,
      1560,
      1558,
      468,
      464,
      1514,
      1511,
      1508,
      1519,
      408,
      404,
      400,
      1452,
      1447,
      1444,
      417,
      1458,
      1455,
      2208,
      364,
      361,
      358,
      2154,
      1401,
      1400,
      1398,
      1396,
      374,
      1393,
      371,
      1408,
      1406,
      1403,
      1413,
      2173,
      2172,
      772,
      726,
      723,
      1712,
      672,
      669,
      666,
      682,
      1678,
      1675,
      625,
      623,
      621,
      618,
      2331,
      636,
      632,
      1639,
      1637,
      1635,
      920,
      918,
      884,
      880,
      889,
      849,
      848,
      847,
      846,
      2497,
      855,
      852,
      1776,
      2641,
      2742,
      2787,
      1380,
      334,
      1367,
      1365,
      301,
      297,
      1340,
      1338,
      1335,
      1343,
      255,
      251,
      247,
      1296,
      1291,
      1288,
      265,
      1302,
      1299,
      2113,
      204,
      196,
      192,
      2042,
      1232,
      1230,
      1224,
      214,
      1220,
      210,
      1242,
      1239,
      1235,
      1250,
      2077,
      2075,
      151,
      148,
      1993,
      144,
      1990,
      1163,
      1162,
      1160,
      1158,
      1155,
      161,
      1152,
      157,
      1173,
      1171,
      1168,
      1165,
      168,
      1181,
      1178,
      2021,
      2020,
      2018,
      2023,
      585,
      560,
      557,
      1585,
      516,
      509,
      1562,
      1559,
      458,
      447,
      2227,
      472,
      1516,
      1513,
      1510,
      398,
      396,
      393,
      390,
      2181,
      386,
      2178,
      407,
      1453,
      1451,
      1449,
      1446,
      420,
      1460,
      2209,
      769,
      764,
      720,
      712,
      2391,
      729,
      1713,
      664,
      663,
      661,
      659,
      2352,
      656,
      2349,
      671,
      1679,
      1677,
      2553,
      922,
      919,
      2519,
      2516,
      885,
      883,
      881,
      2685,
      2661,
      2659,
      2767,
      2756,
      2755,
      140,
      1137,
      1136,
      130,
      127,
      1125,
      1124,
      1122,
      1127,
      109,
      106,
      102,
      1103,
      1102,
      1100,
      1098,
      116,
      1107,
      1105,
      1980,
      80,
      76,
      73,
      1947,
      1068,
      1067,
      1065,
      1063,
      90,
      1060,
      87,
      1075,
      1073,
      1070,
      1080,
      1966,
      1965,
      46,
      43,
      40,
      1912,
      36,
      1909,
      1019,
      1018,
      1016,
      1014,
      58,
      1011,
      55,
      1008,
      51,
      1029,
      1027,
      1024,
      1021,
      63,
      1037,
      1034,
      1940,
      1939,
      1937,
      1942,
      8,
      1866,
      4,
      1863,
      1,
      1860,
      956,
      954,
      952,
      949,
      946,
      17,
      14,
      969,
      967,
      964,
      961,
      27,
      957,
      24,
      979,
      976,
      972,
      1901,
      1900,
      1898,
      1896,
      986,
      1905,
      1903,
      350,
      349,
      1381,
      329,
      327,
      324,
      1368,
      1366,
      292,
      290,
      287,
      284,
      2118,
      304,
      1341,
      1339,
      1337,
      1345,
      243,
      240,
      237,
      2086,
      233,
      2083,
      254,
      1297,
      1295,
      1293,
      1290,
      1304,
      2114,
      190,
      187,
      184,
      2034,
      180,
      2031,
      177,
      2027,
      199,
      1233,
      1231,
      1229,
      1226,
      217,
      1223,
      1241,
      2078,
      2076,
      584,
      555,
      554,
      552,
      550,
      2282,
      562,
      1586,
      507,
      506,
      504,
      502,
      2257,
      499,
      2254,
      515,
      1563,
      1561,
      445,
      443,
      441,
      2219,
      438,
      2216,
      435,
      2212,
      460,
      454,
      475,
      1517,
      1515,
      1512,
      2447,
      798,
      797,
      2422,
      2419,
      770,
      768,
      766,
      2383,
      2380,
      2376,
      721,
      719,
      717,
      714,
      731,
      1714,
      2602,
      2582,
      2580,
      2548,
      2546,
      2543,
      923,
      921,
      2717,
      2706,
      2705,
      2683,
      2682,
      2680,
      1771,
      1752,
      1750,
      1733,
      1732,
      1731,
      1735,
      1814,
      1707,
      1670,
      1668,
      1631,
      1629,
      1626,
      1634,
      1599,
      1598,
      1596,
      1594,
      1603,
      1601,
      2326,
      1772,
      1753,
      1751,
      1581,
      1554,
      1552,
      1504,
      1501,
      1498,
      1509,
      1442,
      1437,
      1434,
      401,
      1448,
      1445,
      2206,
      1392,
      1391,
      1389,
      1387,
      1384,
      359,
      1399,
      1397,
      1394,
      1404,
      2171,
      2170,
      1708,
      1672,
      1669,
      619,
      1632,
      1630,
      1628,
      1773,
      1378,
      1363,
      1361,
      1333,
      1328,
      1336,
      1286,
      1281,
      1278,
      248,
      1292,
      1289,
      2111,
      1218,
      1216,
      1210,
      197,
      1206,
      193,
      1228,
      1225,
      1221,
      1236,
      2073,
      2071,
      1151,
      1150,
      1148,
      1146,
      152,
      1143,
      149,
      1140,
      145,
      1161,
      1159,
      1156,
      1153,
      158,
      1169,
      1166,
      2017,
      2016,
      2014,
      2019,
      1582,
      510,
      1556,
      1553,
      452,
      448,
      1506,
      1500,
      394,
      391,
      387,
      1443,
      1441,
      1439,
      1436,
      1450,
      2207,
      765,
      716,
      713,
      1709,
      662,
      660,
      657,
      1673,
      1671,
      916,
      914,
      879,
      878,
      877,
      882,
      1135,
      1134,
      1121,
      1120,
      1118,
      1123,
      1097,
      1096,
      1094,
      1092,
      103,
      1101,
      1099,
      1979,
      1059,
      1058,
      1056,
      1054,
      77,
      1051,
      74,
      1066,
      1064,
      1061,
      1071,
      1964,
      1963,
      1007,
      1006,
      1004,
      1002,
      999,
      41,
      996,
      37,
      1017,
      1015,
      1012,
      1009,
      52,
      1025,
      1022,
      1936,
      1935,
      1933,
      1938,
      942,
      940,
      938,
      935,
      932,
      5,
      2,
      955,
      953,
      950,
      947,
      18,
      943,
      15,
      965,
      962,
      958,
      1895,
      1894,
      1892,
      1890,
      973,
      1899,
      1897,
      1379,
      325,
      1364,
      1362,
      288,
      285,
      1334,
      1332,
      1330,
      241,
      238,
      234,
      1287,
      1285,
      1283,
      1280,
      1294,
      2112,
      188,
      185,
      181,
      178,
      2028,
      1219,
      1217,
      1215,
      1212,
      200,
      1209,
      1227,
      2074,
      2072,
      583,
      553,
      551,
      1583,
      505,
      503,
      500,
      513,
      1557,
      1555,
      444,
      442,
      439,
      436,
      2213,
      455,
      451,
      1507,
      1505,
      1502,
      796,
      763,
      762,
      760,
      767,
      711,
      710,
      708,
      706,
      2377,
      718,
      715,
      1710,
      2544,
      917,
      915,
      2681,
      1627,
      1597,
      1595,
      2325,
      1769,
      1749,
      1747,
      1499,
      1438,
      1435,
      2204,
      1390,
      1388,
      1385,
      1395,
      2169,
      2167,
      1704,
      1665,
      1662,
      1625,
      1623,
      1620,
      1770,
      1329,
      1282,
      1279,
      2109,
      1214,
      1207,
      1222,
      2068,
      2065,
      1149,
      1147,
      1144,
      1141,
      146,
      1157,
      1154,
      2013,
      2011,
      2008,
      2015,
      1579,
      1549,
      1546,
      1495,
      1487,
      1433,
      1431,
      1428,
      1425,
      388,
      1440,
      2205,
      1705,
      658,
      1667,
      1664,
      1119,
      1095,
      1093,
      1978,
      1057,
      1055,
      1052,
      1062,
      1962,
      1960,
      1005,
      1003,
      1e3,
      997,
      38,
      1013,
      1010,
      1932,
      1930,
      1927,
      1934,
      941,
      939,
      936,
      933,
      6,
      930,
      3,
      951,
      948,
      944,
      1889,
      1887,
      1884,
      1881,
      959,
      1893,
      1891,
      35,
      1377,
      1360,
      1358,
      1327,
      1325,
      1322,
      1331,
      1277,
      1275,
      1272,
      1269,
      235,
      1284,
      2110,
      1205,
      1204,
      1201,
      1198,
      182,
      1195,
      179,
      1213,
      2070,
      2067,
      1580,
      501,
      1551,
      1548,
      440,
      437,
      1497,
      1494,
      1490,
      1503,
      761,
      709,
      707,
      1706,
      913,
      912,
      2198,
      1386,
      2164,
      2161,
      1621,
      1766,
      2103,
      1208,
      2058,
      2054,
      1145,
      1142,
      2005,
      2002,
      1999,
      2009,
      1488,
      1429,
      1426,
      2200,
      1698,
      1659,
      1656,
      1975,
      1053,
      1957,
      1954,
      1001,
      998,
      1924,
      1921,
      1918,
      1928,
      937,
      934,
      931,
      1879,
      1876,
      1873,
      1870,
      945,
      1885,
      1882,
      1323,
      1273,
      1270,
      2105,
      1202,
      1199,
      1196,
      1211,
      2061,
      2057,
      1576,
      1543,
      1540,
      1484,
      1481,
      1478,
      1491,
      1700
    ]);
    return PDF417Common2;
  }()
);
var PDF417Common_default = PDF417Common;

// node_modules/@zxing/library/esm/core/pdf417/detector/PDF417DetectorResult.js
var PDF417DetectorResult = (
  /** @class */
  function() {
    function PDF417DetectorResult2(bits, points) {
      this.bits = bits;
      this.points = points;
    }
    PDF417DetectorResult2.prototype.getBits = function() {
      return this.bits;
    };
    PDF417DetectorResult2.prototype.getPoints = function() {
      return this.points;
    };
    return PDF417DetectorResult2;
  }()
);
var PDF417DetectorResult_default = PDF417DetectorResult;

// node_modules/@zxing/library/esm/core/pdf417/detector/Detector.js
var __values29 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Detector4 = (
  /** @class */
  function() {
    function Detector5() {
    }
    Detector5.detectMultiple = function(image, hints, multiple) {
      var bitMatrix = image.getBlackMatrix();
      var barcodeCoordinates = Detector5.detect(multiple, bitMatrix);
      if (!barcodeCoordinates.length) {
        bitMatrix = bitMatrix.clone();
        bitMatrix.rotate180();
        barcodeCoordinates = Detector5.detect(multiple, bitMatrix);
      }
      return new PDF417DetectorResult_default(bitMatrix, barcodeCoordinates);
    };
    Detector5.detect = function(multiple, bitMatrix) {
      var e_1, _a2;
      var barcodeCoordinates = new Array();
      var row = 0;
      var column = 0;
      var foundBarcodeInRow = false;
      while (row < bitMatrix.getHeight()) {
        var vertices = Detector5.findVertices(bitMatrix, row, column);
        if (vertices[0] == null && vertices[3] == null) {
          if (!foundBarcodeInRow) {
            break;
          }
          foundBarcodeInRow = false;
          column = 0;
          try {
            for (var barcodeCoordinates_1 = (e_1 = void 0, __values29(barcodeCoordinates)), barcodeCoordinates_1_1 = barcodeCoordinates_1.next(); !barcodeCoordinates_1_1.done; barcodeCoordinates_1_1 = barcodeCoordinates_1.next()) {
              var barcodeCoordinate = barcodeCoordinates_1_1.value;
              if (barcodeCoordinate[1] != null) {
                row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));
              }
              if (barcodeCoordinate[3] != null) {
                row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (barcodeCoordinates_1_1 && !barcodeCoordinates_1_1.done && (_a2 = barcodeCoordinates_1.return)) _a2.call(barcodeCoordinates_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          row += Detector5.ROW_STEP;
          continue;
        }
        foundBarcodeInRow = true;
        barcodeCoordinates.push(vertices);
        if (!multiple) {
          break;
        }
        if (vertices[2] != null) {
          column = Math.trunc(vertices[2].getX());
          row = Math.trunc(vertices[2].getY());
        } else {
          column = Math.trunc(vertices[4].getX());
          row = Math.trunc(vertices[4].getY());
        }
      }
      return barcodeCoordinates;
    };
    Detector5.findVertices = function(matrix, startRow, startColumn) {
      var height = matrix.getHeight();
      var width = matrix.getWidth();
      var result = new Array(8);
      Detector5.copyToResult(result, Detector5.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector5.START_PATTERN), Detector5.INDEXES_START_PATTERN);
      if (result[4] != null) {
        startColumn = Math.trunc(result[4].getX());
        startRow = Math.trunc(result[4].getY());
      }
      Detector5.copyToResult(result, Detector5.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector5.STOP_PATTERN), Detector5.INDEXES_STOP_PATTERN);
      return result;
    };
    Detector5.copyToResult = function(result, tmpResult, destinationIndexes) {
      for (var i = 0; i < destinationIndexes.length; i++) {
        result[destinationIndexes[i]] = tmpResult[i];
      }
    };
    Detector5.findRowsWithPattern = function(matrix, height, width, startRow, startColumn, pattern) {
      var result = new Array(4);
      var found = false;
      var counters = new Int32Array(pattern.length);
      for (; startRow < height; startRow += Detector5.ROW_STEP) {
        var loc = Detector5.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);
        if (loc != null) {
          while (startRow > 0) {
            var previousRowLoc = Detector5.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);
            if (previousRowLoc != null) {
              loc = previousRowLoc;
            } else {
              startRow++;
              break;
            }
          }
          result[0] = new ResultPoint_default(loc[0], startRow);
          result[1] = new ResultPoint_default(loc[1], startRow);
          found = true;
          break;
        }
      }
      var stopRow = startRow + 1;
      if (found) {
        var skippedRowCount = 0;
        var previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);
        for (; stopRow < height; stopRow++) {
          var loc = Detector5.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters);
          if (loc != null && Math.abs(previousRowLoc[0] - loc[0]) < Detector5.MAX_PATTERN_DRIFT && Math.abs(previousRowLoc[1] - loc[1]) < Detector5.MAX_PATTERN_DRIFT) {
            previousRowLoc = loc;
            skippedRowCount = 0;
          } else {
            if (skippedRowCount > Detector5.SKIPPED_ROW_COUNT_MAX) {
              break;
            } else {
              skippedRowCount++;
            }
          }
        }
        stopRow -= skippedRowCount + 1;
        result[2] = new ResultPoint_default(previousRowLoc[0], stopRow);
        result[3] = new ResultPoint_default(previousRowLoc[1], stopRow);
      }
      if (stopRow - startRow < Detector5.BARCODE_MIN_HEIGHT) {
        Arrays_default.fill(result, null);
      }
      return result;
    };
    Detector5.findGuardPattern = function(matrix, column, row, width, whiteFirst, pattern, counters) {
      Arrays_default.fillWithin(counters, 0, counters.length, 0);
      var patternStart = column;
      var pixelDrift = 0;
      while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector5.MAX_PIXEL_DRIFT) {
        patternStart--;
      }
      var x = patternStart;
      var counterPosition = 0;
      var patternLength = pattern.length;
      for (var isWhite = whiteFirst; x < width; x++) {
        var pixel = matrix.get(x, row);
        if (pixel !== isWhite) {
          counters[counterPosition]++;
        } else {
          if (counterPosition === patternLength - 1) {
            if (Detector5.patternMatchVariance(counters, pattern, Detector5.MAX_INDIVIDUAL_VARIANCE) < Detector5.MAX_AVG_VARIANCE) {
              return new Int32Array([patternStart, x]);
            }
            patternStart += counters[0] + counters[1];
            System_default.arraycopy(counters, 2, counters, 0, counterPosition - 1);
            counters[counterPosition - 1] = 0;
            counters[counterPosition] = 0;
            counterPosition--;
          } else {
            counterPosition++;
          }
          counters[counterPosition] = 1;
          isWhite = !isWhite;
        }
      }
      if (counterPosition === patternLength - 1 && Detector5.patternMatchVariance(counters, pattern, Detector5.MAX_INDIVIDUAL_VARIANCE) < Detector5.MAX_AVG_VARIANCE) {
        return new Int32Array([patternStart, x - 1]);
      }
      return null;
    };
    Detector5.patternMatchVariance = function(counters, pattern, maxIndividualVariance) {
      var numCounters = counters.length;
      var total = 0;
      var patternLength = 0;
      for (var i = 0; i < numCounters; i++) {
        total += counters[i];
        patternLength += pattern[i];
      }
      if (total < patternLength) {
        return (
          /*Float.POSITIVE_INFINITY*/
          Infinity
        );
      }
      var unitBarWidth = total / patternLength;
      maxIndividualVariance *= unitBarWidth;
      var totalVariance = 0;
      for (var x = 0; x < numCounters; x++) {
        var counter = counters[x];
        var scaledPattern = pattern[x] * unitBarWidth;
        var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;
        if (variance > maxIndividualVariance) {
          return (
            /*Float.POSITIVE_INFINITY*/
            Infinity
          );
        }
        totalVariance += variance;
      }
      return totalVariance / total;
    };
    Detector5.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);
    Detector5.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);
    Detector5.MAX_AVG_VARIANCE = 0.42;
    Detector5.MAX_INDIVIDUAL_VARIANCE = 0.8;
    Detector5.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);
    Detector5.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);
    Detector5.MAX_PIXEL_DRIFT = 3;
    Detector5.MAX_PATTERN_DRIFT = 5;
    Detector5.SKIPPED_ROW_COUNT_MAX = 25;
    Detector5.ROW_STEP = 5;
    Detector5.BARCODE_MIN_HEIGHT = 10;
    return Detector5;
  }()
);
var Detector_default4 = Detector4;

// node_modules/@zxing/library/esm/core/pdf417/decoder/ec/ModulusPoly.js
var __values30 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ModulusPoly = (
  /** @class */
  function() {
    function ModulusPoly2(field, coefficients) {
      if (coefficients.length === 0) {
        throw new IllegalArgumentException_default();
      }
      this.field = field;
      var coefficientsLength = (
        /*int*/
        coefficients.length
      );
      if (coefficientsLength > 1 && coefficients[0] === 0) {
        var firstNonZero = (
          /*int*/
          1
        );
        while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
          firstNonZero++;
        }
        if (firstNonZero === coefficientsLength) {
          this.coefficients = new Int32Array([0]);
        } else {
          this.coefficients = new Int32Array(coefficientsLength - firstNonZero);
          System_default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);
        }
      } else {
        this.coefficients = coefficients;
      }
    }
    ModulusPoly2.prototype.getCoefficients = function() {
      return this.coefficients;
    };
    ModulusPoly2.prototype.getDegree = function() {
      return this.coefficients.length - 1;
    };
    ModulusPoly2.prototype.isZero = function() {
      return this.coefficients[0] === 0;
    };
    ModulusPoly2.prototype.getCoefficient = function(degree) {
      return this.coefficients[this.coefficients.length - 1 - degree];
    };
    ModulusPoly2.prototype.evaluateAt = function(a) {
      var e_1, _a2;
      if (a === 0) {
        return this.getCoefficient(0);
      }
      if (a === 1) {
        var sum = (
          /*int*/
          0
        );
        try {
          for (var _b = __values30(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {
            var coefficient = _c.value;
            sum = this.field.add(sum, coefficient);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return sum;
      }
      var result = (
        /*int*/
        this.coefficients[0]
      );
      var size = (
        /*int*/
        this.coefficients.length
      );
      for (var i = 1; i < size; i++) {
        result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);
      }
      return result;
    };
    ModulusPoly2.prototype.add = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("ModulusPolys do not have same ModulusGF field");
      }
      if (this.isZero()) {
        return other;
      }
      if (other.isZero()) {
        return this;
      }
      var smallerCoefficients = this.coefficients;
      var largerCoefficients = other.coefficients;
      if (smallerCoefficients.length > largerCoefficients.length) {
        var temp = smallerCoefficients;
        smallerCoefficients = largerCoefficients;
        largerCoefficients = temp;
      }
      var sumDiff = new Int32Array(largerCoefficients.length);
      var lengthDiff = (
        /*int*/
        largerCoefficients.length - smallerCoefficients.length
      );
      System_default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);
      for (var i = lengthDiff; i < largerCoefficients.length; i++) {
        sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
      }
      return new ModulusPoly2(this.field, sumDiff);
    };
    ModulusPoly2.prototype.subtract = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("ModulusPolys do not have same ModulusGF field");
      }
      if (other.isZero()) {
        return this;
      }
      return this.add(other.negative());
    };
    ModulusPoly2.prototype.multiply = function(other) {
      if (other instanceof ModulusPoly2) {
        return this.multiplyOther(other);
      }
      return this.multiplyScalar(other);
    };
    ModulusPoly2.prototype.multiplyOther = function(other) {
      if (!this.field.equals(other.field)) {
        throw new IllegalArgumentException_default("ModulusPolys do not have same ModulusGF field");
      }
      if (this.isZero() || other.isZero()) {
        return new ModulusPoly2(this.field, new Int32Array([0]));
      }
      var aCoefficients = this.coefficients;
      var aLength = (
        /*int*/
        aCoefficients.length
      );
      var bCoefficients = other.coefficients;
      var bLength = (
        /*int*/
        bCoefficients.length
      );
      var product = new Int32Array(aLength + bLength - 1);
      for (var i = 0; i < aLength; i++) {
        var aCoeff = (
          /*int*/
          aCoefficients[i]
        );
        for (var j = 0; j < bLength; j++) {
          product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
        }
      }
      return new ModulusPoly2(this.field, product);
    };
    ModulusPoly2.prototype.negative = function() {
      var size = (
        /*int*/
        this.coefficients.length
      );
      var negativeCoefficients = new Int32Array(size);
      for (var i = 0; i < size; i++) {
        negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);
      }
      return new ModulusPoly2(this.field, negativeCoefficients);
    };
    ModulusPoly2.prototype.multiplyScalar = function(scalar) {
      if (scalar === 0) {
        return new ModulusPoly2(this.field, new Int32Array([0]));
      }
      if (scalar === 1) {
        return this;
      }
      var size = (
        /*int*/
        this.coefficients.length
      );
      var product = new Int32Array(size);
      for (var i = 0; i < size; i++) {
        product[i] = this.field.multiply(this.coefficients[i], scalar);
      }
      return new ModulusPoly2(this.field, product);
    };
    ModulusPoly2.prototype.multiplyByMonomial = function(degree, coefficient) {
      if (degree < 0) {
        throw new IllegalArgumentException_default();
      }
      if (coefficient === 0) {
        return new ModulusPoly2(this.field, new Int32Array([0]));
      }
      var size = (
        /*int*/
        this.coefficients.length
      );
      var product = new Int32Array(size + degree);
      for (var i = 0; i < size; i++) {
        product[i] = this.field.multiply(this.coefficients[i], coefficient);
      }
      return new ModulusPoly2(this.field, product);
    };
    ModulusPoly2.prototype.toString = function() {
      var result = new StringBuilder_default(
        /*8 * this.getDegree()*/
      );
      for (var degree = this.getDegree(); degree >= 0; degree--) {
        var coefficient = (
          /*int*/
          this.getCoefficient(degree)
        );
        if (coefficient !== 0) {
          if (coefficient < 0) {
            result.append(" - ");
            coefficient = -coefficient;
          } else {
            if (result.length() > 0) {
              result.append(" + ");
            }
          }
          if (degree === 0 || coefficient !== 1) {
            result.append(coefficient);
          }
          if (degree !== 0) {
            if (degree === 1) {
              result.append("x");
            } else {
              result.append("x^");
              result.append(degree);
            }
          }
        }
      }
      return result.toString();
    };
    return ModulusPoly2;
  }()
);
var ModulusPoly_default = ModulusPoly;

// node_modules/@zxing/library/esm/core/pdf417/decoder/ec/ModulusBase.js
var ModulusBase = (
  /** @class */
  function() {
    function ModulusBase2() {
    }
    ModulusBase2.prototype.add = function(a, b) {
      return (a + b) % this.modulus;
    };
    ModulusBase2.prototype.subtract = function(a, b) {
      return (this.modulus + a - b) % this.modulus;
    };
    ModulusBase2.prototype.exp = function(a) {
      return this.expTable[a];
    };
    ModulusBase2.prototype.log = function(a) {
      if (a === 0) {
        throw new IllegalArgumentException_default();
      }
      return this.logTable[a];
    };
    ModulusBase2.prototype.inverse = function(a) {
      if (a === 0) {
        throw new ArithmeticException_default();
      }
      return this.expTable[this.modulus - this.logTable[a] - 1];
    };
    ModulusBase2.prototype.multiply = function(a, b) {
      if (a === 0 || b === 0) {
        return 0;
      }
      return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.modulus - 1)];
    };
    ModulusBase2.prototype.getSize = function() {
      return this.modulus;
    };
    ModulusBase2.prototype.equals = function(o) {
      return o === this;
    };
    return ModulusBase2;
  }()
);
var ModulusBase_default = ModulusBase;

// node_modules/@zxing/library/esm/core/pdf417/decoder/ec/ModulusGF.js
var __extends56 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ModulusGF = (
  /** @class */
  function(_super) {
    __extends56(ModulusGF2, _super);
    function ModulusGF2(modulus, generator) {
      var _this = _super.call(this) || this;
      _this.modulus = modulus;
      _this.expTable = new Int32Array(modulus);
      _this.logTable = new Int32Array(modulus);
      var x = (
        /*int*/
        1
      );
      for (var i = 0; i < modulus; i++) {
        _this.expTable[i] = x;
        x = x * generator % modulus;
      }
      for (var i = 0; i < modulus - 1; i++) {
        _this.logTable[_this.expTable[i]] = i;
      }
      _this.zero = new ModulusPoly_default(_this, new Int32Array([0]));
      _this.one = new ModulusPoly_default(_this, new Int32Array([1]));
      return _this;
    }
    ModulusGF2.prototype.getZero = function() {
      return this.zero;
    };
    ModulusGF2.prototype.getOne = function() {
      return this.one;
    };
    ModulusGF2.prototype.buildMonomial = function(degree, coefficient) {
      if (degree < 0) {
        throw new IllegalArgumentException_default();
      }
      if (coefficient === 0) {
        return this.zero;
      }
      var coefficients = new Int32Array(degree + 1);
      coefficients[0] = coefficient;
      return new ModulusPoly_default(this, coefficients);
    };
    ModulusGF2.PDF417_GF = new ModulusGF2(PDF417Common_default.NUMBER_OF_CODEWORDS, 3);
    return ModulusGF2;
  }(ModulusBase_default)
);
var ModulusGF_default = ModulusGF;

// node_modules/@zxing/library/esm/core/pdf417/decoder/ec/ErrorCorrection.js
var __values31 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ErrorCorrection = (
  /** @class */
  function() {
    function ErrorCorrection3() {
      this.field = ModulusGF_default.PDF417_GF;
    }
    ErrorCorrection3.prototype.decode = function(received, numECCodewords, erasures) {
      var e_1, _a2;
      var poly = new ModulusPoly_default(this.field, received);
      var S = new Int32Array(numECCodewords);
      var error = false;
      for (var i = numECCodewords; i > 0; i--) {
        var evaluation = poly.evaluateAt(this.field.exp(i));
        S[numECCodewords - i] = evaluation;
        if (evaluation !== 0) {
          error = true;
        }
      }
      if (!error) {
        return 0;
      }
      var knownErrors = this.field.getOne();
      if (erasures != null) {
        try {
          for (var erasures_1 = __values31(erasures), erasures_1_1 = erasures_1.next(); !erasures_1_1.done; erasures_1_1 = erasures_1.next()) {
            var erasure = erasures_1_1.value;
            var b = this.field.exp(received.length - 1 - erasure);
            var term = new ModulusPoly_default(this.field, new Int32Array([this.field.subtract(0, b), 1]));
            knownErrors = knownErrors.multiply(term);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (erasures_1_1 && !erasures_1_1.done && (_a2 = erasures_1.return)) _a2.call(erasures_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      var syndrome = new ModulusPoly_default(this.field, S);
      var sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(numECCodewords, 1), syndrome, numECCodewords);
      var sigma = sigmaOmega[0];
      var omega = sigmaOmega[1];
      var errorLocations = this.findErrorLocations(sigma);
      var errorMagnitudes = this.findErrorMagnitudes(omega, sigma, errorLocations);
      for (var i = 0; i < errorLocations.length; i++) {
        var position = received.length - 1 - this.field.log(errorLocations[i]);
        if (position < 0) {
          throw ChecksumException_default.getChecksumInstance();
        }
        received[position] = this.field.subtract(received[position], errorMagnitudes[i]);
      }
      return errorLocations.length;
    };
    ErrorCorrection3.prototype.runEuclideanAlgorithm = function(a, b, R) {
      if (a.getDegree() < b.getDegree()) {
        var temp = a;
        a = b;
        b = temp;
      }
      var rLast = a;
      var r = b;
      var tLast = this.field.getZero();
      var t = this.field.getOne();
      while (r.getDegree() >= Math.round(R / 2)) {
        var rLastLast = rLast;
        var tLastLast = tLast;
        rLast = r;
        tLast = t;
        if (rLast.isZero()) {
          throw ChecksumException_default.getChecksumInstance();
        }
        r = rLastLast;
        var q = this.field.getZero();
        var denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());
        var dltInverse = this.field.inverse(denominatorLeadingTerm);
        while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {
          var degreeDiff = r.getDegree() - rLast.getDegree();
          var scale = this.field.multiply(r.getCoefficient(r.getDegree()), dltInverse);
          q = q.add(this.field.buildMonomial(degreeDiff, scale));
          r = r.subtract(rLast.multiplyByMonomial(degreeDiff, scale));
        }
        t = q.multiply(tLast).subtract(tLastLast).negative();
      }
      var sigmaTildeAtZero = t.getCoefficient(0);
      if (sigmaTildeAtZero === 0) {
        throw ChecksumException_default.getChecksumInstance();
      }
      var inverse = this.field.inverse(sigmaTildeAtZero);
      var sigma = t.multiply(inverse);
      var omega = r.multiply(inverse);
      return [sigma, omega];
    };
    ErrorCorrection3.prototype.findErrorLocations = function(errorLocator) {
      var numErrors = errorLocator.getDegree();
      var result = new Int32Array(numErrors);
      var e = 0;
      for (var i = 1; i < this.field.getSize() && e < numErrors; i++) {
        if (errorLocator.evaluateAt(i) === 0) {
          result[e] = this.field.inverse(i);
          e++;
        }
      }
      if (e !== numErrors) {
        throw ChecksumException_default.getChecksumInstance();
      }
      return result;
    };
    ErrorCorrection3.prototype.findErrorMagnitudes = function(errorEvaluator, errorLocator, errorLocations) {
      var errorLocatorDegree = errorLocator.getDegree();
      var formalDerivativeCoefficients = new Int32Array(errorLocatorDegree);
      for (var i = 1; i <= errorLocatorDegree; i++) {
        formalDerivativeCoefficients[errorLocatorDegree - i] = this.field.multiply(i, errorLocator.getCoefficient(i));
      }
      var formalDerivative = new ModulusPoly_default(this.field, formalDerivativeCoefficients);
      var s = errorLocations.length;
      var result = new Int32Array(s);
      for (var i = 0; i < s; i++) {
        var xiInverse = this.field.inverse(errorLocations[i]);
        var numerator = this.field.subtract(0, errorEvaluator.evaluateAt(xiInverse));
        var denominator = this.field.inverse(formalDerivative.evaluateAt(xiInverse));
        result[i] = this.field.multiply(numerator, denominator);
      }
      return result;
    };
    return ErrorCorrection3;
  }()
);
var ErrorCorrection_default = ErrorCorrection;

// node_modules/@zxing/library/esm/core/pdf417/decoder/BoundingBox.js
var BoundingBox = (
  /** @class */
  function() {
    function BoundingBox2(image, topLeft, bottomLeft, topRight, bottomRight) {
      if (image instanceof BoundingBox2) {
        this.constructor_2(image);
      } else {
        this.constructor_1(image, topLeft, bottomLeft, topRight, bottomRight);
      }
    }
    BoundingBox2.prototype.constructor_1 = function(image, topLeft, bottomLeft, topRight, bottomRight) {
      var leftUnspecified = topLeft == null || bottomLeft == null;
      var rightUnspecified = topRight == null || bottomRight == null;
      if (leftUnspecified && rightUnspecified) {
        throw new NotFoundException_default();
      }
      if (leftUnspecified) {
        topLeft = new ResultPoint_default(0, topRight.getY());
        bottomLeft = new ResultPoint_default(0, bottomRight.getY());
      } else if (rightUnspecified) {
        topRight = new ResultPoint_default(image.getWidth() - 1, topLeft.getY());
        bottomRight = new ResultPoint_default(image.getWidth() - 1, bottomLeft.getY());
      }
      this.image = image;
      this.topLeft = topLeft;
      this.bottomLeft = bottomLeft;
      this.topRight = topRight;
      this.bottomRight = bottomRight;
      this.minX = Math.trunc(Math.min(topLeft.getX(), bottomLeft.getX()));
      this.maxX = Math.trunc(Math.max(topRight.getX(), bottomRight.getX()));
      this.minY = Math.trunc(Math.min(topLeft.getY(), topRight.getY()));
      this.maxY = Math.trunc(Math.max(bottomLeft.getY(), bottomRight.getY()));
    };
    BoundingBox2.prototype.constructor_2 = function(boundingBox) {
      this.image = boundingBox.image;
      this.topLeft = boundingBox.getTopLeft();
      this.bottomLeft = boundingBox.getBottomLeft();
      this.topRight = boundingBox.getTopRight();
      this.bottomRight = boundingBox.getBottomRight();
      this.minX = boundingBox.getMinX();
      this.maxX = boundingBox.getMaxX();
      this.minY = boundingBox.getMinY();
      this.maxY = boundingBox.getMaxY();
    };
    BoundingBox2.merge = function(leftBox, rightBox) {
      if (leftBox == null) {
        return rightBox;
      }
      if (rightBox == null) {
        return leftBox;
      }
      return new BoundingBox2(leftBox.image, leftBox.topLeft, leftBox.bottomLeft, rightBox.topRight, rightBox.bottomRight);
    };
    BoundingBox2.prototype.addMissingRows = function(missingStartRows, missingEndRows, isLeft) {
      var newTopLeft = this.topLeft;
      var newBottomLeft = this.bottomLeft;
      var newTopRight = this.topRight;
      var newBottomRight = this.bottomRight;
      if (missingStartRows > 0) {
        var top_1 = isLeft ? this.topLeft : this.topRight;
        var newMinY = Math.trunc(top_1.getY() - missingStartRows);
        if (newMinY < 0) {
          newMinY = 0;
        }
        var newTop = new ResultPoint_default(top_1.getX(), newMinY);
        if (isLeft) {
          newTopLeft = newTop;
        } else {
          newTopRight = newTop;
        }
      }
      if (missingEndRows > 0) {
        var bottom = isLeft ? this.bottomLeft : this.bottomRight;
        var newMaxY = Math.trunc(bottom.getY() + missingEndRows);
        if (newMaxY >= this.image.getHeight()) {
          newMaxY = this.image.getHeight() - 1;
        }
        var newBottom = new ResultPoint_default(bottom.getX(), newMaxY);
        if (isLeft) {
          newBottomLeft = newBottom;
        } else {
          newBottomRight = newBottom;
        }
      }
      return new BoundingBox2(this.image, newTopLeft, newBottomLeft, newTopRight, newBottomRight);
    };
    BoundingBox2.prototype.getMinX = function() {
      return this.minX;
    };
    BoundingBox2.prototype.getMaxX = function() {
      return this.maxX;
    };
    BoundingBox2.prototype.getMinY = function() {
      return this.minY;
    };
    BoundingBox2.prototype.getMaxY = function() {
      return this.maxY;
    };
    BoundingBox2.prototype.getTopLeft = function() {
      return this.topLeft;
    };
    BoundingBox2.prototype.getTopRight = function() {
      return this.topRight;
    };
    BoundingBox2.prototype.getBottomLeft = function() {
      return this.bottomLeft;
    };
    BoundingBox2.prototype.getBottomRight = function() {
      return this.bottomRight;
    };
    return BoundingBox2;
  }()
);
var BoundingBox_default = BoundingBox;

// node_modules/@zxing/library/esm/core/pdf417/decoder/BarcodeMetadata.js
var BarcodeMetadata = (
  /** @class */
  function() {
    function BarcodeMetadata2(columnCount, rowCountUpperPart, rowCountLowerPart, errorCorrectionLevel) {
      this.columnCount = columnCount;
      this.errorCorrectionLevel = errorCorrectionLevel;
      this.rowCountUpperPart = rowCountUpperPart;
      this.rowCountLowerPart = rowCountLowerPart;
      this.rowCount = rowCountUpperPart + rowCountLowerPart;
    }
    BarcodeMetadata2.prototype.getColumnCount = function() {
      return this.columnCount;
    };
    BarcodeMetadata2.prototype.getErrorCorrectionLevel = function() {
      return this.errorCorrectionLevel;
    };
    BarcodeMetadata2.prototype.getRowCount = function() {
      return this.rowCount;
    };
    BarcodeMetadata2.prototype.getRowCountUpperPart = function() {
      return this.rowCountUpperPart;
    };
    BarcodeMetadata2.prototype.getRowCountLowerPart = function() {
      return this.rowCountLowerPart;
    };
    return BarcodeMetadata2;
  }()
);
var BarcodeMetadata_default = BarcodeMetadata;

// node_modules/@zxing/library/esm/core/util/Formatter.js
var Formatter = (
  /** @class */
  function() {
    function Formatter2() {
      this.buffer = "";
    }
    Formatter2.form = function(str, arr) {
      var i = -1;
      function callback(exp, p0, p1, p2, p3, p4) {
        if (exp === "%%")
          return "%";
        if (arr[++i] === void 0)
          return void 0;
        exp = p2 ? parseInt(p2.substr(1)) : void 0;
        var base = p3 ? parseInt(p3.substr(1)) : void 0;
        var val;
        switch (p4) {
          case "s":
            val = arr[i];
            break;
          case "c":
            val = arr[i][0];
            break;
          case "f":
            val = parseFloat(arr[i]).toFixed(exp);
            break;
          case "p":
            val = parseFloat(arr[i]).toPrecision(exp);
            break;
          case "e":
            val = parseFloat(arr[i]).toExponential(exp);
            break;
          case "x":
            val = parseInt(arr[i]).toString(base ? base : 16);
            break;
          case "d":
            val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);
            break;
        }
        val = typeof val === "object" ? JSON.stringify(val) : (+val).toString(base);
        var size = parseInt(p1);
        var ch = p1 && p1[0] + "" === "0" ? "0" : " ";
        while (val.length < size)
          val = p0 !== void 0 ? val + ch : ch + val;
        return val;
      }
      var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
      return str.replace(regex, callback);
    };
    Formatter2.prototype.format = function(append) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      this.buffer += Formatter2.form(append, args);
    };
    Formatter2.prototype.toString = function() {
      return this.buffer;
    };
    return Formatter2;
  }()
);
var Formatter_default = Formatter;

// node_modules/@zxing/library/esm/core/pdf417/decoder/DetectionResultColumn.js
var __values32 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DetectionResultColumn = (
  /** @class */
  function() {
    function DetectionResultColumn2(boundingBox) {
      this.boundingBox = new BoundingBox_default(boundingBox);
      this.codewords = new Array(boundingBox.getMaxY() - boundingBox.getMinY() + 1);
    }
    DetectionResultColumn2.prototype.getCodewordNearby = function(imageRow) {
      var codeword = this.getCodeword(imageRow);
      if (codeword != null) {
        return codeword;
      }
      for (var i = 1; i < DetectionResultColumn2.MAX_NEARBY_DISTANCE; i++) {
        var nearImageRow = this.imageRowToCodewordIndex(imageRow) - i;
        if (nearImageRow >= 0) {
          codeword = this.codewords[nearImageRow];
          if (codeword != null) {
            return codeword;
          }
        }
        nearImageRow = this.imageRowToCodewordIndex(imageRow) + i;
        if (nearImageRow < this.codewords.length) {
          codeword = this.codewords[nearImageRow];
          if (codeword != null) {
            return codeword;
          }
        }
      }
      return null;
    };
    DetectionResultColumn2.prototype.imageRowToCodewordIndex = function(imageRow) {
      return imageRow - this.boundingBox.getMinY();
    };
    DetectionResultColumn2.prototype.setCodeword = function(imageRow, codeword) {
      this.codewords[this.imageRowToCodewordIndex(imageRow)] = codeword;
    };
    DetectionResultColumn2.prototype.getCodeword = function(imageRow) {
      return this.codewords[this.imageRowToCodewordIndex(imageRow)];
    };
    DetectionResultColumn2.prototype.getBoundingBox = function() {
      return this.boundingBox;
    };
    DetectionResultColumn2.prototype.getCodewords = function() {
      return this.codewords;
    };
    DetectionResultColumn2.prototype.toString = function() {
      var e_1, _a2;
      var formatter = new Formatter_default();
      var row = 0;
      try {
        for (var _b = __values32(this.codewords), _c = _b.next(); !_c.done; _c = _b.next()) {
          var codeword = _c.value;
          if (codeword == null) {
            formatter.format("%3d:    |   %n", row++);
            continue;
          }
          formatter.format("%3d: %3d|%3d%n", row++, codeword.getRowNumber(), codeword.getValue());
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return formatter.toString();
    };
    DetectionResultColumn2.MAX_NEARBY_DISTANCE = 5;
    return DetectionResultColumn2;
  }()
);
var DetectionResultColumn_default = DetectionResultColumn;

// node_modules/@zxing/library/esm/core/pdf417/decoder/BarcodeValue.js
var __values33 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var BarcodeValue = (
  /** @class */
  function() {
    function BarcodeValue2() {
      this.values = /* @__PURE__ */ new Map();
    }
    BarcodeValue2.prototype.setValue = function(value) {
      value = Math.trunc(value);
      var confidence = this.values.get(value);
      if (confidence == null) {
        confidence = 0;
      }
      confidence++;
      this.values.set(value, confidence);
    };
    BarcodeValue2.prototype.getValue = function() {
      var e_1, _a2;
      var maxConfidence = -1;
      var result = new Array();
      var _loop_1 = function(key2, value2) {
        var entry = {
          getKey: function() {
            return key2;
          },
          getValue: function() {
            return value2;
          }
        };
        if (entry.getValue() > maxConfidence) {
          maxConfidence = entry.getValue();
          result = [];
          result.push(entry.getKey());
        } else if (entry.getValue() === maxConfidence) {
          result.push(entry.getKey());
        }
      };
      try {
        for (var _b = __values33(this.values.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
          _loop_1(key, value);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return PDF417Common_default.toIntArray(result);
    };
    BarcodeValue2.prototype.getConfidence = function(value) {
      return this.values.get(value);
    };
    return BarcodeValue2;
  }()
);
var BarcodeValue_default = BarcodeValue;

// node_modules/@zxing/library/esm/core/pdf417/decoder/DetectionResultRowIndicatorColumn.js
var __extends57 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values34 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DetectionResultRowIndicatorColumn = (
  /** @class */
  function(_super) {
    __extends57(DetectionResultRowIndicatorColumn2, _super);
    function DetectionResultRowIndicatorColumn2(boundingBox, isLeft) {
      var _this = _super.call(this, boundingBox) || this;
      _this._isLeft = isLeft;
      return _this;
    }
    DetectionResultRowIndicatorColumn2.prototype.setRowNumbers = function() {
      var e_1, _a2;
      try {
        for (var _b = __values34(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var codeword = _c.value;
          if (codeword != null) {
            codeword.setRowNumberAsRowIndicatorColumn();
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    DetectionResultRowIndicatorColumn2.prototype.adjustCompleteIndicatorColumnRowNumbers = function(barcodeMetadata) {
      var codewords = this.getCodewords();
      this.setRowNumbers();
      this.removeIncorrectCodewords(codewords, barcodeMetadata);
      var boundingBox = this.getBoundingBox();
      var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();
      var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();
      var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));
      var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));
      var barcodeRow = -1;
      var maxRowHeight = 1;
      var currentRowHeight = 0;
      for (var codewordsRow = firstRow; codewordsRow < lastRow; codewordsRow++) {
        if (codewords[codewordsRow] == null) {
          continue;
        }
        var codeword = codewords[codewordsRow];
        var rowDifference = codeword.getRowNumber() - barcodeRow;
        if (rowDifference === 0) {
          currentRowHeight++;
        } else if (rowDifference === 1) {
          maxRowHeight = Math.max(maxRowHeight, currentRowHeight);
          currentRowHeight = 1;
          barcodeRow = codeword.getRowNumber();
        } else if (rowDifference < 0 || codeword.getRowNumber() >= barcodeMetadata.getRowCount() || rowDifference > codewordsRow) {
          codewords[codewordsRow] = null;
        } else {
          var checkedRows = void 0;
          if (maxRowHeight > 2) {
            checkedRows = (maxRowHeight - 2) * rowDifference;
          } else {
            checkedRows = rowDifference;
          }
          var closePreviousCodewordFound = checkedRows >= codewordsRow;
          for (var i = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {
            closePreviousCodewordFound = codewords[codewordsRow - i] != null;
          }
          if (closePreviousCodewordFound) {
            codewords[codewordsRow] = null;
          } else {
            barcodeRow = codeword.getRowNumber();
            currentRowHeight = 1;
          }
        }
      }
    };
    DetectionResultRowIndicatorColumn2.prototype.getRowHeights = function() {
      var e_2, _a2;
      var barcodeMetadata = this.getBarcodeMetadata();
      if (barcodeMetadata == null) {
        return null;
      }
      this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);
      var result = new Int32Array(barcodeMetadata.getRowCount());
      try {
        for (var _b = __values34(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var codeword = _c.value;
          if (codeword != null) {
            var rowNumber = codeword.getRowNumber();
            if (rowNumber >= result.length) {
              continue;
            }
            result[rowNumber]++;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return result;
    };
    DetectionResultRowIndicatorColumn2.prototype.adjustIncompleteIndicatorColumnRowNumbers = function(barcodeMetadata) {
      var boundingBox = this.getBoundingBox();
      var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();
      var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();
      var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));
      var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));
      var codewords = this.getCodewords();
      var barcodeRow = -1;
      var maxRowHeight = 1;
      var currentRowHeight = 0;
      for (var codewordsRow = firstRow; codewordsRow < lastRow; codewordsRow++) {
        if (codewords[codewordsRow] == null) {
          continue;
        }
        var codeword = codewords[codewordsRow];
        codeword.setRowNumberAsRowIndicatorColumn();
        var rowDifference = codeword.getRowNumber() - barcodeRow;
        if (rowDifference === 0) {
          currentRowHeight++;
        } else if (rowDifference === 1) {
          maxRowHeight = Math.max(maxRowHeight, currentRowHeight);
          currentRowHeight = 1;
          barcodeRow = codeword.getRowNumber();
        } else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {
          codewords[codewordsRow] = null;
        } else {
          barcodeRow = codeword.getRowNumber();
          currentRowHeight = 1;
        }
      }
    };
    DetectionResultRowIndicatorColumn2.prototype.getBarcodeMetadata = function() {
      var e_3, _a2;
      var codewords = this.getCodewords();
      var barcodeColumnCount = new BarcodeValue_default();
      var barcodeRowCountUpperPart = new BarcodeValue_default();
      var barcodeRowCountLowerPart = new BarcodeValue_default();
      var barcodeECLevel = new BarcodeValue_default();
      try {
        for (var codewords_1 = __values34(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {
          var codeword = codewords_1_1.value;
          if (codeword == null) {
            continue;
          }
          codeword.setRowNumberAsRowIndicatorColumn();
          var rowIndicatorValue = codeword.getValue() % 30;
          var codewordRowNumber = codeword.getRowNumber();
          if (!this._isLeft) {
            codewordRowNumber += 2;
          }
          switch (codewordRowNumber % 3) {
            case 0:
              barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);
              break;
            case 1:
              barcodeECLevel.setValue(rowIndicatorValue / 3);
              barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);
              break;
            case 2:
              barcodeColumnCount.setValue(rowIndicatorValue + 1);
              break;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (codewords_1_1 && !codewords_1_1.done && (_a2 = codewords_1.return)) _a2.call(codewords_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      if (barcodeColumnCount.getValue().length === 0 || barcodeRowCountUpperPart.getValue().length === 0 || barcodeRowCountLowerPart.getValue().length === 0 || barcodeECLevel.getValue().length === 0 || barcodeColumnCount.getValue()[0] < 1 || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_default.MIN_ROWS_IN_BARCODE || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_default.MAX_ROWS_IN_BARCODE) {
        return null;
      }
      var barcodeMetadata = new BarcodeMetadata_default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);
      this.removeIncorrectCodewords(codewords, barcodeMetadata);
      return barcodeMetadata;
    };
    DetectionResultRowIndicatorColumn2.prototype.removeIncorrectCodewords = function(codewords, barcodeMetadata) {
      for (var codewordRow = 0; codewordRow < codewords.length; codewordRow++) {
        var codeword = codewords[codewordRow];
        if (codewords[codewordRow] == null) {
          continue;
        }
        var rowIndicatorValue = codeword.getValue() % 30;
        var codewordRowNumber = codeword.getRowNumber();
        if (codewordRowNumber > barcodeMetadata.getRowCount()) {
          codewords[codewordRow] = null;
          continue;
        }
        if (!this._isLeft) {
          codewordRowNumber += 2;
        }
        switch (codewordRowNumber % 3) {
          case 0:
            if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {
              codewords[codewordRow] = null;
            }
            break;
          case 1:
            if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() || rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {
              codewords[codewordRow] = null;
            }
            break;
          case 2:
            if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {
              codewords[codewordRow] = null;
            }
            break;
        }
      }
    };
    DetectionResultRowIndicatorColumn2.prototype.isLeft = function() {
      return this._isLeft;
    };
    DetectionResultRowIndicatorColumn2.prototype.toString = function() {
      return "IsLeft: " + this._isLeft + "\n" + _super.prototype.toString.call(this);
    };
    return DetectionResultRowIndicatorColumn2;
  }(DetectionResultColumn_default)
);
var DetectionResultRowIndicatorColumn_default = DetectionResultRowIndicatorColumn;

// node_modules/@zxing/library/esm/core/pdf417/decoder/DetectionResult.js
var __values35 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DetectionResult = (
  /** @class */
  function() {
    function DetectionResult2(barcodeMetadata, boundingBox) {
      this.ADJUST_ROW_NUMBER_SKIP = 2;
      this.barcodeMetadata = barcodeMetadata;
      this.barcodeColumnCount = barcodeMetadata.getColumnCount();
      this.boundingBox = boundingBox;
      this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);
    }
    DetectionResult2.prototype.getDetectionResultColumns = function() {
      this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);
      this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);
      var unadjustedCodewordCount = PDF417Common_default.MAX_CODEWORDS_IN_BARCODE;
      var previousUnadjustedCount;
      do {
        previousUnadjustedCount = unadjustedCodewordCount;
        unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();
      } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);
      return this.detectionResultColumns;
    };
    DetectionResult2.prototype.adjustIndicatorColumnRowNumbers = function(detectionResultColumn) {
      if (detectionResultColumn != null) {
        detectionResultColumn.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);
      }
    };
    DetectionResult2.prototype.adjustRowNumbersAndGetCount = function() {
      var unadjustedCount = this.adjustRowNumbersByRow();
      if (unadjustedCount === 0) {
        return 0;
      }
      for (var barcodeColumn = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {
        var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();
        for (var codewordsRow = 0; codewordsRow < codewords.length; codewordsRow++) {
          if (codewords[codewordsRow] == null) {
            continue;
          }
          if (!codewords[codewordsRow].hasValidRowNumber()) {
            this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);
          }
        }
      }
      return unadjustedCount;
    };
    DetectionResult2.prototype.adjustRowNumbersByRow = function() {
      this.adjustRowNumbersFromBothRI();
      var unadjustedCount = this.adjustRowNumbersFromLRI();
      return unadjustedCount + this.adjustRowNumbersFromRRI();
    };
    DetectionResult2.prototype.adjustRowNumbersFromBothRI = function() {
      if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {
        return;
      }
      var LRIcodewords = this.detectionResultColumns[0].getCodewords();
      var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();
      for (var codewordsRow = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {
        if (LRIcodewords[codewordsRow] != null && RRIcodewords[codewordsRow] != null && LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {
          for (var barcodeColumn = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {
            var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];
            if (codeword == null) {
              continue;
            }
            codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());
            if (!codeword.hasValidRowNumber()) {
              this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;
            }
          }
        }
      }
    };
    DetectionResult2.prototype.adjustRowNumbersFromRRI = function() {
      if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {
        return 0;
      }
      var unadjustedCount = 0;
      var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();
      for (var codewordsRow = 0; codewordsRow < codewords.length; codewordsRow++) {
        if (codewords[codewordsRow] == null) {
          continue;
        }
        var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();
        var invalidRowCounts = 0;
        for (var barcodeColumn = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {
          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];
          if (codeword != null) {
            invalidRowCounts = DetectionResult2.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);
            if (!codeword.hasValidRowNumber()) {
              unadjustedCount++;
            }
          }
        }
      }
      return unadjustedCount;
    };
    DetectionResult2.prototype.adjustRowNumbersFromLRI = function() {
      if (this.detectionResultColumns[0] == null) {
        return 0;
      }
      var unadjustedCount = 0;
      var codewords = this.detectionResultColumns[0].getCodewords();
      for (var codewordsRow = 0; codewordsRow < codewords.length; codewordsRow++) {
        if (codewords[codewordsRow] == null) {
          continue;
        }
        var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();
        var invalidRowCounts = 0;
        for (var barcodeColumn = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {
          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];
          if (codeword != null) {
            invalidRowCounts = DetectionResult2.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);
            if (!codeword.hasValidRowNumber()) {
              unadjustedCount++;
            }
          }
        }
      }
      return unadjustedCount;
    };
    DetectionResult2.adjustRowNumberIfValid = function(rowIndicatorRowNumber, invalidRowCounts, codeword) {
      if (codeword == null) {
        return invalidRowCounts;
      }
      if (!codeword.hasValidRowNumber()) {
        if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {
          codeword.setRowNumber(rowIndicatorRowNumber);
          invalidRowCounts = 0;
        } else {
          ++invalidRowCounts;
        }
      }
      return invalidRowCounts;
    };
    DetectionResult2.prototype.adjustRowNumbers = function(barcodeColumn, codewordsRow, codewords) {
      var e_1, _a2;
      if (this.detectionResultColumns[barcodeColumn - 1] == null) {
        return;
      }
      var codeword = codewords[codewordsRow];
      var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();
      var nextColumnCodewords = previousColumnCodewords;
      if (this.detectionResultColumns[barcodeColumn + 1] != null) {
        nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();
      }
      var otherCodewords = new Array(14);
      otherCodewords[2] = previousColumnCodewords[codewordsRow];
      otherCodewords[3] = nextColumnCodewords[codewordsRow];
      if (codewordsRow > 0) {
        otherCodewords[0] = codewords[codewordsRow - 1];
        otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];
        otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];
      }
      if (codewordsRow > 1) {
        otherCodewords[8] = codewords[codewordsRow - 2];
        otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];
        otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];
      }
      if (codewordsRow < codewords.length - 1) {
        otherCodewords[1] = codewords[codewordsRow + 1];
        otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];
        otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];
      }
      if (codewordsRow < codewords.length - 2) {
        otherCodewords[9] = codewords[codewordsRow + 2];
        otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];
        otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];
      }
      try {
        for (var otherCodewords_1 = __values35(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {
          var otherCodeword = otherCodewords_1_1.value;
          if (DetectionResult2.adjustRowNumber(codeword, otherCodeword)) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a2 = otherCodewords_1.return)) _a2.call(otherCodewords_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    DetectionResult2.adjustRowNumber = function(codeword, otherCodeword) {
      if (otherCodeword == null) {
        return false;
      }
      if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {
        codeword.setRowNumber(otherCodeword.getRowNumber());
        return true;
      }
      return false;
    };
    DetectionResult2.prototype.getBarcodeColumnCount = function() {
      return this.barcodeColumnCount;
    };
    DetectionResult2.prototype.getBarcodeRowCount = function() {
      return this.barcodeMetadata.getRowCount();
    };
    DetectionResult2.prototype.getBarcodeECLevel = function() {
      return this.barcodeMetadata.getErrorCorrectionLevel();
    };
    DetectionResult2.prototype.setBoundingBox = function(boundingBox) {
      this.boundingBox = boundingBox;
    };
    DetectionResult2.prototype.getBoundingBox = function() {
      return this.boundingBox;
    };
    DetectionResult2.prototype.setDetectionResultColumn = function(barcodeColumn, detectionResultColumn) {
      this.detectionResultColumns[barcodeColumn] = detectionResultColumn;
    };
    DetectionResult2.prototype.getDetectionResultColumn = function(barcodeColumn) {
      return this.detectionResultColumns[barcodeColumn];
    };
    DetectionResult2.prototype.toString = function() {
      var rowIndicatorColumn = this.detectionResultColumns[0];
      if (rowIndicatorColumn == null) {
        rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];
      }
      var formatter = new Formatter_default();
      for (var codewordsRow = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {
        formatter.format("CW %3d:", codewordsRow);
        for (var barcodeColumn = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {
          if (this.detectionResultColumns[barcodeColumn] == null) {
            formatter.format("    |   ");
            continue;
          }
          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];
          if (codeword == null) {
            formatter.format("    |   ");
            continue;
          }
          formatter.format(" %3d|%3d", codeword.getRowNumber(), codeword.getValue());
        }
        formatter.format("%n");
      }
      return formatter.toString();
    };
    return DetectionResult2;
  }()
);
var DetectionResult_default = DetectionResult;

// node_modules/@zxing/library/esm/core/pdf417/decoder/Codeword.js
var Codeword = (
  /** @class */
  function() {
    function Codeword2(startX, endX, bucket, value) {
      this.rowNumber = Codeword2.BARCODE_ROW_UNKNOWN;
      this.startX = Math.trunc(startX);
      this.endX = Math.trunc(endX);
      this.bucket = Math.trunc(bucket);
      this.value = Math.trunc(value);
    }
    Codeword2.prototype.hasValidRowNumber = function() {
      return this.isValidRowNumber(this.rowNumber);
    };
    Codeword2.prototype.isValidRowNumber = function(rowNumber) {
      return rowNumber !== Codeword2.BARCODE_ROW_UNKNOWN && this.bucket === rowNumber % 3 * 3;
    };
    Codeword2.prototype.setRowNumberAsRowIndicatorColumn = function() {
      this.rowNumber = Math.trunc(Math.trunc(this.value / 30) * 3 + Math.trunc(this.bucket / 3));
    };
    Codeword2.prototype.getWidth = function() {
      return this.endX - this.startX;
    };
    Codeword2.prototype.getStartX = function() {
      return this.startX;
    };
    Codeword2.prototype.getEndX = function() {
      return this.endX;
    };
    Codeword2.prototype.getBucket = function() {
      return this.bucket;
    };
    Codeword2.prototype.getValue = function() {
      return this.value;
    };
    Codeword2.prototype.getRowNumber = function() {
      return this.rowNumber;
    };
    Codeword2.prototype.setRowNumber = function(rowNumber) {
      this.rowNumber = rowNumber;
    };
    Codeword2.prototype.toString = function() {
      return this.rowNumber + "|" + this.value;
    };
    Codeword2.BARCODE_ROW_UNKNOWN = -1;
    return Codeword2;
  }()
);
var Codeword_default = Codeword;

// node_modules/@zxing/library/esm/core/pdf417/decoder/PDF417CodewordDecoder.js
var PDF417CodewordDecoder = (
  /** @class */
  function() {
    function PDF417CodewordDecoder2() {
    }
    PDF417CodewordDecoder2.initialize = function() {
      for (var i = 0; i < PDF417Common_default.SYMBOL_TABLE.length; i++) {
        var currentSymbol = PDF417Common_default.SYMBOL_TABLE[i];
        var currentBit = currentSymbol & 1;
        for (var j = 0; j < PDF417Common_default.BARS_IN_MODULE; j++) {
          var size = 0;
          while ((currentSymbol & 1) === currentBit) {
            size += 1;
            currentSymbol >>= 1;
          }
          currentBit = currentSymbol & 1;
          if (!PDF417CodewordDecoder2.RATIOS_TABLE[i]) {
            PDF417CodewordDecoder2.RATIOS_TABLE[i] = new Array(PDF417Common_default.BARS_IN_MODULE);
          }
          PDF417CodewordDecoder2.RATIOS_TABLE[i][PDF417Common_default.BARS_IN_MODULE - j - 1] = Math.fround(size / PDF417Common_default.MODULES_IN_CODEWORD);
        }
      }
      this.bSymbolTableReady = true;
    };
    PDF417CodewordDecoder2.getDecodedValue = function(moduleBitCount) {
      var decodedValue = PDF417CodewordDecoder2.getDecodedCodewordValue(PDF417CodewordDecoder2.sampleBitCounts(moduleBitCount));
      if (decodedValue !== -1) {
        return decodedValue;
      }
      return PDF417CodewordDecoder2.getClosestDecodedValue(moduleBitCount);
    };
    PDF417CodewordDecoder2.sampleBitCounts = function(moduleBitCount) {
      var bitCountSum = MathUtils_default.sum(moduleBitCount);
      var result = new Int32Array(PDF417Common_default.BARS_IN_MODULE);
      var bitCountIndex = 0;
      var sumPreviousBits = 0;
      for (var i = 0; i < PDF417Common_default.MODULES_IN_CODEWORD; i++) {
        var sampleIndex = bitCountSum / (2 * PDF417Common_default.MODULES_IN_CODEWORD) + i * bitCountSum / PDF417Common_default.MODULES_IN_CODEWORD;
        if (sumPreviousBits + moduleBitCount[bitCountIndex] <= sampleIndex) {
          sumPreviousBits += moduleBitCount[bitCountIndex];
          bitCountIndex++;
        }
        result[bitCountIndex]++;
      }
      return result;
    };
    PDF417CodewordDecoder2.getDecodedCodewordValue = function(moduleBitCount) {
      var decodedValue = PDF417CodewordDecoder2.getBitValue(moduleBitCount);
      return PDF417Common_default.getCodeword(decodedValue) === -1 ? -1 : decodedValue;
    };
    PDF417CodewordDecoder2.getBitValue = function(moduleBitCount) {
      var result = (
        /*long*/
        0
      );
      for (var i = 0; i < moduleBitCount.length; i++) {
        for (var bit = 0; bit < moduleBitCount[i]; bit++) {
          result = result << 1 | (i % 2 === 0 ? 1 : 0);
        }
      }
      return Math.trunc(result);
    };
    PDF417CodewordDecoder2.getClosestDecodedValue = function(moduleBitCount) {
      var bitCountSum = MathUtils_default.sum(moduleBitCount);
      var bitCountRatios = new Array(PDF417Common_default.BARS_IN_MODULE);
      if (bitCountSum > 1) {
        for (var i = 0; i < bitCountRatios.length; i++) {
          bitCountRatios[i] = Math.fround(moduleBitCount[i] / bitCountSum);
        }
      }
      var bestMatchError = Float_default.MAX_VALUE;
      var bestMatch = -1;
      if (!this.bSymbolTableReady) {
        PDF417CodewordDecoder2.initialize();
      }
      for (var j = 0; j < PDF417CodewordDecoder2.RATIOS_TABLE.length; j++) {
        var error = 0;
        var ratioTableRow = PDF417CodewordDecoder2.RATIOS_TABLE[j];
        for (var k = 0; k < PDF417Common_default.BARS_IN_MODULE; k++) {
          var diff = Math.fround(ratioTableRow[k] - bitCountRatios[k]);
          error += Math.fround(diff * diff);
          if (error >= bestMatchError) {
            break;
          }
        }
        if (error < bestMatchError) {
          bestMatchError = error;
          bestMatch = PDF417Common_default.SYMBOL_TABLE[j];
        }
      }
      return bestMatch;
    };
    PDF417CodewordDecoder2.bSymbolTableReady = false;
    PDF417CodewordDecoder2.RATIOS_TABLE = new Array(PDF417Common_default.SYMBOL_TABLE.length).map(function(x) {
      return x = new Array(PDF417Common_default.BARS_IN_MODULE);
    });
    return PDF417CodewordDecoder2;
  }()
);
var PDF417CodewordDecoder_default = PDF417CodewordDecoder;

// node_modules/@zxing/library/esm/core/pdf417/PDF417ResultMetadata.js
var PDF417ResultMetadata = (
  /** @class */
  function() {
    function PDF417ResultMetadata2() {
      this.segmentCount = -1;
      this.fileSize = -1;
      this.timestamp = -1;
      this.checksum = -1;
    }
    PDF417ResultMetadata2.prototype.getSegmentIndex = function() {
      return this.segmentIndex;
    };
    PDF417ResultMetadata2.prototype.setSegmentIndex = function(segmentIndex) {
      this.segmentIndex = segmentIndex;
    };
    PDF417ResultMetadata2.prototype.getFileId = function() {
      return this.fileId;
    };
    PDF417ResultMetadata2.prototype.setFileId = function(fileId) {
      this.fileId = fileId;
    };
    PDF417ResultMetadata2.prototype.getOptionalData = function() {
      return this.optionalData;
    };
    PDF417ResultMetadata2.prototype.setOptionalData = function(optionalData) {
      this.optionalData = optionalData;
    };
    PDF417ResultMetadata2.prototype.isLastSegment = function() {
      return this.lastSegment;
    };
    PDF417ResultMetadata2.prototype.setLastSegment = function(lastSegment) {
      this.lastSegment = lastSegment;
    };
    PDF417ResultMetadata2.prototype.getSegmentCount = function() {
      return this.segmentCount;
    };
    PDF417ResultMetadata2.prototype.setSegmentCount = function(segmentCount) {
      this.segmentCount = segmentCount;
    };
    PDF417ResultMetadata2.prototype.getSender = function() {
      return this.sender || null;
    };
    PDF417ResultMetadata2.prototype.setSender = function(sender) {
      this.sender = sender;
    };
    PDF417ResultMetadata2.prototype.getAddressee = function() {
      return this.addressee || null;
    };
    PDF417ResultMetadata2.prototype.setAddressee = function(addressee) {
      this.addressee = addressee;
    };
    PDF417ResultMetadata2.prototype.getFileName = function() {
      return this.fileName;
    };
    PDF417ResultMetadata2.prototype.setFileName = function(fileName) {
      this.fileName = fileName;
    };
    PDF417ResultMetadata2.prototype.getFileSize = function() {
      return this.fileSize;
    };
    PDF417ResultMetadata2.prototype.setFileSize = function(fileSize) {
      this.fileSize = fileSize;
    };
    PDF417ResultMetadata2.prototype.getChecksum = function() {
      return this.checksum;
    };
    PDF417ResultMetadata2.prototype.setChecksum = function(checksum) {
      this.checksum = checksum;
    };
    PDF417ResultMetadata2.prototype.getTimestamp = function() {
      return this.timestamp;
    };
    PDF417ResultMetadata2.prototype.setTimestamp = function(timestamp) {
      this.timestamp = timestamp;
    };
    return PDF417ResultMetadata2;
  }()
);
var PDF417ResultMetadata_default = PDF417ResultMetadata;

// node_modules/@zxing/library/esm/core/util/Long.js
var Long = (
  /** @class */
  function() {
    function Long2() {
    }
    Long2.parseLong = function(num, radix) {
      if (radix === void 0) {
        radix = void 0;
      }
      return parseInt(num, radix);
    };
    return Long2;
  }()
);
var Long_default = Long;

// node_modules/@zxing/library/esm/core/NullPointerException.js
var __extends58 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NullPointerException = (
  /** @class */
  function(_super) {
    __extends58(NullPointerException2, _super);
    function NullPointerException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NullPointerException2.kind = "NullPointerException";
    return NullPointerException2;
  }(Exception_default)
);
var NullPointerException_default = NullPointerException;

// node_modules/@zxing/library/esm/core/util/OutputStream.js
var OutputStream = (
  /** @class */
  function() {
    function OutputStream2() {
    }
    OutputStream2.prototype.writeBytes = function(b) {
      this.writeBytesOffset(b, 0, b.length);
    };
    OutputStream2.prototype.writeBytesOffset = function(b, off, len) {
      if (b == null) {
        throw new NullPointerException_default();
      } else if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {
        throw new IndexOutOfBoundsException_default();
      } else if (len === 0) {
        return;
      }
      for (var i = 0; i < len; i++) {
        this.write(b[off + i]);
      }
    };
    OutputStream2.prototype.flush = function() {
    };
    OutputStream2.prototype.close = function() {
    };
    return OutputStream2;
  }()
);
var OutputStream_default = OutputStream;

// node_modules/@zxing/library/esm/core/OutOfMemoryError.js
var __extends59 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var OutOfMemoryError = (
  /** @class */
  function(_super) {
    __extends59(OutOfMemoryError2, _super);
    function OutOfMemoryError2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return OutOfMemoryError2;
  }(Exception_default)
);
var OutOfMemoryError_default = OutOfMemoryError;

// node_modules/@zxing/library/esm/core/util/ByteArrayOutputStream.js
var __extends60 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ByteArrayOutputStream = (
  /** @class */
  function(_super) {
    __extends60(ByteArrayOutputStream2, _super);
    function ByteArrayOutputStream2(size) {
      if (size === void 0) {
        size = 32;
      }
      var _this = _super.call(this) || this;
      _this.count = 0;
      if (size < 0) {
        throw new IllegalArgumentException_default("Negative initial size: " + size);
      }
      _this.buf = new Uint8Array(size);
      return _this;
    }
    ByteArrayOutputStream2.prototype.ensureCapacity = function(minCapacity) {
      if (minCapacity - this.buf.length > 0)
        this.grow(minCapacity);
    };
    ByteArrayOutputStream2.prototype.grow = function(minCapacity) {
      var oldCapacity = this.buf.length;
      var newCapacity = oldCapacity << 1;
      if (newCapacity - minCapacity < 0)
        newCapacity = minCapacity;
      if (newCapacity < 0) {
        if (minCapacity < 0)
          throw new OutOfMemoryError_default();
        newCapacity = Integer_default.MAX_VALUE;
      }
      this.buf = Arrays_default.copyOfUint8Array(this.buf, newCapacity);
    };
    ByteArrayOutputStream2.prototype.write = function(b) {
      this.ensureCapacity(this.count + 1);
      this.buf[this.count] = /*(byte)*/
      b;
      this.count += 1;
    };
    ByteArrayOutputStream2.prototype.writeBytesOffset = function(b, off, len) {
      if (off < 0 || off > b.length || len < 0 || off + len - b.length > 0) {
        throw new IndexOutOfBoundsException_default();
      }
      this.ensureCapacity(this.count + len);
      System_default.arraycopy(b, off, this.buf, this.count, len);
      this.count += len;
    };
    ByteArrayOutputStream2.prototype.writeTo = function(out) {
      out.writeBytesOffset(this.buf, 0, this.count);
    };
    ByteArrayOutputStream2.prototype.reset = function() {
      this.count = 0;
    };
    ByteArrayOutputStream2.prototype.toByteArray = function() {
      return Arrays_default.copyOfUint8Array(this.buf, this.count);
    };
    ByteArrayOutputStream2.prototype.size = function() {
      return this.count;
    };
    ByteArrayOutputStream2.prototype.toString = function(param) {
      if (!param) {
        return this.toString_void();
      }
      if (typeof param === "string") {
        return this.toString_string(param);
      }
      return this.toString_number(param);
    };
    ByteArrayOutputStream2.prototype.toString_void = function() {
      return new String(
        this.buf
        /*, 0, this.count*/
      ).toString();
    };
    ByteArrayOutputStream2.prototype.toString_string = function(charsetName) {
      return new String(
        this.buf
        /*, 0, this.count, charsetName*/
      ).toString();
    };
    ByteArrayOutputStream2.prototype.toString_number = function(hibyte) {
      return new String(
        this.buf
        /*, hibyte, 0, this.count*/
      ).toString();
    };
    ByteArrayOutputStream2.prototype.close = function() {
    };
    return ByteArrayOutputStream2;
  }(OutputStream_default)
);
var ByteArrayOutputStream_default = ByteArrayOutputStream;

// node_modules/@zxing/library/esm/core/pdf417/decoder/DecodedBitStreamParser.js
var Mode3;
(function(Mode5) {
  Mode5[Mode5["ALPHA"] = 0] = "ALPHA";
  Mode5[Mode5["LOWER"] = 1] = "LOWER";
  Mode5[Mode5["MIXED"] = 2] = "MIXED";
  Mode5[Mode5["PUNCT"] = 3] = "PUNCT";
  Mode5[Mode5["ALPHA_SHIFT"] = 4] = "ALPHA_SHIFT";
  Mode5[Mode5["PUNCT_SHIFT"] = 5] = "PUNCT_SHIFT";
})(Mode3 || (Mode3 = {}));
function getBigIntConstructor() {
  if (typeof window !== "undefined") {
    return window["BigInt"] || null;
  }
  if (typeof global !== "undefined") {
    return global["BigInt"] || null;
  }
  if (typeof self !== "undefined") {
    return self["BigInt"] || null;
  }
  throw new Error("Can't search globals for BigInt!");
}
var BigInteger;
function createBigInt(num) {
  if (typeof BigInteger === "undefined") {
    BigInteger = getBigIntConstructor();
  }
  if (BigInteger === null) {
    throw new Error("BigInt is not supported!");
  }
  return BigInteger(num);
}
function getEXP900() {
  var EXP900 = [];
  EXP900[0] = createBigInt(1);
  var nineHundred = createBigInt(900);
  EXP900[1] = nineHundred;
  for (var i = 2; i < 16; i++) {
    EXP900[i] = EXP900[i - 1] * nineHundred;
  }
  return EXP900;
}
var DecodedBitStreamParser3 = (
  /** @class */
  function() {
    function DecodedBitStreamParser4() {
    }
    DecodedBitStreamParser4.decode = function(codewords, ecLevel) {
      var result = new StringBuilder_default("");
      var encoding = CharacterSetECI_default.ISO8859_1;
      result.enableDecoding(encoding);
      var codeIndex = 1;
      var code = codewords[codeIndex++];
      var resultMetadata = new PDF417ResultMetadata_default();
      while (codeIndex < codewords[0]) {
        switch (code) {
          case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
            codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex, result);
            break;
          case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
          case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
            codeIndex = DecodedBitStreamParser4.byteCompaction(code, codewords, encoding, codeIndex, result);
            break;
          case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
            result.append(
              /*(char)*/
              codewords[codeIndex++]
            );
            break;
          case DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH:
            codeIndex = DecodedBitStreamParser4.numericCompaction(codewords, codeIndex, result);
            break;
          case DecodedBitStreamParser4.ECI_CHARSET:
            var charsetECI = CharacterSetECI_default.getCharacterSetECIByValue(codewords[codeIndex++]);
            break;
          case DecodedBitStreamParser4.ECI_GENERAL_PURPOSE:
            codeIndex += 2;
            break;
          case DecodedBitStreamParser4.ECI_USER_DEFINED:
            codeIndex++;
            break;
          case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
            codeIndex = DecodedBitStreamParser4.decodeMacroBlock(codewords, codeIndex, resultMetadata);
            break;
          case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
            throw new FormatException_default();
          default:
            codeIndex--;
            codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex, result);
            break;
        }
        if (codeIndex < codewords.length) {
          code = codewords[codeIndex++];
        } else {
          throw FormatException_default.getFormatInstance();
        }
      }
      if (result.length() === 0) {
        throw FormatException_default.getFormatInstance();
      }
      var decoderResult = new DecoderResult_default(null, result.toString(), null, ecLevel);
      decoderResult.setOther(resultMetadata);
      return decoderResult;
    };
    DecodedBitStreamParser4.decodeMacroBlock = function(codewords, codeIndex, resultMetadata) {
      if (codeIndex + DecodedBitStreamParser4.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {
        throw FormatException_default.getFormatInstance();
      }
      var segmentIndexArray = new Int32Array(DecodedBitStreamParser4.NUMBER_OF_SEQUENCE_CODEWORDS);
      for (var i = 0; i < DecodedBitStreamParser4.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {
        segmentIndexArray[i] = codewords[codeIndex];
      }
      resultMetadata.setSegmentIndex(Integer_default.parseInt(DecodedBitStreamParser4.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser4.NUMBER_OF_SEQUENCE_CODEWORDS)));
      var fileId = new StringBuilder_default();
      codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex, fileId);
      resultMetadata.setFileId(fileId.toString());
      var optionalFieldsStart = -1;
      if (codewords[codeIndex] === DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {
        optionalFieldsStart = codeIndex + 1;
      }
      while (codeIndex < codewords[0]) {
        switch (codewords[codeIndex]) {
          case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
            codeIndex++;
            switch (codewords[codeIndex]) {
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:
                var fileName = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex + 1, fileName);
                resultMetadata.setFileName(fileName.toString());
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_SENDER:
                var sender = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex + 1, sender);
                resultMetadata.setSender(sender.toString());
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:
                var addressee = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.textCompaction(codewords, codeIndex + 1, addressee);
                resultMetadata.setAddressee(addressee.toString());
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:
                var segmentCount = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.numericCompaction(codewords, codeIndex + 1, segmentCount);
                resultMetadata.setSegmentCount(Integer_default.parseInt(segmentCount.toString()));
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:
                var timestamp = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.numericCompaction(codewords, codeIndex + 1, timestamp);
                resultMetadata.setTimestamp(Long_default.parseLong(timestamp.toString()));
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:
                var checksum = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.numericCompaction(codewords, codeIndex + 1, checksum);
                resultMetadata.setChecksum(Integer_default.parseInt(checksum.toString()));
                break;
              case DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:
                var fileSize = new StringBuilder_default();
                codeIndex = DecodedBitStreamParser4.numericCompaction(codewords, codeIndex + 1, fileSize);
                resultMetadata.setFileSize(Long_default.parseLong(fileSize.toString()));
                break;
              default:
                throw FormatException_default.getFormatInstance();
            }
            break;
          case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
            codeIndex++;
            resultMetadata.setLastSegment(true);
            break;
          default:
            throw FormatException_default.getFormatInstance();
        }
      }
      if (optionalFieldsStart !== -1) {
        var optionalFieldsLength = codeIndex - optionalFieldsStart;
        if (resultMetadata.isLastSegment()) {
          optionalFieldsLength--;
        }
        resultMetadata.setOptionalData(Arrays_default.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));
      }
      return codeIndex;
    };
    DecodedBitStreamParser4.textCompaction = function(codewords, codeIndex, result) {
      var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);
      var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);
      var index = 0;
      var end = false;
      while (codeIndex < codewords[0] && !end) {
        var code = codewords[codeIndex++];
        if (code < DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH) {
          textCompactionData[index] = code / 30;
          textCompactionData[index + 1] = code % 30;
          index += 2;
        } else {
          switch (code) {
            case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
              textCompactionData[index++] = DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH;
              break;
            case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
            case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
            case DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH:
            case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
            case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
            case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
              codeIndex--;
              end = true;
              break;
            case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
              textCompactionData[index] = DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;
              code = codewords[codeIndex++];
              byteCompactionData[index] = code;
              index++;
              break;
          }
        }
      }
      DecodedBitStreamParser4.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);
      return codeIndex;
    };
    DecodedBitStreamParser4.decodeTextCompaction = function(textCompactionData, byteCompactionData, length, result) {
      var subMode = Mode3.ALPHA;
      var priorToShiftMode = Mode3.ALPHA;
      var i = 0;
      while (i < length) {
        var subModeCh = textCompactionData[i];
        var ch = (
          /*char*/
          ""
        );
        switch (subMode) {
          case Mode3.ALPHA:
            if (subModeCh < 26) {
              ch = /*(char)('A' + subModeCh) */
              String.fromCharCode(65 + subModeCh);
            } else {
              switch (subModeCh) {
                case 26:
                  ch = " ";
                  break;
                case DecodedBitStreamParser4.LL:
                  subMode = Mode3.LOWER;
                  break;
                case DecodedBitStreamParser4.ML:
                  subMode = Mode3.MIXED;
                  break;
                case DecodedBitStreamParser4.PS:
                  priorToShiftMode = subMode;
                  subMode = Mode3.PUNCT_SHIFT;
                  break;
                case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  result.append(
                    /*(char)*/
                    byteCompactionData[i]
                  );
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
          case Mode3.LOWER:
            if (subModeCh < 26) {
              ch = /*(char)('a' + subModeCh)*/
              String.fromCharCode(97 + subModeCh);
            } else {
              switch (subModeCh) {
                case 26:
                  ch = " ";
                  break;
                case DecodedBitStreamParser4.AS:
                  priorToShiftMode = subMode;
                  subMode = Mode3.ALPHA_SHIFT;
                  break;
                case DecodedBitStreamParser4.ML:
                  subMode = Mode3.MIXED;
                  break;
                case DecodedBitStreamParser4.PS:
                  priorToShiftMode = subMode;
                  subMode = Mode3.PUNCT_SHIFT;
                  break;
                case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  result.append(
                    /*(char)*/
                    byteCompactionData[i]
                  );
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
          case Mode3.MIXED:
            if (subModeCh < DecodedBitStreamParser4.PL) {
              ch = DecodedBitStreamParser4.MIXED_CHARS[subModeCh];
            } else {
              switch (subModeCh) {
                case DecodedBitStreamParser4.PL:
                  subMode = Mode3.PUNCT;
                  break;
                case 26:
                  ch = " ";
                  break;
                case DecodedBitStreamParser4.LL:
                  subMode = Mode3.LOWER;
                  break;
                case DecodedBitStreamParser4.AL:
                  subMode = Mode3.ALPHA;
                  break;
                case DecodedBitStreamParser4.PS:
                  priorToShiftMode = subMode;
                  subMode = Mode3.PUNCT_SHIFT;
                  break;
                case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  result.append(
                    /*(char)*/
                    byteCompactionData[i]
                  );
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
          case Mode3.PUNCT:
            if (subModeCh < DecodedBitStreamParser4.PAL) {
              ch = DecodedBitStreamParser4.PUNCT_CHARS[subModeCh];
            } else {
              switch (subModeCh) {
                case DecodedBitStreamParser4.PAL:
                  subMode = Mode3.ALPHA;
                  break;
                case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  result.append(
                    /*(char)*/
                    byteCompactionData[i]
                  );
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
          case Mode3.ALPHA_SHIFT:
            subMode = priorToShiftMode;
            if (subModeCh < 26) {
              ch = /*(char)('A' + subModeCh)*/
              String.fromCharCode(65 + subModeCh);
            } else {
              switch (subModeCh) {
                case 26:
                  ch = " ";
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
          case Mode3.PUNCT_SHIFT:
            subMode = priorToShiftMode;
            if (subModeCh < DecodedBitStreamParser4.PAL) {
              ch = DecodedBitStreamParser4.PUNCT_CHARS[subModeCh];
            } else {
              switch (subModeCh) {
                case DecodedBitStreamParser4.PAL:
                  subMode = Mode3.ALPHA;
                  break;
                case DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  result.append(
                    /*(char)*/
                    byteCompactionData[i]
                  );
                  break;
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                  subMode = Mode3.ALPHA;
                  break;
              }
            }
            break;
        }
        if (ch !== "") {
          result.append(ch);
        }
        i++;
      }
    };
    DecodedBitStreamParser4.byteCompaction = function(mode, codewords, encoding, codeIndex, result) {
      var decodedBytes = new ByteArrayOutputStream_default();
      var count = 0;
      var value = (
        /*long*/
        0
      );
      var end = false;
      switch (mode) {
        case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
          var byteCompactedCodewords = new Int32Array(6);
          var nextCode = codewords[codeIndex++];
          while (codeIndex < codewords[0] && !end) {
            byteCompactedCodewords[count++] = nextCode;
            value = 900 * value + nextCode;
            nextCode = codewords[codeIndex++];
            switch (nextCode) {
              case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
              case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
              case DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH:
              case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
              case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
              case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
              case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
                codeIndex--;
                end = true;
                break;
              default:
                if (count % 5 === 0 && count > 0) {
                  for (var j = 0; j < 6; ++j) {
                    decodedBytes.write(
                      /*(byte)*/
                      Number(createBigInt(value) >> createBigInt(8 * (5 - j)))
                    );
                  }
                  value = 0;
                  count = 0;
                }
                break;
            }
          }
          if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH) {
            byteCompactedCodewords[count++] = nextCode;
          }
          for (var i = 0; i < count; i++) {
            decodedBytes.write(
              /*(byte)*/
              byteCompactedCodewords[i]
            );
          }
          break;
        case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
          while (codeIndex < codewords[0] && !end) {
            var code = codewords[codeIndex++];
            if (code < DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH) {
              count++;
              value = 900 * value + code;
            } else {
              switch (code) {
                case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
                case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
                case DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH:
                case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
                case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
                  codeIndex--;
                  end = true;
                  break;
              }
            }
            if (count % 5 === 0 && count > 0) {
              for (var j = 0; j < 6; ++j) {
                decodedBytes.write(
                  /*(byte)*/
                  Number(createBigInt(value) >> createBigInt(8 * (5 - j)))
                );
              }
              value = 0;
              count = 0;
            }
          }
          break;
      }
      result.append(StringEncoding_default.decode(decodedBytes.toByteArray(), encoding));
      return codeIndex;
    };
    DecodedBitStreamParser4.numericCompaction = function(codewords, codeIndex, result) {
      var count = 0;
      var end = false;
      var numericCodewords = new Int32Array(DecodedBitStreamParser4.MAX_NUMERIC_CODEWORDS);
      while (codeIndex < codewords[0] && !end) {
        var code = codewords[codeIndex++];
        if (codeIndex === codewords[0]) {
          end = true;
        }
        if (code < DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH) {
          numericCodewords[count] = code;
          count++;
        } else {
          switch (code) {
            case DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH:
            case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH:
            case DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6:
            case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
            case DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
            case DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR:
              codeIndex--;
              end = true;
              break;
          }
        }
        if ((count % DecodedBitStreamParser4.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {
          result.append(DecodedBitStreamParser4.decodeBase900toBase10(numericCodewords, count));
          count = 0;
        }
      }
      return codeIndex;
    };
    DecodedBitStreamParser4.decodeBase900toBase10 = function(codewords, count) {
      var result = createBigInt(0);
      for (var i = 0; i < count; i++) {
        result += DecodedBitStreamParser4.EXP900[count - i - 1] * createBigInt(codewords[i]);
      }
      var resultString = result.toString();
      if (resultString.charAt(0) !== "1") {
        throw new FormatException_default();
      }
      return resultString.substring(1);
    };
    DecodedBitStreamParser4.TEXT_COMPACTION_MODE_LATCH = 900;
    DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH = 901;
    DecodedBitStreamParser4.NUMERIC_COMPACTION_MODE_LATCH = 902;
    DecodedBitStreamParser4.BYTE_COMPACTION_MODE_LATCH_6 = 924;
    DecodedBitStreamParser4.ECI_USER_DEFINED = 925;
    DecodedBitStreamParser4.ECI_GENERAL_PURPOSE = 926;
    DecodedBitStreamParser4.ECI_CHARSET = 927;
    DecodedBitStreamParser4.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;
    DecodedBitStreamParser4.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;
    DecodedBitStreamParser4.MACRO_PDF417_TERMINATOR = 922;
    DecodedBitStreamParser4.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;
    DecodedBitStreamParser4.MAX_NUMERIC_CODEWORDS = 15;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;
    DecodedBitStreamParser4.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;
    DecodedBitStreamParser4.PL = 25;
    DecodedBitStreamParser4.LL = 27;
    DecodedBitStreamParser4.AS = 27;
    DecodedBitStreamParser4.ML = 28;
    DecodedBitStreamParser4.AL = 28;
    DecodedBitStreamParser4.PS = 29;
    DecodedBitStreamParser4.PAL = 29;
    DecodedBitStreamParser4.PUNCT_CHARS = ";<>@[\\]_`~!\r	,:\n-.$/\"|*()?{}'";
    DecodedBitStreamParser4.MIXED_CHARS = "0123456789&\r	,:#-.$/+%*=^";
    DecodedBitStreamParser4.EXP900 = getBigIntConstructor() ? getEXP900() : [];
    DecodedBitStreamParser4.NUMBER_OF_SEQUENCE_CODEWORDS = 2;
    return DecodedBitStreamParser4;
  }()
);
var DecodedBitStreamParser_default3 = DecodedBitStreamParser3;

// node_modules/@zxing/library/esm/core/pdf417/decoder/PDF417ScanningDecoder.js
var __values36 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var PDF417ScanningDecoder = (
  /** @class */
  function() {
    function PDF417ScanningDecoder2() {
    }
    PDF417ScanningDecoder2.decode = function(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight, minCodewordWidth, maxCodewordWidth) {
      var boundingBox = new BoundingBox_default(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight);
      var leftRowIndicatorColumn = null;
      var rightRowIndicatorColumn = null;
      var detectionResult;
      for (var firstPass = true; ; firstPass = false) {
        if (imageTopLeft != null) {
          leftRowIndicatorColumn = PDF417ScanningDecoder2.getRowIndicatorColumn(image, boundingBox, imageTopLeft, true, minCodewordWidth, maxCodewordWidth);
        }
        if (imageTopRight != null) {
          rightRowIndicatorColumn = PDF417ScanningDecoder2.getRowIndicatorColumn(image, boundingBox, imageTopRight, false, minCodewordWidth, maxCodewordWidth);
        }
        detectionResult = PDF417ScanningDecoder2.merge(leftRowIndicatorColumn, rightRowIndicatorColumn);
        if (detectionResult == null) {
          throw NotFoundException_default.getNotFoundInstance();
        }
        var resultBox = detectionResult.getBoundingBox();
        if (firstPass && resultBox != null && (resultBox.getMinY() < boundingBox.getMinY() || resultBox.getMaxY() > boundingBox.getMaxY())) {
          boundingBox = resultBox;
        } else {
          break;
        }
      }
      detectionResult.setBoundingBox(boundingBox);
      var maxBarcodeColumn = detectionResult.getBarcodeColumnCount() + 1;
      detectionResult.setDetectionResultColumn(0, leftRowIndicatorColumn);
      detectionResult.setDetectionResultColumn(maxBarcodeColumn, rightRowIndicatorColumn);
      var leftToRight = leftRowIndicatorColumn != null;
      for (var barcodeColumnCount = 1; barcodeColumnCount <= maxBarcodeColumn; barcodeColumnCount++) {
        var barcodeColumn = leftToRight ? barcodeColumnCount : maxBarcodeColumn - barcodeColumnCount;
        if (detectionResult.getDetectionResultColumn(barcodeColumn) !== /* null */
        void 0) {
          continue;
        }
        var detectionResultColumn = void 0;
        if (barcodeColumn === 0 || barcodeColumn === maxBarcodeColumn) {
          detectionResultColumn = new DetectionResultRowIndicatorColumn_default(boundingBox, barcodeColumn === 0);
        } else {
          detectionResultColumn = new DetectionResultColumn_default(boundingBox);
        }
        detectionResult.setDetectionResultColumn(barcodeColumn, detectionResultColumn);
        var startColumn = -1;
        var previousStartColumn = startColumn;
        for (var imageRow = boundingBox.getMinY(); imageRow <= boundingBox.getMaxY(); imageRow++) {
          startColumn = PDF417ScanningDecoder2.getStartColumn(detectionResult, barcodeColumn, imageRow, leftToRight);
          if (startColumn < 0 || startColumn > boundingBox.getMaxX()) {
            if (previousStartColumn === -1) {
              continue;
            }
            startColumn = previousStartColumn;
          }
          var codeword = PDF417ScanningDecoder2.detectCodeword(image, boundingBox.getMinX(), boundingBox.getMaxX(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);
          if (codeword != null) {
            detectionResultColumn.setCodeword(imageRow, codeword);
            previousStartColumn = startColumn;
            minCodewordWidth = Math.min(minCodewordWidth, codeword.getWidth());
            maxCodewordWidth = Math.max(maxCodewordWidth, codeword.getWidth());
          }
        }
      }
      return PDF417ScanningDecoder2.createDecoderResult(detectionResult);
    };
    PDF417ScanningDecoder2.merge = function(leftRowIndicatorColumn, rightRowIndicatorColumn) {
      if (leftRowIndicatorColumn == null && rightRowIndicatorColumn == null) {
        return null;
      }
      var barcodeMetadata = PDF417ScanningDecoder2.getBarcodeMetadata(leftRowIndicatorColumn, rightRowIndicatorColumn);
      if (barcodeMetadata == null) {
        return null;
      }
      var boundingBox = BoundingBox_default.merge(PDF417ScanningDecoder2.adjustBoundingBox(leftRowIndicatorColumn), PDF417ScanningDecoder2.adjustBoundingBox(rightRowIndicatorColumn));
      return new DetectionResult_default(barcodeMetadata, boundingBox);
    };
    PDF417ScanningDecoder2.adjustBoundingBox = function(rowIndicatorColumn) {
      var e_1, _a2;
      if (rowIndicatorColumn == null) {
        return null;
      }
      var rowHeights = rowIndicatorColumn.getRowHeights();
      if (rowHeights == null) {
        return null;
      }
      var maxRowHeight = PDF417ScanningDecoder2.getMax(rowHeights);
      var missingStartRows = 0;
      try {
        for (var rowHeights_1 = __values36(rowHeights), rowHeights_1_1 = rowHeights_1.next(); !rowHeights_1_1.done; rowHeights_1_1 = rowHeights_1.next()) {
          var rowHeight = rowHeights_1_1.value;
          missingStartRows += maxRowHeight - rowHeight;
          if (rowHeight > 0) {
            break;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (rowHeights_1_1 && !rowHeights_1_1.done && (_a2 = rowHeights_1.return)) _a2.call(rowHeights_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var codewords = rowIndicatorColumn.getCodewords();
      for (var row = 0; missingStartRows > 0 && codewords[row] == null; row++) {
        missingStartRows--;
      }
      var missingEndRows = 0;
      for (var row = rowHeights.length - 1; row >= 0; row--) {
        missingEndRows += maxRowHeight - rowHeights[row];
        if (rowHeights[row] > 0) {
          break;
        }
      }
      for (var row = codewords.length - 1; missingEndRows > 0 && codewords[row] == null; row--) {
        missingEndRows--;
      }
      return rowIndicatorColumn.getBoundingBox().addMissingRows(missingStartRows, missingEndRows, rowIndicatorColumn.isLeft());
    };
    PDF417ScanningDecoder2.getMax = function(values) {
      var e_2, _a2;
      var maxValue = -1;
      try {
        for (var values_1 = __values36(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
          var value = values_1_1.value;
          maxValue = Math.max(maxValue, value);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (values_1_1 && !values_1_1.done && (_a2 = values_1.return)) _a2.call(values_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return maxValue;
    };
    PDF417ScanningDecoder2.getBarcodeMetadata = function(leftRowIndicatorColumn, rightRowIndicatorColumn) {
      var leftBarcodeMetadata;
      if (leftRowIndicatorColumn == null || (leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata()) == null) {
        return rightRowIndicatorColumn == null ? null : rightRowIndicatorColumn.getBarcodeMetadata();
      }
      var rightBarcodeMetadata;
      if (rightRowIndicatorColumn == null || (rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata()) == null) {
        return leftBarcodeMetadata;
      }
      if (leftBarcodeMetadata.getColumnCount() !== rightBarcodeMetadata.getColumnCount() && leftBarcodeMetadata.getErrorCorrectionLevel() !== rightBarcodeMetadata.getErrorCorrectionLevel() && leftBarcodeMetadata.getRowCount() !== rightBarcodeMetadata.getRowCount()) {
        return null;
      }
      return leftBarcodeMetadata;
    };
    PDF417ScanningDecoder2.getRowIndicatorColumn = function(image, boundingBox, startPoint, leftToRight, minCodewordWidth, maxCodewordWidth) {
      var rowIndicatorColumn = new DetectionResultRowIndicatorColumn_default(boundingBox, leftToRight);
      for (var i = 0; i < 2; i++) {
        var increment = i === 0 ? 1 : -1;
        var startColumn = Math.trunc(Math.trunc(startPoint.getX()));
        for (var imageRow = Math.trunc(Math.trunc(startPoint.getY())); imageRow <= boundingBox.getMaxY() && imageRow >= boundingBox.getMinY(); imageRow += increment) {
          var codeword = PDF417ScanningDecoder2.detectCodeword(image, 0, image.getWidth(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);
          if (codeword != null) {
            rowIndicatorColumn.setCodeword(imageRow, codeword);
            if (leftToRight) {
              startColumn = codeword.getStartX();
            } else {
              startColumn = codeword.getEndX();
            }
          }
        }
      }
      return rowIndicatorColumn;
    };
    PDF417ScanningDecoder2.adjustCodewordCount = function(detectionResult, barcodeMatrix) {
      var barcodeMatrix01 = barcodeMatrix[0][1];
      var numberOfCodewords = barcodeMatrix01.getValue();
      var calculatedNumberOfCodewords = detectionResult.getBarcodeColumnCount() * detectionResult.getBarcodeRowCount() - PDF417ScanningDecoder2.getNumberOfECCodeWords(detectionResult.getBarcodeECLevel());
      if (numberOfCodewords.length === 0) {
        if (calculatedNumberOfCodewords < 1 || calculatedNumberOfCodewords > PDF417Common_default.MAX_CODEWORDS_IN_BARCODE) {
          throw NotFoundException_default.getNotFoundInstance();
        }
        barcodeMatrix01.setValue(calculatedNumberOfCodewords);
      } else if (numberOfCodewords[0] !== calculatedNumberOfCodewords) {
        barcodeMatrix01.setValue(calculatedNumberOfCodewords);
      }
    };
    PDF417ScanningDecoder2.createDecoderResult = function(detectionResult) {
      var barcodeMatrix = PDF417ScanningDecoder2.createBarcodeMatrix(detectionResult);
      PDF417ScanningDecoder2.adjustCodewordCount(detectionResult, barcodeMatrix);
      var erasures = new Array();
      var codewords = new Int32Array(detectionResult.getBarcodeRowCount() * detectionResult.getBarcodeColumnCount());
      var ambiguousIndexValuesList = (
        /*List<int[]>*/
        []
      );
      var ambiguousIndexesList = (
        /*Collection<Integer>*/
        new Array()
      );
      for (var row = 0; row < detectionResult.getBarcodeRowCount(); row++) {
        for (var column = 0; column < detectionResult.getBarcodeColumnCount(); column++) {
          var values = barcodeMatrix[row][column + 1].getValue();
          var codewordIndex = row * detectionResult.getBarcodeColumnCount() + column;
          if (values.length === 0) {
            erasures.push(codewordIndex);
          } else if (values.length === 1) {
            codewords[codewordIndex] = values[0];
          } else {
            ambiguousIndexesList.push(codewordIndex);
            ambiguousIndexValuesList.push(values);
          }
        }
      }
      var ambiguousIndexValues = new Array(ambiguousIndexValuesList.length);
      for (var i = 0; i < ambiguousIndexValues.length; i++) {
        ambiguousIndexValues[i] = ambiguousIndexValuesList[i];
      }
      return PDF417ScanningDecoder2.createDecoderResultFromAmbiguousValues(detectionResult.getBarcodeECLevel(), codewords, PDF417Common_default.toIntArray(erasures), PDF417Common_default.toIntArray(ambiguousIndexesList), ambiguousIndexValues);
    };
    PDF417ScanningDecoder2.createDecoderResultFromAmbiguousValues = function(ecLevel, codewords, erasureArray, ambiguousIndexes, ambiguousIndexValues) {
      var ambiguousIndexCount = new Int32Array(ambiguousIndexes.length);
      var tries = 100;
      while (tries-- > 0) {
        for (var i = 0; i < ambiguousIndexCount.length; i++) {
          codewords[ambiguousIndexes[i]] = ambiguousIndexValues[i][ambiguousIndexCount[i]];
        }
        try {
          return PDF417ScanningDecoder2.decodeCodewords(codewords, ecLevel, erasureArray);
        } catch (err) {
          var ignored = err instanceof ChecksumException_default;
          if (!ignored) {
            throw err;
          }
        }
        if (ambiguousIndexCount.length === 0) {
          throw ChecksumException_default.getChecksumInstance();
        }
        for (var i = 0; i < ambiguousIndexCount.length; i++) {
          if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {
            ambiguousIndexCount[i]++;
            break;
          } else {
            ambiguousIndexCount[i] = 0;
            if (i === ambiguousIndexCount.length - 1) {
              throw ChecksumException_default.getChecksumInstance();
            }
          }
        }
      }
      throw ChecksumException_default.getChecksumInstance();
    };
    PDF417ScanningDecoder2.createBarcodeMatrix = function(detectionResult) {
      var e_3, _a2, e_4, _b;
      var barcodeMatrix = Array.from({ length: detectionResult.getBarcodeRowCount() }, function() {
        return new Array(detectionResult.getBarcodeColumnCount() + 2);
      });
      for (var row = 0; row < barcodeMatrix.length; row++) {
        for (var column_1 = 0; column_1 < barcodeMatrix[row].length; column_1++) {
          barcodeMatrix[row][column_1] = new BarcodeValue_default();
        }
      }
      var column = 0;
      try {
        for (var _c = __values36(detectionResult.getDetectionResultColumns()), _d = _c.next(); !_d.done; _d = _c.next()) {
          var detectionResultColumn = _d.value;
          if (detectionResultColumn != null) {
            try {
              for (var _e = (e_4 = void 0, __values36(detectionResultColumn.getCodewords())), _f = _e.next(); !_f.done; _f = _e.next()) {
                var codeword = _f.value;
                if (codeword != null) {
                  var rowNumber = codeword.getRowNumber();
                  if (rowNumber >= 0) {
                    if (rowNumber >= barcodeMatrix.length) {
                      continue;
                    }
                    barcodeMatrix[rowNumber][column].setValue(codeword.getValue());
                  }
                }
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
              } finally {
                if (e_4) throw e_4.error;
              }
            }
          }
          column++;
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return)) _a2.call(_c);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return barcodeMatrix;
    };
    PDF417ScanningDecoder2.isValidBarcodeColumn = function(detectionResult, barcodeColumn) {
      return barcodeColumn >= 0 && barcodeColumn <= detectionResult.getBarcodeColumnCount() + 1;
    };
    PDF417ScanningDecoder2.getStartColumn = function(detectionResult, barcodeColumn, imageRow, leftToRight) {
      var e_5, _a2;
      var offset = leftToRight ? 1 : -1;
      var codeword = null;
      if (PDF417ScanningDecoder2.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {
        codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodeword(imageRow);
      }
      if (codeword != null) {
        return leftToRight ? codeword.getEndX() : codeword.getStartX();
      }
      codeword = detectionResult.getDetectionResultColumn(barcodeColumn).getCodewordNearby(imageRow);
      if (codeword != null) {
        return leftToRight ? codeword.getStartX() : codeword.getEndX();
      }
      if (PDF417ScanningDecoder2.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {
        codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodewordNearby(imageRow);
      }
      if (codeword != null) {
        return leftToRight ? codeword.getEndX() : codeword.getStartX();
      }
      var skippedColumns = 0;
      while (PDF417ScanningDecoder2.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {
        barcodeColumn -= offset;
        try {
          for (var _b = (e_5 = void 0, __values36(detectionResult.getDetectionResultColumn(barcodeColumn).getCodewords())), _c = _b.next(); !_c.done; _c = _b.next()) {
            var previousRowCodeword = _c.value;
            if (previousRowCodeword != null) {
              return (leftToRight ? previousRowCodeword.getEndX() : previousRowCodeword.getStartX()) + offset * skippedColumns * (previousRowCodeword.getEndX() - previousRowCodeword.getStartX());
            }
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
        skippedColumns++;
      }
      return leftToRight ? detectionResult.getBoundingBox().getMinX() : detectionResult.getBoundingBox().getMaxX();
    };
    PDF417ScanningDecoder2.detectCodeword = function(image, minColumn, maxColumn, leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth) {
      startColumn = PDF417ScanningDecoder2.adjustCodewordStartColumn(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);
      var moduleBitCount = PDF417ScanningDecoder2.getModuleBitCount(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);
      if (moduleBitCount == null) {
        return null;
      }
      var endColumn;
      var codewordBitCount = MathUtils_default.sum(moduleBitCount);
      if (leftToRight) {
        endColumn = startColumn + codewordBitCount;
      } else {
        for (var i = 0; i < moduleBitCount.length / 2; i++) {
          var tmpCount = moduleBitCount[i];
          moduleBitCount[i] = moduleBitCount[moduleBitCount.length - 1 - i];
          moduleBitCount[moduleBitCount.length - 1 - i] = tmpCount;
        }
        endColumn = startColumn;
        startColumn = endColumn - codewordBitCount;
      }
      if (!PDF417ScanningDecoder2.checkCodewordSkew(codewordBitCount, minCodewordWidth, maxCodewordWidth)) {
        return null;
      }
      var decodedValue = PDF417CodewordDecoder_default.getDecodedValue(moduleBitCount);
      var codeword = PDF417Common_default.getCodeword(decodedValue);
      if (codeword === -1) {
        return null;
      }
      return new Codeword_default(startColumn, endColumn, PDF417ScanningDecoder2.getCodewordBucketNumber(decodedValue), codeword);
    };
    PDF417ScanningDecoder2.getModuleBitCount = function(image, minColumn, maxColumn, leftToRight, startColumn, imageRow) {
      var imageColumn = startColumn;
      var moduleBitCount = new Int32Array(8);
      var moduleNumber = 0;
      var increment = leftToRight ? 1 : -1;
      var previousPixelValue = leftToRight;
      while ((leftToRight ? imageColumn < maxColumn : imageColumn >= minColumn) && moduleNumber < moduleBitCount.length) {
        if (image.get(imageColumn, imageRow) === previousPixelValue) {
          moduleBitCount[moduleNumber]++;
          imageColumn += increment;
        } else {
          moduleNumber++;
          previousPixelValue = !previousPixelValue;
        }
      }
      if (moduleNumber === moduleBitCount.length || imageColumn === (leftToRight ? maxColumn : minColumn) && moduleNumber === moduleBitCount.length - 1) {
        return moduleBitCount;
      }
      return null;
    };
    PDF417ScanningDecoder2.getNumberOfECCodeWords = function(barcodeECLevel) {
      return 2 << barcodeECLevel;
    };
    PDF417ScanningDecoder2.adjustCodewordStartColumn = function(image, minColumn, maxColumn, leftToRight, codewordStartColumn, imageRow) {
      var correctedStartColumn = codewordStartColumn;
      var increment = leftToRight ? -1 : 1;
      for (var i = 0; i < 2; i++) {
        while ((leftToRight ? correctedStartColumn >= minColumn : correctedStartColumn < maxColumn) && leftToRight === image.get(correctedStartColumn, imageRow)) {
          if (Math.abs(codewordStartColumn - correctedStartColumn) > PDF417ScanningDecoder2.CODEWORD_SKEW_SIZE) {
            return codewordStartColumn;
          }
          correctedStartColumn += increment;
        }
        increment = -increment;
        leftToRight = !leftToRight;
      }
      return correctedStartColumn;
    };
    PDF417ScanningDecoder2.checkCodewordSkew = function(codewordSize, minCodewordWidth, maxCodewordWidth) {
      return minCodewordWidth - PDF417ScanningDecoder2.CODEWORD_SKEW_SIZE <= codewordSize && codewordSize <= maxCodewordWidth + PDF417ScanningDecoder2.CODEWORD_SKEW_SIZE;
    };
    PDF417ScanningDecoder2.decodeCodewords = function(codewords, ecLevel, erasures) {
      if (codewords.length === 0) {
        throw FormatException_default.getFormatInstance();
      }
      var numECCodewords = 1 << ecLevel + 1;
      var correctedErrorsCount = PDF417ScanningDecoder2.correctErrors(codewords, erasures, numECCodewords);
      PDF417ScanningDecoder2.verifyCodewordCount(codewords, numECCodewords);
      var decoderResult = DecodedBitStreamParser_default3.decode(codewords, "" + ecLevel);
      decoderResult.setErrorsCorrected(correctedErrorsCount);
      decoderResult.setErasures(erasures.length);
      return decoderResult;
    };
    PDF417ScanningDecoder2.correctErrors = function(codewords, erasures, numECCodewords) {
      if (erasures != null && erasures.length > numECCodewords / 2 + PDF417ScanningDecoder2.MAX_ERRORS || numECCodewords < 0 || numECCodewords > PDF417ScanningDecoder2.MAX_EC_CODEWORDS) {
        throw ChecksumException_default.getChecksumInstance();
      }
      return PDF417ScanningDecoder2.errorCorrection.decode(codewords, numECCodewords, erasures);
    };
    PDF417ScanningDecoder2.verifyCodewordCount = function(codewords, numECCodewords) {
      if (codewords.length < 4) {
        throw FormatException_default.getFormatInstance();
      }
      var numberOfCodewords = codewords[0];
      if (numberOfCodewords > codewords.length) {
        throw FormatException_default.getFormatInstance();
      }
      if (numberOfCodewords === 0) {
        if (numECCodewords < codewords.length) {
          codewords[0] = codewords.length - numECCodewords;
        } else {
          throw FormatException_default.getFormatInstance();
        }
      }
    };
    PDF417ScanningDecoder2.getBitCountForCodeword = function(codeword) {
      var result = new Int32Array(8);
      var previousValue = 0;
      var i = result.length - 1;
      while (true) {
        if ((codeword & 1) !== previousValue) {
          previousValue = codeword & 1;
          i--;
          if (i < 0) {
            break;
          }
        }
        result[i]++;
        codeword >>= 1;
      }
      return result;
    };
    PDF417ScanningDecoder2.getCodewordBucketNumber = function(codeword) {
      if (codeword instanceof Int32Array) {
        return this.getCodewordBucketNumber_Int32Array(codeword);
      }
      return this.getCodewordBucketNumber_number(codeword);
    };
    PDF417ScanningDecoder2.getCodewordBucketNumber_number = function(codeword) {
      return PDF417ScanningDecoder2.getCodewordBucketNumber(PDF417ScanningDecoder2.getBitCountForCodeword(codeword));
    };
    PDF417ScanningDecoder2.getCodewordBucketNumber_Int32Array = function(moduleBitCount) {
      return (moduleBitCount[0] - moduleBitCount[2] + moduleBitCount[4] - moduleBitCount[6] + 9) % 9;
    };
    PDF417ScanningDecoder2.toString = function(barcodeMatrix) {
      var formatter = new Formatter_default();
      for (var row = 0; row < barcodeMatrix.length; row++) {
        formatter.format("Row %2d: ", row);
        for (var column = 0; column < barcodeMatrix[row].length; column++) {
          var barcodeValue = barcodeMatrix[row][column];
          if (barcodeValue.getValue().length === 0) {
            formatter.format("        ", null);
          } else {
            formatter.format("%4d(%2d)", barcodeValue.getValue()[0], barcodeValue.getConfidence(barcodeValue.getValue()[0]));
          }
        }
        formatter.format("%n");
      }
      return formatter.toString();
    };
    PDF417ScanningDecoder2.CODEWORD_SKEW_SIZE = 2;
    PDF417ScanningDecoder2.MAX_ERRORS = 3;
    PDF417ScanningDecoder2.MAX_EC_CODEWORDS = 512;
    PDF417ScanningDecoder2.errorCorrection = new ErrorCorrection_default();
    return PDF417ScanningDecoder2;
  }()
);
var PDF417ScanningDecoder_default = PDF417ScanningDecoder;

// node_modules/@zxing/library/esm/core/pdf417/PDF417Reader.js
var __values37 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var PDF417Reader = (
  /** @class */
  function() {
    function PDF417Reader2() {
    }
    PDF417Reader2.prototype.decode = function(image, hints) {
      if (hints === void 0) {
        hints = null;
      }
      var result = PDF417Reader2.decode(image, hints, false);
      if (result == null || result.length === 0 || result[0] == null) {
        throw NotFoundException_default.getNotFoundInstance();
      }
      return result[0];
    };
    PDF417Reader2.prototype.decodeMultiple = function(image, hints) {
      if (hints === void 0) {
        hints = null;
      }
      try {
        return PDF417Reader2.decode(image, hints, true);
      } catch (ignored) {
        if (ignored instanceof FormatException_default || ignored instanceof ChecksumException_default) {
          throw NotFoundException_default.getNotFoundInstance();
        }
        throw ignored;
      }
    };
    PDF417Reader2.decode = function(image, hints, multiple) {
      var e_1, _a2;
      var results = new Array();
      var detectorResult = Detector_default4.detectMultiple(image, hints, multiple);
      try {
        for (var _b = __values37(detectorResult.getPoints()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var points = _c.value;
          var decoderResult = PDF417ScanningDecoder_default.decode(detectorResult.getBits(), points[4], points[5], points[6], points[7], PDF417Reader2.getMinCodewordWidth(points), PDF417Reader2.getMaxCodewordWidth(points));
          var result = new Result_default(decoderResult.getText(), decoderResult.getRawBytes(), void 0, points, BarcodeFormat_default.PDF_417);
          result.putMetadata(ResultMetadataType_default.ERROR_CORRECTION_LEVEL, decoderResult.getECLevel());
          var pdf417ResultMetadata = decoderResult.getOther();
          if (pdf417ResultMetadata != null) {
            result.putMetadata(ResultMetadataType_default.PDF417_EXTRA_METADATA, pdf417ResultMetadata);
          }
          results.push(result);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return results.map(function(x) {
        return x;
      });
    };
    PDF417Reader2.getMaxWidth = function(p1, p2) {
      if (p1 == null || p2 == null) {
        return 0;
      }
      return Math.trunc(Math.abs(p1.getX() - p2.getX()));
    };
    PDF417Reader2.getMinWidth = function(p1, p2) {
      if (p1 == null || p2 == null) {
        return Integer_default.MAX_VALUE;
      }
      return Math.trunc(Math.abs(p1.getX() - p2.getX()));
    };
    PDF417Reader2.getMaxCodewordWidth = function(p) {
      return Math.floor(Math.max(Math.max(PDF417Reader2.getMaxWidth(p[0], p[4]), PDF417Reader2.getMaxWidth(p[6], p[2]) * PDF417Common_default.MODULES_IN_CODEWORD / PDF417Common_default.MODULES_IN_STOP_PATTERN), Math.max(PDF417Reader2.getMaxWidth(p[1], p[5]), PDF417Reader2.getMaxWidth(p[7], p[3]) * PDF417Common_default.MODULES_IN_CODEWORD / PDF417Common_default.MODULES_IN_STOP_PATTERN)));
    };
    PDF417Reader2.getMinCodewordWidth = function(p) {
      return Math.floor(Math.min(Math.min(PDF417Reader2.getMinWidth(p[0], p[4]), PDF417Reader2.getMinWidth(p[6], p[2]) * PDF417Common_default.MODULES_IN_CODEWORD / PDF417Common_default.MODULES_IN_STOP_PATTERN), Math.min(PDF417Reader2.getMinWidth(p[1], p[5]), PDF417Reader2.getMinWidth(p[7], p[3]) * PDF417Common_default.MODULES_IN_CODEWORD / PDF417Common_default.MODULES_IN_STOP_PATTERN)));
    };
    PDF417Reader2.prototype.reset = function() {
    };
    return PDF417Reader2;
  }()
);
var PDF417Reader_default = PDF417Reader;

// node_modules/@zxing/library/esm/core/ReaderException.js
var __extends61 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ReaderException = (
  /** @class */
  function(_super) {
    __extends61(ReaderException2, _super);
    function ReaderException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ReaderException2.kind = "ReaderException";
    return ReaderException2;
  }(Exception_default)
);
var ReaderException_default = ReaderException;

// node_modules/@zxing/library/esm/core/MultiFormatReader.js
var __values38 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MultiFormatReader = (
  /** @class */
  function() {
    function MultiFormatReader2() {
    }
    MultiFormatReader2.prototype.decode = function(image, hints) {
      this.setHints(hints);
      return this.decodeInternal(image);
    };
    MultiFormatReader2.prototype.decodeWithState = function(image) {
      if (this.readers === null || this.readers === void 0) {
        this.setHints(null);
      }
      return this.decodeInternal(image);
    };
    MultiFormatReader2.prototype.setHints = function(hints) {
      this.hints = hints;
      var tryHarder = hints !== null && hints !== void 0 && void 0 !== hints.get(DecodeHintType_default.TRY_HARDER);
      var formats = hints === null || hints === void 0 ? null : hints.get(DecodeHintType_default.POSSIBLE_FORMATS);
      var readers = new Array();
      if (formats !== null && formats !== void 0) {
        var addOneDReader = formats.some(function(f) {
          return f === BarcodeFormat_default.UPC_A || f === BarcodeFormat_default.UPC_E || f === BarcodeFormat_default.EAN_13 || f === BarcodeFormat_default.EAN_8 || f === BarcodeFormat_default.CODABAR || f === BarcodeFormat_default.CODE_39 || f === BarcodeFormat_default.CODE_93 || f === BarcodeFormat_default.CODE_128 || f === BarcodeFormat_default.ITF || f === BarcodeFormat_default.RSS_14 || f === BarcodeFormat_default.RSS_EXPANDED;
        });
        if (addOneDReader && !tryHarder) {
          readers.push(new MultiFormatOneDReader_default(hints));
        }
        if (formats.includes(BarcodeFormat_default.QR_CODE)) {
          readers.push(new QRCodeReader_default());
        }
        if (formats.includes(BarcodeFormat_default.DATA_MATRIX)) {
          readers.push(new DataMatrixReader_default());
        }
        if (formats.includes(BarcodeFormat_default.AZTEC)) {
          readers.push(new AztecReader_default());
        }
        if (formats.includes(BarcodeFormat_default.PDF_417)) {
          readers.push(new PDF417Reader_default());
        }
        if (addOneDReader && tryHarder) {
          readers.push(new MultiFormatOneDReader_default(hints));
        }
      }
      if (readers.length === 0) {
        if (!tryHarder) {
          readers.push(new MultiFormatOneDReader_default(hints));
        }
        readers.push(new QRCodeReader_default());
        readers.push(new DataMatrixReader_default());
        readers.push(new AztecReader_default());
        readers.push(new PDF417Reader_default());
        if (tryHarder) {
          readers.push(new MultiFormatOneDReader_default(hints));
        }
      }
      this.readers = readers;
    };
    MultiFormatReader2.prototype.reset = function() {
      var e_1, _a2;
      if (this.readers !== null) {
        try {
          for (var _b = __values38(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var reader = _c.value;
            reader.reset();
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
    };
    MultiFormatReader2.prototype.decodeInternal = function(image) {
      var e_2, _a2;
      if (this.readers === null) {
        throw new ReaderException_default("No readers where selected, nothing can be read.");
      }
      try {
        for (var _b = __values38(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {
          var reader = _c.value;
          try {
            return reader.decode(image, this.hints);
          } catch (ex) {
            if (ex instanceof ReaderException_default) {
              continue;
            }
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      throw new NotFoundException_default("No MultiFormat Readers were able to detect the code.");
    };
    return MultiFormatReader2;
  }()
);
var MultiFormatReader_default = MultiFormatReader;

// node_modules/@zxing/library/esm/browser/BrowserMultiFormatReader.js
var __extends62 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserMultiFormatReader = (
  /** @class */
  function(_super) {
    __extends62(BrowserMultiFormatReader3, _super);
    function BrowserMultiFormatReader3(hints, timeBetweenScansMillis) {
      if (hints === void 0) {
        hints = null;
      }
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      var _this = this;
      var reader = new MultiFormatReader_default();
      reader.setHints(hints);
      _this = _super.call(this, reader, timeBetweenScansMillis) || this;
      return _this;
    }
    BrowserMultiFormatReader3.prototype.decodeBitmap = function(binaryBitmap) {
      return this.reader.decodeWithState(binaryBitmap);
    };
    return BrowserMultiFormatReader3;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/browser/BrowserPDF417Reader.js
var __extends63 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserPDF417Reader = (
  /** @class */
  function(_super) {
    __extends63(BrowserPDF417Reader3, _super);
    function BrowserPDF417Reader3(timeBetweenScansMillis) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      return _super.call(this, new PDF417Reader_default(), timeBetweenScansMillis) || this;
    }
    return BrowserPDF417Reader3;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/browser/BrowserQRCodeReader.js
var __extends64 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserQRCodeReader = (
  /** @class */
  function(_super) {
    __extends64(BrowserQRCodeReader3, _super);
    function BrowserQRCodeReader3(timeBetweenScansMillis) {
      if (timeBetweenScansMillis === void 0) {
        timeBetweenScansMillis = 500;
      }
      return _super.call(this, new QRCodeReader_default(), timeBetweenScansMillis) || this;
    }
    return BrowserQRCodeReader3;
  }(BrowserCodeReader)
);

// node_modules/@zxing/library/esm/core/EncodeHintType.js
var EncodeHintType;
(function(EncodeHintType2) {
  EncodeHintType2[EncodeHintType2["ERROR_CORRECTION"] = 0] = "ERROR_CORRECTION";
  EncodeHintType2[EncodeHintType2["CHARACTER_SET"] = 1] = "CHARACTER_SET";
  EncodeHintType2[EncodeHintType2["DATA_MATRIX_SHAPE"] = 2] = "DATA_MATRIX_SHAPE";
  EncodeHintType2[EncodeHintType2["DATA_MATRIX_COMPACT"] = 3] = "DATA_MATRIX_COMPACT";
  EncodeHintType2[EncodeHintType2["MIN_SIZE"] = 4] = "MIN_SIZE";
  EncodeHintType2[EncodeHintType2["MAX_SIZE"] = 5] = "MAX_SIZE";
  EncodeHintType2[EncodeHintType2["MARGIN"] = 6] = "MARGIN";
  EncodeHintType2[EncodeHintType2["PDF417_COMPACT"] = 7] = "PDF417_COMPACT";
  EncodeHintType2[EncodeHintType2["PDF417_COMPACTION"] = 8] = "PDF417_COMPACTION";
  EncodeHintType2[EncodeHintType2["PDF417_DIMENSIONS"] = 9] = "PDF417_DIMENSIONS";
  EncodeHintType2[EncodeHintType2["AZTEC_LAYERS"] = 10] = "AZTEC_LAYERS";
  EncodeHintType2[EncodeHintType2["QR_VERSION"] = 11] = "QR_VERSION";
  EncodeHintType2[EncodeHintType2["GS1_FORMAT"] = 12] = "GS1_FORMAT";
  EncodeHintType2[EncodeHintType2["FORCE_C40"] = 13] = "FORCE_C40";
})(EncodeHintType || (EncodeHintType = {}));
var EncodeHintType_default = EncodeHintType;

// node_modules/@zxing/library/esm/core/common/reedsolomon/ReedSolomonEncoder.js
var ReedSolomonEncoder = (
  /** @class */
  function() {
    function ReedSolomonEncoder2(field) {
      this.field = field;
      this.cachedGenerators = [];
      this.cachedGenerators.push(new GenericGFPoly_default(field, Int32Array.from([1])));
    }
    ReedSolomonEncoder2.prototype.buildGenerator = function(degree) {
      var cachedGenerators = this.cachedGenerators;
      if (degree >= cachedGenerators.length) {
        var lastGenerator = cachedGenerators[cachedGenerators.length - 1];
        var field = this.field;
        for (var d = cachedGenerators.length; d <= degree; d++) {
          var nextGenerator = lastGenerator.multiply(new GenericGFPoly_default(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));
          cachedGenerators.push(nextGenerator);
          lastGenerator = nextGenerator;
        }
      }
      return cachedGenerators[degree];
    };
    ReedSolomonEncoder2.prototype.encode = function(toEncode, ecBytes) {
      if (ecBytes === 0) {
        throw new IllegalArgumentException_default("No error correction bytes");
      }
      var dataBytes = toEncode.length - ecBytes;
      if (dataBytes <= 0) {
        throw new IllegalArgumentException_default("No data bytes provided");
      }
      var generator = this.buildGenerator(ecBytes);
      var infoCoefficients = new Int32Array(dataBytes);
      System_default.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);
      var info = new GenericGFPoly_default(this.field, infoCoefficients);
      info = info.multiplyByMonomial(ecBytes, 1);
      var remainder = info.divide(generator)[1];
      var coefficients = remainder.getCoefficients();
      var numZeroCoefficients = ecBytes - coefficients.length;
      for (var i = 0; i < numZeroCoefficients; i++) {
        toEncode[dataBytes + i] = 0;
      }
      System_default.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);
    };
    return ReedSolomonEncoder2;
  }()
);
var ReedSolomonEncoder_default = ReedSolomonEncoder;

// node_modules/@zxing/library/esm/core/qrcode/encoder/MaskUtil.js
var MaskUtil = (
  /** @class */
  function() {
    function MaskUtil2() {
    }
    MaskUtil2.applyMaskPenaltyRule1 = function(matrix) {
      return MaskUtil2.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil2.applyMaskPenaltyRule1Internal(matrix, false);
    };
    MaskUtil2.applyMaskPenaltyRule2 = function(matrix) {
      var penalty = 0;
      var array = matrix.getArray();
      var width = matrix.getWidth();
      var height = matrix.getHeight();
      for (var y = 0; y < height - 1; y++) {
        var arrayY = array[y];
        for (var x = 0; x < width - 1; x++) {
          var value = arrayY[x];
          if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {
            penalty++;
          }
        }
      }
      return MaskUtil2.N2 * penalty;
    };
    MaskUtil2.applyMaskPenaltyRule3 = function(matrix) {
      var numPenalties = 0;
      var array = matrix.getArray();
      var width = matrix.getWidth();
      var height = matrix.getHeight();
      for (var y = 0; y < height; y++) {
        for (var x = 0; x < width; x++) {
          var arrayY = array[y];
          if (x + 6 < width && arrayY[x] === 1 && arrayY[x + 1] === 0 && arrayY[x + 2] === 1 && arrayY[x + 3] === 1 && arrayY[x + 4] === 1 && arrayY[x + 5] === 0 && arrayY[x + 6] === 1 && (MaskUtil2.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil2.isWhiteHorizontal(arrayY, x + 7, x + 11))) {
            numPenalties++;
          }
          if (y + 6 < height && array[y][x] === 1 && array[y + 1][x] === 0 && array[y + 2][x] === 1 && array[y + 3][x] === 1 && array[y + 4][x] === 1 && array[y + 5][x] === 0 && array[y + 6][x] === 1 && (MaskUtil2.isWhiteVertical(array, x, y - 4, y) || MaskUtil2.isWhiteVertical(array, x, y + 7, y + 11))) {
            numPenalties++;
          }
        }
      }
      return numPenalties * MaskUtil2.N3;
    };
    MaskUtil2.isWhiteHorizontal = function(rowArray, from, to) {
      from = Math.max(from, 0);
      to = Math.min(to, rowArray.length);
      for (var i = from; i < to; i++) {
        if (rowArray[i] === 1) {
          return false;
        }
      }
      return true;
    };
    MaskUtil2.isWhiteVertical = function(array, col, from, to) {
      from = Math.max(from, 0);
      to = Math.min(to, array.length);
      for (var i = from; i < to; i++) {
        if (array[i][col] === 1) {
          return false;
        }
      }
      return true;
    };
    MaskUtil2.applyMaskPenaltyRule4 = function(matrix) {
      var numDarkCells = 0;
      var array = matrix.getArray();
      var width = matrix.getWidth();
      var height = matrix.getHeight();
      for (var y = 0; y < height; y++) {
        var arrayY = array[y];
        for (var x = 0; x < width; x++) {
          if (arrayY[x] === 1) {
            numDarkCells++;
          }
        }
      }
      var numTotalCells = matrix.getHeight() * matrix.getWidth();
      var fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);
      return fivePercentVariances * MaskUtil2.N4;
    };
    MaskUtil2.getDataMaskBit = function(maskPattern, x, y) {
      var intermediate;
      var temp;
      switch (maskPattern) {
        case 0:
          intermediate = y + x & 1;
          break;
        case 1:
          intermediate = y & 1;
          break;
        case 2:
          intermediate = x % 3;
          break;
        case 3:
          intermediate = (y + x) % 3;
          break;
        case 4:
          intermediate = Math.floor(y / 2) + Math.floor(x / 3) & 1;
          break;
        case 5:
          temp = y * x;
          intermediate = (temp & 1) + temp % 3;
          break;
        case 6:
          temp = y * x;
          intermediate = (temp & 1) + temp % 3 & 1;
          break;
        case 7:
          temp = y * x;
          intermediate = temp % 3 + (y + x & 1) & 1;
          break;
        default:
          throw new IllegalArgumentException_default("Invalid mask pattern: " + maskPattern);
      }
      return intermediate === 0;
    };
    MaskUtil2.applyMaskPenaltyRule1Internal = function(matrix, isHorizontal) {
      var penalty = 0;
      var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();
      var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();
      var array = matrix.getArray();
      for (var i = 0; i < iLimit; i++) {
        var numSameBitCells = 0;
        var prevBit = -1;
        for (var j = 0; j < jLimit; j++) {
          var bit = isHorizontal ? array[i][j] : array[j][i];
          if (bit === prevBit) {
            numSameBitCells++;
          } else {
            if (numSameBitCells >= 5) {
              penalty += MaskUtil2.N1 + (numSameBitCells - 5);
            }
            numSameBitCells = 1;
            prevBit = bit;
          }
        }
        if (numSameBitCells >= 5) {
          penalty += MaskUtil2.N1 + (numSameBitCells - 5);
        }
      }
      return penalty;
    };
    MaskUtil2.N1 = 3;
    MaskUtil2.N2 = 3;
    MaskUtil2.N3 = 40;
    MaskUtil2.N4 = 10;
    return MaskUtil2;
  }()
);
var MaskUtil_default = MaskUtil;

// node_modules/@zxing/library/esm/core/qrcode/encoder/ByteMatrix.js
var __values39 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ByteMatrix = (
  /** @class */
  function() {
    function ByteMatrix2(width, height) {
      this.width = width;
      this.height = height;
      var bytes = new Array(height);
      for (var i = 0; i !== height; i++) {
        bytes[i] = new Uint8Array(width);
      }
      this.bytes = bytes;
    }
    ByteMatrix2.prototype.getHeight = function() {
      return this.height;
    };
    ByteMatrix2.prototype.getWidth = function() {
      return this.width;
    };
    ByteMatrix2.prototype.get = function(x, y) {
      return this.bytes[y][x];
    };
    ByteMatrix2.prototype.getArray = function() {
      return this.bytes;
    };
    ByteMatrix2.prototype.setNumber = function(x, y, value) {
      this.bytes[y][x] = value;
    };
    ByteMatrix2.prototype.setBoolean = function(x, y, value) {
      this.bytes[y][x] = /*(byte) */
      value ? 1 : 0;
    };
    ByteMatrix2.prototype.clear = function(value) {
      var e_1, _a2;
      try {
        for (var _b = __values39(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {
          var aByte = _c.value;
          Arrays_default.fill(aByte, value);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    ByteMatrix2.prototype.equals = function(o) {
      if (!(o instanceof ByteMatrix2)) {
        return false;
      }
      var other = o;
      if (this.width !== other.width) {
        return false;
      }
      if (this.height !== other.height) {
        return false;
      }
      for (var y = 0, height = this.height; y < height; ++y) {
        var bytesY = this.bytes[y];
        var otherBytesY = other.bytes[y];
        for (var x = 0, width = this.width; x < width; ++x) {
          if (bytesY[x] !== otherBytesY[x]) {
            return false;
          }
        }
      }
      return true;
    };
    ByteMatrix2.prototype.toString = function() {
      var result = new StringBuilder_default();
      for (var y = 0, height = this.height; y < height; ++y) {
        var bytesY = this.bytes[y];
        for (var x = 0, width = this.width; x < width; ++x) {
          switch (bytesY[x]) {
            case 0:
              result.append(" 0");
              break;
            case 1:
              result.append(" 1");
              break;
            default:
              result.append("  ");
              break;
          }
        }
        result.append("\n");
      }
      return result.toString();
    };
    return ByteMatrix2;
  }()
);
var ByteMatrix_default = ByteMatrix;

// node_modules/@zxing/library/esm/core/qrcode/encoder/QRCode.js
var QRCode = (
  /** @class */
  function() {
    function QRCode2() {
      this.maskPattern = -1;
    }
    QRCode2.prototype.getMode = function() {
      return this.mode;
    };
    QRCode2.prototype.getECLevel = function() {
      return this.ecLevel;
    };
    QRCode2.prototype.getVersion = function() {
      return this.version;
    };
    QRCode2.prototype.getMaskPattern = function() {
      return this.maskPattern;
    };
    QRCode2.prototype.getMatrix = function() {
      return this.matrix;
    };
    QRCode2.prototype.toString = function() {
      var result = new StringBuilder_default();
      result.append("<<\n");
      result.append(" mode: ");
      result.append(this.mode ? this.mode.toString() : "null");
      result.append("\n ecLevel: ");
      result.append(this.ecLevel ? this.ecLevel.toString() : "null");
      result.append("\n version: ");
      result.append(this.version ? this.version.toString() : "null");
      result.append("\n maskPattern: ");
      result.append(this.maskPattern.toString());
      if (this.matrix) {
        result.append("\n matrix:\n");
        result.append(this.matrix.toString());
      } else {
        result.append("\n matrix: null\n");
      }
      result.append(">>\n");
      return result.toString();
    };
    QRCode2.prototype.setMode = function(value) {
      this.mode = value;
    };
    QRCode2.prototype.setECLevel = function(value) {
      this.ecLevel = value;
    };
    QRCode2.prototype.setVersion = function(version) {
      this.version = version;
    };
    QRCode2.prototype.setMaskPattern = function(value) {
      this.maskPattern = value;
    };
    QRCode2.prototype.setMatrix = function(value) {
      this.matrix = value;
    };
    QRCode2.isValidMaskPattern = function(maskPattern) {
      return maskPattern >= 0 && maskPattern < QRCode2.NUM_MASK_PATTERNS;
    };
    QRCode2.NUM_MASK_PATTERNS = 8;
    return QRCode2;
  }()
);
var QRCode_default = QRCode;

// node_modules/@zxing/library/esm/core/WriterException.js
var __extends65 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WriterException = (
  /** @class */
  function(_super) {
    __extends65(WriterException2, _super);
    function WriterException2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WriterException2.kind = "WriterException";
    return WriterException2;
  }(Exception_default)
);
var WriterException_default = WriterException;

// node_modules/@zxing/library/esm/core/qrcode/encoder/MatrixUtil.js
var MatrixUtil = (
  /** @class */
  function() {
    function MatrixUtil2() {
    }
    MatrixUtil2.clearMatrix = function(matrix) {
      matrix.clear(
        /*(byte) */
        /*-1*/
        255
      );
    };
    MatrixUtil2.buildMatrix = function(dataBits, ecLevel, version, maskPattern, matrix) {
      MatrixUtil2.clearMatrix(matrix);
      MatrixUtil2.embedBasicPatterns(version, matrix);
      MatrixUtil2.embedTypeInfo(ecLevel, maskPattern, matrix);
      MatrixUtil2.maybeEmbedVersionInfo(version, matrix);
      MatrixUtil2.embedDataBits(dataBits, maskPattern, matrix);
    };
    MatrixUtil2.embedBasicPatterns = function(version, matrix) {
      MatrixUtil2.embedPositionDetectionPatternsAndSeparators(matrix);
      MatrixUtil2.embedDarkDotAtLeftBottomCorner(matrix);
      MatrixUtil2.maybeEmbedPositionAdjustmentPatterns(version, matrix);
      MatrixUtil2.embedTimingPatterns(matrix);
    };
    MatrixUtil2.embedTypeInfo = function(ecLevel, maskPattern, matrix) {
      var typeInfoBits = new BitArray_default();
      MatrixUtil2.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);
      for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {
        var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);
        var coordinates = MatrixUtil2.TYPE_INFO_COORDINATES[i];
        var x1 = coordinates[0];
        var y1 = coordinates[1];
        matrix.setBoolean(x1, y1, bit);
        if (i < 8) {
          var x2 = matrix.getWidth() - i - 1;
          var y2 = 8;
          matrix.setBoolean(x2, y2, bit);
        } else {
          var x2 = 8;
          var y2 = matrix.getHeight() - 7 + (i - 8);
          matrix.setBoolean(x2, y2, bit);
        }
      }
    };
    MatrixUtil2.maybeEmbedVersionInfo = function(version, matrix) {
      if (version.getVersionNumber() < 7) {
        return;
      }
      var versionInfoBits = new BitArray_default();
      MatrixUtil2.makeVersionInfoBits(version, versionInfoBits);
      var bitIndex = 6 * 3 - 1;
      for (var i = 0; i < 6; ++i) {
        for (var j = 0; j < 3; ++j) {
          var bit = versionInfoBits.get(bitIndex);
          bitIndex--;
          matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);
          matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);
        }
      }
    };
    MatrixUtil2.embedDataBits = function(dataBits, maskPattern, matrix) {
      var bitIndex = 0;
      var direction = -1;
      var x = matrix.getWidth() - 1;
      var y = matrix.getHeight() - 1;
      while (x > 0) {
        if (x === 6) {
          x -= 1;
        }
        while (y >= 0 && y < matrix.getHeight()) {
          for (var i = 0; i < 2; ++i) {
            var xx = x - i;
            if (!MatrixUtil2.isEmpty(matrix.get(xx, y))) {
              continue;
            }
            var bit = void 0;
            if (bitIndex < dataBits.getSize()) {
              bit = dataBits.get(bitIndex);
              ++bitIndex;
            } else {
              bit = false;
            }
            if (maskPattern !== 255 && MaskUtil_default.getDataMaskBit(maskPattern, xx, y)) {
              bit = !bit;
            }
            matrix.setBoolean(xx, y, bit);
          }
          y += direction;
        }
        direction = -direction;
        y += direction;
        x -= 2;
      }
      if (bitIndex !== dataBits.getSize()) {
        throw new WriterException_default("Not all bits consumed: " + bitIndex + "/" + dataBits.getSize());
      }
    };
    MatrixUtil2.findMSBSet = function(value) {
      return 32 - Integer_default.numberOfLeadingZeros(value);
    };
    MatrixUtil2.calculateBCHCode = function(value, poly) {
      if (poly === 0) {
        throw new IllegalArgumentException_default("0 polynomial");
      }
      var msbSetInPoly = MatrixUtil2.findMSBSet(poly);
      value <<= msbSetInPoly - 1;
      while (MatrixUtil2.findMSBSet(value) >= msbSetInPoly) {
        value ^= poly << MatrixUtil2.findMSBSet(value) - msbSetInPoly;
      }
      return value;
    };
    MatrixUtil2.makeTypeInfoBits = function(ecLevel, maskPattern, bits) {
      if (!QRCode_default.isValidMaskPattern(maskPattern)) {
        throw new WriterException_default("Invalid mask pattern");
      }
      var typeInfo = ecLevel.getBits() << 3 | maskPattern;
      bits.appendBits(typeInfo, 5);
      var bchCode = MatrixUtil2.calculateBCHCode(typeInfo, MatrixUtil2.TYPE_INFO_POLY);
      bits.appendBits(bchCode, 10);
      var maskBits = new BitArray_default();
      maskBits.appendBits(MatrixUtil2.TYPE_INFO_MASK_PATTERN, 15);
      bits.xor(maskBits);
      if (bits.getSize() !== 15) {
        throw new WriterException_default("should not happen but we got: " + bits.getSize());
      }
    };
    MatrixUtil2.makeVersionInfoBits = function(version, bits) {
      bits.appendBits(version.getVersionNumber(), 6);
      var bchCode = MatrixUtil2.calculateBCHCode(version.getVersionNumber(), MatrixUtil2.VERSION_INFO_POLY);
      bits.appendBits(bchCode, 12);
      if (bits.getSize() !== 18) {
        throw new WriterException_default("should not happen but we got: " + bits.getSize());
      }
    };
    MatrixUtil2.isEmpty = function(value) {
      return value === 255;
    };
    MatrixUtil2.embedTimingPatterns = function(matrix) {
      for (var i = 8; i < matrix.getWidth() - 8; ++i) {
        var bit = (i + 1) % 2;
        if (MatrixUtil2.isEmpty(matrix.get(i, 6))) {
          matrix.setNumber(i, 6, bit);
        }
        if (MatrixUtil2.isEmpty(matrix.get(6, i))) {
          matrix.setNumber(6, i, bit);
        }
      }
    };
    MatrixUtil2.embedDarkDotAtLeftBottomCorner = function(matrix) {
      if (matrix.get(8, matrix.getHeight() - 8) === 0) {
        throw new WriterException_default();
      }
      matrix.setNumber(8, matrix.getHeight() - 8, 1);
    };
    MatrixUtil2.embedHorizontalSeparationPattern = function(xStart, yStart, matrix) {
      for (var x = 0; x < 8; ++x) {
        if (!MatrixUtil2.isEmpty(matrix.get(xStart + x, yStart))) {
          throw new WriterException_default();
        }
        matrix.setNumber(xStart + x, yStart, 0);
      }
    };
    MatrixUtil2.embedVerticalSeparationPattern = function(xStart, yStart, matrix) {
      for (var y = 0; y < 7; ++y) {
        if (!MatrixUtil2.isEmpty(matrix.get(xStart, yStart + y))) {
          throw new WriterException_default();
        }
        matrix.setNumber(xStart, yStart + y, 0);
      }
    };
    MatrixUtil2.embedPositionAdjustmentPattern = function(xStart, yStart, matrix) {
      for (var y = 0; y < 5; ++y) {
        var patternY = MatrixUtil2.POSITION_ADJUSTMENT_PATTERN[y];
        for (var x = 0; x < 5; ++x) {
          matrix.setNumber(xStart + x, yStart + y, patternY[x]);
        }
      }
    };
    MatrixUtil2.embedPositionDetectionPattern = function(xStart, yStart, matrix) {
      for (var y = 0; y < 7; ++y) {
        var patternY = MatrixUtil2.POSITION_DETECTION_PATTERN[y];
        for (var x = 0; x < 7; ++x) {
          matrix.setNumber(xStart + x, yStart + y, patternY[x]);
        }
      }
    };
    MatrixUtil2.embedPositionDetectionPatternsAndSeparators = function(matrix) {
      var pdpWidth = MatrixUtil2.POSITION_DETECTION_PATTERN[0].length;
      MatrixUtil2.embedPositionDetectionPattern(0, 0, matrix);
      MatrixUtil2.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);
      MatrixUtil2.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);
      var hspWidth = 8;
      MatrixUtil2.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);
      MatrixUtil2.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);
      MatrixUtil2.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);
      var vspSize = 7;
      MatrixUtil2.embedVerticalSeparationPattern(vspSize, 0, matrix);
      MatrixUtil2.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);
      MatrixUtil2.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);
    };
    MatrixUtil2.maybeEmbedPositionAdjustmentPatterns = function(version, matrix) {
      if (version.getVersionNumber() < 2) {
        return;
      }
      var index = version.getVersionNumber() - 1;
      var coordinates = MatrixUtil2.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];
      for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {
        var y = coordinates[i];
        if (y >= 0) {
          for (var j = 0; j !== length_1; j++) {
            var x = coordinates[j];
            if (x >= 0 && MatrixUtil2.isEmpty(matrix.get(x, y))) {
              MatrixUtil2.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);
            }
          }
        }
      }
    };
    MatrixUtil2.POSITION_DETECTION_PATTERN = Array.from([
      Int32Array.from([1, 1, 1, 1, 1, 1, 1]),
      Int32Array.from([1, 0, 0, 0, 0, 0, 1]),
      Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
      Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
      Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
      Int32Array.from([1, 0, 0, 0, 0, 0, 1]),
      Int32Array.from([1, 1, 1, 1, 1, 1, 1])
    ]);
    MatrixUtil2.POSITION_ADJUSTMENT_PATTERN = Array.from([
      Int32Array.from([1, 1, 1, 1, 1]),
      Int32Array.from([1, 0, 0, 0, 1]),
      Int32Array.from([1, 0, 1, 0, 1]),
      Int32Array.from([1, 0, 0, 0, 1]),
      Int32Array.from([1, 1, 1, 1, 1])
    ]);
    MatrixUtil2.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([
      Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 18, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 22, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 26, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 30, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 34, -1, -1, -1, -1, -1]),
      Int32Array.from([6, 22, 38, -1, -1, -1, -1]),
      Int32Array.from([6, 24, 42, -1, -1, -1, -1]),
      Int32Array.from([6, 26, 46, -1, -1, -1, -1]),
      Int32Array.from([6, 28, 50, -1, -1, -1, -1]),
      Int32Array.from([6, 30, 54, -1, -1, -1, -1]),
      Int32Array.from([6, 32, 58, -1, -1, -1, -1]),
      Int32Array.from([6, 34, 62, -1, -1, -1, -1]),
      Int32Array.from([6, 26, 46, 66, -1, -1, -1]),
      Int32Array.from([6, 26, 48, 70, -1, -1, -1]),
      Int32Array.from([6, 26, 50, 74, -1, -1, -1]),
      Int32Array.from([6, 30, 54, 78, -1, -1, -1]),
      Int32Array.from([6, 30, 56, 82, -1, -1, -1]),
      Int32Array.from([6, 30, 58, 86, -1, -1, -1]),
      Int32Array.from([6, 34, 62, 90, -1, -1, -1]),
      Int32Array.from([6, 28, 50, 72, 94, -1, -1]),
      Int32Array.from([6, 26, 50, 74, 98, -1, -1]),
      Int32Array.from([6, 30, 54, 78, 102, -1, -1]),
      Int32Array.from([6, 28, 54, 80, 106, -1, -1]),
      Int32Array.from([6, 32, 58, 84, 110, -1, -1]),
      Int32Array.from([6, 30, 58, 86, 114, -1, -1]),
      Int32Array.from([6, 34, 62, 90, 118, -1, -1]),
      Int32Array.from([6, 26, 50, 74, 98, 122, -1]),
      Int32Array.from([6, 30, 54, 78, 102, 126, -1]),
      Int32Array.from([6, 26, 52, 78, 104, 130, -1]),
      Int32Array.from([6, 30, 56, 82, 108, 134, -1]),
      Int32Array.from([6, 34, 60, 86, 112, 138, -1]),
      Int32Array.from([6, 30, 58, 86, 114, 142, -1]),
      Int32Array.from([6, 34, 62, 90, 118, 146, -1]),
      Int32Array.from([6, 30, 54, 78, 102, 126, 150]),
      Int32Array.from([6, 24, 50, 76, 102, 128, 154]),
      Int32Array.from([6, 28, 54, 80, 106, 132, 158]),
      Int32Array.from([6, 32, 58, 84, 110, 136, 162]),
      Int32Array.from([6, 26, 54, 82, 110, 138, 166]),
      Int32Array.from([6, 30, 58, 86, 114, 142, 170])
    ]);
    MatrixUtil2.TYPE_INFO_COORDINATES = Array.from([
      Int32Array.from([8, 0]),
      Int32Array.from([8, 1]),
      Int32Array.from([8, 2]),
      Int32Array.from([8, 3]),
      Int32Array.from([8, 4]),
      Int32Array.from([8, 5]),
      Int32Array.from([8, 7]),
      Int32Array.from([8, 8]),
      Int32Array.from([7, 8]),
      Int32Array.from([5, 8]),
      Int32Array.from([4, 8]),
      Int32Array.from([3, 8]),
      Int32Array.from([2, 8]),
      Int32Array.from([1, 8]),
      Int32Array.from([0, 8])
    ]);
    MatrixUtil2.VERSION_INFO_POLY = 7973;
    MatrixUtil2.TYPE_INFO_POLY = 1335;
    MatrixUtil2.TYPE_INFO_MASK_PATTERN = 21522;
    return MatrixUtil2;
  }()
);
var MatrixUtil_default = MatrixUtil;

// node_modules/@zxing/library/esm/core/qrcode/encoder/BlockPair.js
var BlockPair = (
  /** @class */
  function() {
    function BlockPair2(dataBytes, errorCorrectionBytes) {
      this.dataBytes = dataBytes;
      this.errorCorrectionBytes = errorCorrectionBytes;
    }
    BlockPair2.prototype.getDataBytes = function() {
      return this.dataBytes;
    };
    BlockPair2.prototype.getErrorCorrectionBytes = function() {
      return this.errorCorrectionBytes;
    };
    return BlockPair2;
  }()
);
var BlockPair_default = BlockPair;

// node_modules/@zxing/library/esm/core/qrcode/encoder/Encoder.js
var __values40 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Encoder = (
  /** @class */
  function() {
    function Encoder3() {
    }
    Encoder3.calculateMaskPenalty = function(matrix) {
      return MaskUtil_default.applyMaskPenaltyRule1(matrix) + MaskUtil_default.applyMaskPenaltyRule2(matrix) + MaskUtil_default.applyMaskPenaltyRule3(matrix) + MaskUtil_default.applyMaskPenaltyRule4(matrix);
    };
    Encoder3.encode = function(content, ecLevel, hints) {
      if (hints === void 0) {
        hints = null;
      }
      var encoding = Encoder3.DEFAULT_BYTE_MODE_ENCODING;
      var hasEncodingHint = hints !== null && void 0 !== hints.get(EncodeHintType_default.CHARACTER_SET);
      if (hasEncodingHint) {
        encoding = hints.get(EncodeHintType_default.CHARACTER_SET).toString();
      }
      var mode = this.chooseMode(content, encoding);
      var headerBits = new BitArray_default();
      if (mode === Mode_default.BYTE && (hasEncodingHint || Encoder3.DEFAULT_BYTE_MODE_ENCODING !== encoding)) {
        var eci = CharacterSetECI_default.getCharacterSetECIByName(encoding);
        if (eci !== void 0) {
          this.appendECI(eci, headerBits);
        }
      }
      this.appendModeInfo(mode, headerBits);
      var dataBits = new BitArray_default();
      this.appendBytes(content, mode, dataBits, encoding);
      var version;
      if (hints !== null && void 0 !== hints.get(EncodeHintType_default.QR_VERSION)) {
        var versionNumber = Number.parseInt(hints.get(EncodeHintType_default.QR_VERSION).toString(), 10);
        version = Version_default2.getVersionForNumber(versionNumber);
        var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, version);
        if (!this.willFit(bitsNeeded, version, ecLevel)) {
          throw new WriterException_default("Data too big for requested version");
        }
      } else {
        version = this.recommendVersion(ecLevel, mode, headerBits, dataBits);
      }
      var headerAndDataBits = new BitArray_default();
      headerAndDataBits.appendBitArray(headerBits);
      var numLetters = mode === Mode_default.BYTE ? dataBits.getSizeInBytes() : content.length;
      this.appendLengthInfo(numLetters, version, mode, headerAndDataBits);
      headerAndDataBits.appendBitArray(dataBits);
      var ecBlocks = version.getECBlocksForLevel(ecLevel);
      var numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();
      this.terminateBits(numDataBytes, headerAndDataBits);
      var finalBits = this.interleaveWithECBytes(headerAndDataBits, version.getTotalCodewords(), numDataBytes, ecBlocks.getNumBlocks());
      var qrCode = new QRCode_default();
      qrCode.setECLevel(ecLevel);
      qrCode.setMode(mode);
      qrCode.setVersion(version);
      var dimension = version.getDimensionForVersion();
      var matrix = new ByteMatrix_default(dimension, dimension);
      var maskPattern = this.chooseMaskPattern(finalBits, ecLevel, version, matrix);
      qrCode.setMaskPattern(maskPattern);
      MatrixUtil_default.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);
      qrCode.setMatrix(matrix);
      return qrCode;
    };
    Encoder3.recommendVersion = function(ecLevel, mode, headerBits, dataBits) {
      var provisionalBitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, Version_default2.getVersionForNumber(1));
      var provisionalVersion = this.chooseVersion(provisionalBitsNeeded, ecLevel);
      var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, provisionalVersion);
      return this.chooseVersion(bitsNeeded, ecLevel);
    };
    Encoder3.calculateBitsNeeded = function(mode, headerBits, dataBits, version) {
      return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();
    };
    Encoder3.getAlphanumericCode = function(code) {
      if (code < Encoder3.ALPHANUMERIC_TABLE.length) {
        return Encoder3.ALPHANUMERIC_TABLE[code];
      }
      return -1;
    };
    Encoder3.chooseMode = function(content, encoding) {
      if (encoding === void 0) {
        encoding = null;
      }
      if (CharacterSetECI_default.SJIS.getName() === encoding && this.isOnlyDoubleByteKanji(content)) {
        return Mode_default.KANJI;
      }
      var hasNumeric = false;
      var hasAlphanumeric = false;
      for (var i = 0, length_1 = content.length; i < length_1; ++i) {
        var c = content.charAt(i);
        if (Encoder3.isDigit(c)) {
          hasNumeric = true;
        } else if (this.getAlphanumericCode(c.charCodeAt(0)) !== -1) {
          hasAlphanumeric = true;
        } else {
          return Mode_default.BYTE;
        }
      }
      if (hasAlphanumeric) {
        return Mode_default.ALPHANUMERIC;
      }
      if (hasNumeric) {
        return Mode_default.NUMERIC;
      }
      return Mode_default.BYTE;
    };
    Encoder3.isOnlyDoubleByteKanji = function(content) {
      var bytes;
      try {
        bytes = StringEncoding_default.encode(content, CharacterSetECI_default.SJIS);
      } catch (ignored) {
        return false;
      }
      var length = bytes.length;
      if (length % 2 !== 0) {
        return false;
      }
      for (var i = 0; i < length; i += 2) {
        var byte1 = bytes[i] & 255;
        if ((byte1 < 129 || byte1 > 159) && (byte1 < 224 || byte1 > 235)) {
          return false;
        }
      }
      return true;
    };
    Encoder3.chooseMaskPattern = function(bits, ecLevel, version, matrix) {
      var minPenalty = Number.MAX_SAFE_INTEGER;
      var bestMaskPattern = -1;
      for (var maskPattern = 0; maskPattern < QRCode_default.NUM_MASK_PATTERNS; maskPattern++) {
        MatrixUtil_default.buildMatrix(bits, ecLevel, version, maskPattern, matrix);
        var penalty = this.calculateMaskPenalty(matrix);
        if (penalty < minPenalty) {
          minPenalty = penalty;
          bestMaskPattern = maskPattern;
        }
      }
      return bestMaskPattern;
    };
    Encoder3.chooseVersion = function(numInputBits, ecLevel) {
      for (var versionNum = 1; versionNum <= 40; versionNum++) {
        var version = Version_default2.getVersionForNumber(versionNum);
        if (Encoder3.willFit(numInputBits, version, ecLevel)) {
          return version;
        }
      }
      throw new WriterException_default("Data too big");
    };
    Encoder3.willFit = function(numInputBits, version, ecLevel) {
      var numBytes = version.getTotalCodewords();
      var ecBlocks = version.getECBlocksForLevel(ecLevel);
      var numEcBytes = ecBlocks.getTotalECCodewords();
      var numDataBytes = numBytes - numEcBytes;
      var totalInputBytes = (numInputBits + 7) / 8;
      return numDataBytes >= totalInputBytes;
    };
    Encoder3.terminateBits = function(numDataBytes, bits) {
      var capacity = numDataBytes * 8;
      if (bits.getSize() > capacity) {
        throw new WriterException_default("data bits cannot fit in the QR Code" + bits.getSize() + " > " + capacity);
      }
      for (var i = 0; i < 4 && bits.getSize() < capacity; ++i) {
        bits.appendBit(false);
      }
      var numBitsInLastByte = bits.getSize() & 7;
      if (numBitsInLastByte > 0) {
        for (var i = numBitsInLastByte; i < 8; i++) {
          bits.appendBit(false);
        }
      }
      var numPaddingBytes = numDataBytes - bits.getSizeInBytes();
      for (var i = 0; i < numPaddingBytes; ++i) {
        bits.appendBits((i & 1) === 0 ? 236 : 17, 8);
      }
      if (bits.getSize() !== capacity) {
        throw new WriterException_default("Bits size does not equal capacity");
      }
    };
    Encoder3.getNumDataBytesAndNumECBytesForBlockID = function(numTotalBytes, numDataBytes, numRSBlocks, blockID, numDataBytesInBlock, numECBytesInBlock) {
      if (blockID >= numRSBlocks) {
        throw new WriterException_default("Block ID too large");
      }
      var numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;
      var numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;
      var numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks);
      var numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;
      var numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks);
      var numDataBytesInGroup2 = numDataBytesInGroup1 + 1;
      var numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;
      var numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;
      if (numEcBytesInGroup1 !== numEcBytesInGroup2) {
        throw new WriterException_default("EC bytes mismatch");
      }
      if (numRSBlocks !== numRsBlocksInGroup1 + numRsBlocksInGroup2) {
        throw new WriterException_default("RS blocks mismatch");
      }
      if (numTotalBytes !== (numDataBytesInGroup1 + numEcBytesInGroup1) * numRsBlocksInGroup1 + (numDataBytesInGroup2 + numEcBytesInGroup2) * numRsBlocksInGroup2) {
        throw new WriterException_default("Total bytes mismatch");
      }
      if (blockID < numRsBlocksInGroup1) {
        numDataBytesInBlock[0] = numDataBytesInGroup1;
        numECBytesInBlock[0] = numEcBytesInGroup1;
      } else {
        numDataBytesInBlock[0] = numDataBytesInGroup2;
        numECBytesInBlock[0] = numEcBytesInGroup2;
      }
    };
    Encoder3.interleaveWithECBytes = function(bits, numTotalBytes, numDataBytes, numRSBlocks) {
      var e_1, _a2, e_2, _b;
      if (bits.getSizeInBytes() !== numDataBytes) {
        throw new WriterException_default("Number of bits and data bytes does not match");
      }
      var dataBytesOffset = 0;
      var maxNumDataBytes = 0;
      var maxNumEcBytes = 0;
      var blocks = new Array();
      for (var i = 0; i < numRSBlocks; ++i) {
        var numDataBytesInBlock = new Int32Array(1);
        var numEcBytesInBlock = new Int32Array(1);
        Encoder3.getNumDataBytesAndNumECBytesForBlockID(numTotalBytes, numDataBytes, numRSBlocks, i, numDataBytesInBlock, numEcBytesInBlock);
        var size = numDataBytesInBlock[0];
        var dataBytes = new Uint8Array(size);
        bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);
        var ecBytes = Encoder3.generateECBytes(dataBytes, numEcBytesInBlock[0]);
        blocks.push(new BlockPair_default(dataBytes, ecBytes));
        maxNumDataBytes = Math.max(maxNumDataBytes, size);
        maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);
        dataBytesOffset += numDataBytesInBlock[0];
      }
      if (numDataBytes !== dataBytesOffset) {
        throw new WriterException_default("Data bytes does not match offset");
      }
      var result = new BitArray_default();
      for (var i = 0; i < maxNumDataBytes; ++i) {
        try {
          for (var blocks_1 = (e_1 = void 0, __values40(blocks)), blocks_1_1 = blocks_1.next(); !blocks_1_1.done; blocks_1_1 = blocks_1.next()) {
            var block = blocks_1_1.value;
            var dataBytes = block.getDataBytes();
            if (i < dataBytes.length) {
              result.appendBits(dataBytes[i], 8);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (blocks_1_1 && !blocks_1_1.done && (_a2 = blocks_1.return)) _a2.call(blocks_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      for (var i = 0; i < maxNumEcBytes; ++i) {
        try {
          for (var blocks_2 = (e_2 = void 0, __values40(blocks)), blocks_2_1 = blocks_2.next(); !blocks_2_1.done; blocks_2_1 = blocks_2.next()) {
            var block = blocks_2_1.value;
            var ecBytes = block.getErrorCorrectionBytes();
            if (i < ecBytes.length) {
              result.appendBits(ecBytes[i], 8);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (blocks_2_1 && !blocks_2_1.done && (_b = blocks_2.return)) _b.call(blocks_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      if (numTotalBytes !== result.getSizeInBytes()) {
        throw new WriterException_default("Interleaving error: " + numTotalBytes + " and " + result.getSizeInBytes() + " differ.");
      }
      return result;
    };
    Encoder3.generateECBytes = function(dataBytes, numEcBytesInBlock) {
      var numDataBytes = dataBytes.length;
      var toEncode = new Int32Array(numDataBytes + numEcBytesInBlock);
      for (var i = 0; i < numDataBytes; i++) {
        toEncode[i] = dataBytes[i] & 255;
      }
      new ReedSolomonEncoder_default(GenericGF_default.QR_CODE_FIELD_256).encode(toEncode, numEcBytesInBlock);
      var ecBytes = new Uint8Array(numEcBytesInBlock);
      for (var i = 0; i < numEcBytesInBlock; i++) {
        ecBytes[i] = /*(byte) */
        toEncode[numDataBytes + i];
      }
      return ecBytes;
    };
    Encoder3.appendModeInfo = function(mode, bits) {
      bits.appendBits(mode.getBits(), 4);
    };
    Encoder3.appendLengthInfo = function(numLetters, version, mode, bits) {
      var numBits = mode.getCharacterCountBits(version);
      if (numLetters >= 1 << numBits) {
        throw new WriterException_default(numLetters + " is bigger than " + ((1 << numBits) - 1));
      }
      bits.appendBits(numLetters, numBits);
    };
    Encoder3.appendBytes = function(content, mode, bits, encoding) {
      switch (mode) {
        case Mode_default.NUMERIC:
          Encoder3.appendNumericBytes(content, bits);
          break;
        case Mode_default.ALPHANUMERIC:
          Encoder3.appendAlphanumericBytes(content, bits);
          break;
        case Mode_default.BYTE:
          Encoder3.append8BitBytes(content, bits, encoding);
          break;
        case Mode_default.KANJI:
          Encoder3.appendKanjiBytes(content, bits);
          break;
        default:
          throw new WriterException_default("Invalid mode: " + mode);
      }
    };
    Encoder3.getDigit = function(singleCharacter) {
      return singleCharacter.charCodeAt(0) - 48;
    };
    Encoder3.isDigit = function(singleCharacter) {
      var cn = Encoder3.getDigit(singleCharacter);
      return cn >= 0 && cn <= 9;
    };
    Encoder3.appendNumericBytes = function(content, bits) {
      var length = content.length;
      var i = 0;
      while (i < length) {
        var num1 = Encoder3.getDigit(content.charAt(i));
        if (i + 2 < length) {
          var num2 = Encoder3.getDigit(content.charAt(i + 1));
          var num3 = Encoder3.getDigit(content.charAt(i + 2));
          bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);
          i += 3;
        } else if (i + 1 < length) {
          var num2 = Encoder3.getDigit(content.charAt(i + 1));
          bits.appendBits(num1 * 10 + num2, 7);
          i += 2;
        } else {
          bits.appendBits(num1, 4);
          i++;
        }
      }
    };
    Encoder3.appendAlphanumericBytes = function(content, bits) {
      var length = content.length;
      var i = 0;
      while (i < length) {
        var code1 = Encoder3.getAlphanumericCode(content.charCodeAt(i));
        if (code1 === -1) {
          throw new WriterException_default();
        }
        if (i + 1 < length) {
          var code2 = Encoder3.getAlphanumericCode(content.charCodeAt(i + 1));
          if (code2 === -1) {
            throw new WriterException_default();
          }
          bits.appendBits(code1 * 45 + code2, 11);
          i += 2;
        } else {
          bits.appendBits(code1, 6);
          i++;
        }
      }
    };
    Encoder3.append8BitBytes = function(content, bits, encoding) {
      var bytes;
      try {
        bytes = StringEncoding_default.encode(content, encoding);
      } catch (uee) {
        throw new WriterException_default(uee);
      }
      for (var i = 0, length_2 = bytes.length; i !== length_2; i++) {
        var b = bytes[i];
        bits.appendBits(b, 8);
      }
    };
    Encoder3.appendKanjiBytes = function(content, bits) {
      var bytes;
      try {
        bytes = StringEncoding_default.encode(content, CharacterSetECI_default.SJIS);
      } catch (uee) {
        throw new WriterException_default(uee);
      }
      var length = bytes.length;
      for (var i = 0; i < length; i += 2) {
        var byte1 = bytes[i] & 255;
        var byte2 = bytes[i + 1] & 255;
        var code = byte1 << 8 & 4294967295 | byte2;
        var subtracted = -1;
        if (code >= 33088 && code <= 40956) {
          subtracted = code - 33088;
        } else if (code >= 57408 && code <= 60351) {
          subtracted = code - 49472;
        }
        if (subtracted === -1) {
          throw new WriterException_default("Invalid byte sequence");
        }
        var encoded = (subtracted >> 8) * 192 + (subtracted & 255);
        bits.appendBits(encoded, 13);
      }
    };
    Encoder3.appendECI = function(eci, bits) {
      bits.appendBits(Mode_default.ECI.getBits(), 4);
      bits.appendBits(eci.getValue(), 8);
    };
    Encoder3.ALPHANUMERIC_TABLE = Int32Array.from([
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      36,
      -1,
      -1,
      -1,
      37,
      38,
      -1,
      -1,
      -1,
      -1,
      39,
      40,
      -1,
      41,
      42,
      43,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      44,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      -1,
      -1,
      -1,
      -1,
      -1
    ]);
    Encoder3.DEFAULT_BYTE_MODE_ENCODING = CharacterSetECI_default.UTF8.getName();
    return Encoder3;
  }()
);
var Encoder_default = Encoder;

// node_modules/@zxing/library/esm/browser/BrowserQRCodeSvgWriter.js
var BrowserQRCodeSvgWriter = (
  /** @class */
  function() {
    function BrowserQRCodeSvgWriter3() {
    }
    BrowserQRCodeSvgWriter3.prototype.write = function(contents, width, height, hints) {
      if (hints === void 0) {
        hints = null;
      }
      if (contents.length === 0) {
        throw new IllegalArgumentException_default("Found empty contents");
      }
      if (width < 0 || height < 0) {
        throw new IllegalArgumentException_default("Requested dimensions are too small: " + width + "x" + height);
      }
      var errorCorrectionLevel = ErrorCorrectionLevel_default.L;
      var quietZone = BrowserQRCodeSvgWriter3.QUIET_ZONE_SIZE;
      if (hints !== null) {
        if (void 0 !== hints.get(EncodeHintType_default.ERROR_CORRECTION)) {
          errorCorrectionLevel = ErrorCorrectionLevel_default.fromString(hints.get(EncodeHintType_default.ERROR_CORRECTION).toString());
        }
        if (void 0 !== hints.get(EncodeHintType_default.MARGIN)) {
          quietZone = Number.parseInt(hints.get(EncodeHintType_default.MARGIN).toString(), 10);
        }
      }
      var code = Encoder_default.encode(contents, errorCorrectionLevel, hints);
      return this.renderResult(code, width, height, quietZone);
    };
    BrowserQRCodeSvgWriter3.prototype.writeToDom = function(containerElement, contents, width, height, hints) {
      if (hints === void 0) {
        hints = null;
      }
      if (typeof containerElement === "string") {
        containerElement = document.querySelector(containerElement);
      }
      var svgElement = this.write(contents, width, height, hints);
      if (containerElement)
        containerElement.appendChild(svgElement);
    };
    BrowserQRCodeSvgWriter3.prototype.renderResult = function(code, width, height, quietZone) {
      var input = code.getMatrix();
      if (input === null) {
        throw new IllegalStateException_default();
      }
      var inputWidth = input.getWidth();
      var inputHeight = input.getHeight();
      var qrWidth = inputWidth + quietZone * 2;
      var qrHeight = inputHeight + quietZone * 2;
      var outputWidth = Math.max(width, qrWidth);
      var outputHeight = Math.max(height, qrHeight);
      var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
      var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
      var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
      var svgElement = this.createSVGElement(outputWidth, outputHeight);
      for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {
          if (input.get(inputX, inputY) === 1) {
            var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);
            svgElement.appendChild(svgRectElement);
          }
        }
      }
      return svgElement;
    };
    BrowserQRCodeSvgWriter3.prototype.createSVGElement = function(w, h) {
      var svgElement = document.createElementNS(BrowserQRCodeSvgWriter3.SVG_NS, "svg");
      svgElement.setAttributeNS(null, "height", w.toString());
      svgElement.setAttributeNS(null, "width", h.toString());
      return svgElement;
    };
    BrowserQRCodeSvgWriter3.prototype.createSvgRectElement = function(x, y, w, h) {
      var rect = document.createElementNS(BrowserQRCodeSvgWriter3.SVG_NS, "rect");
      rect.setAttributeNS(null, "x", x.toString());
      rect.setAttributeNS(null, "y", y.toString());
      rect.setAttributeNS(null, "height", w.toString());
      rect.setAttributeNS(null, "width", h.toString());
      rect.setAttributeNS(null, "fill", "#000000");
      return rect;
    };
    BrowserQRCodeSvgWriter3.QUIET_ZONE_SIZE = 4;
    BrowserQRCodeSvgWriter3.SVG_NS = "http://www.w3.org/2000/svg";
    return BrowserQRCodeSvgWriter3;
  }()
);

// node_modules/@zxing/library/esm/core/qrcode/QRCodeWriter.js
var QRCodeWriter = (
  /** @class */
  function() {
    function QRCodeWriter2() {
    }
    QRCodeWriter2.prototype.encode = function(contents, format, width, height, hints) {
      if (contents.length === 0) {
        throw new IllegalArgumentException_default("Found empty contents");
      }
      if (format !== BarcodeFormat_default.QR_CODE) {
        throw new IllegalArgumentException_default("Can only encode QR_CODE, but got " + format);
      }
      if (width < 0 || height < 0) {
        throw new IllegalArgumentException_default("Requested dimensions are too small: " + width + "x" + height);
      }
      var errorCorrectionLevel = ErrorCorrectionLevel_default.L;
      var quietZone = QRCodeWriter2.QUIET_ZONE_SIZE;
      if (hints !== null) {
        if (void 0 !== hints.get(EncodeHintType_default.ERROR_CORRECTION)) {
          errorCorrectionLevel = ErrorCorrectionLevel_default.fromString(hints.get(EncodeHintType_default.ERROR_CORRECTION).toString());
        }
        if (void 0 !== hints.get(EncodeHintType_default.MARGIN)) {
          quietZone = Number.parseInt(hints.get(EncodeHintType_default.MARGIN).toString(), 10);
        }
      }
      var code = Encoder_default.encode(contents, errorCorrectionLevel, hints);
      return QRCodeWriter2.renderResult(code, width, height, quietZone);
    };
    QRCodeWriter2.renderResult = function(code, width, height, quietZone) {
      var input = code.getMatrix();
      if (input === null) {
        throw new IllegalStateException_default();
      }
      var inputWidth = input.getWidth();
      var inputHeight = input.getHeight();
      var qrWidth = inputWidth + quietZone * 2;
      var qrHeight = inputHeight + quietZone * 2;
      var outputWidth = Math.max(width, qrWidth);
      var outputHeight = Math.max(height, qrHeight);
      var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
      var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
      var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
      var output = new BitMatrix_default(outputWidth, outputHeight);
      for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {
          if (input.get(inputX, inputY) === 1) {
            output.setRegion(outputX, outputY, multiple, multiple);
          }
        }
      }
      return output;
    };
    QRCodeWriter2.QUIET_ZONE_SIZE = 4;
    return QRCodeWriter2;
  }()
);
var QRCodeWriter_default = QRCodeWriter;

// node_modules/@zxing/library/esm/core/MultiFormatWriter.js
var MultiFormatWriter = (
  /** @class */
  function() {
    function MultiFormatWriter2() {
    }
    MultiFormatWriter2.prototype.encode = function(contents, format, width, height, hints) {
      var writer;
      switch (format) {
        case BarcodeFormat_default.QR_CODE:
          writer = new QRCodeWriter_default();
          break;
        default:
          throw new IllegalArgumentException_default("No encoder available for format " + format);
      }
      return writer.encode(contents, format, width, height, hints);
    };
    return MultiFormatWriter2;
  }()
);

// node_modules/@zxing/library/esm/core/PlanarYUVLuminanceSource.js
var __extends66 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PlanarYUVLuminanceSource = (
  /** @class */
  function(_super) {
    __extends66(PlanarYUVLuminanceSource2, _super);
    function PlanarYUVLuminanceSource2(yuvData, dataWidth, dataHeight, left, top, width, height, reverseHorizontal) {
      var _this = _super.call(this, width, height) || this;
      _this.yuvData = yuvData;
      _this.dataWidth = dataWidth;
      _this.dataHeight = dataHeight;
      _this.left = left;
      _this.top = top;
      if (left + width > dataWidth || top + height > dataHeight) {
        throw new IllegalArgumentException_default("Crop rectangle does not fit within image data.");
      }
      if (reverseHorizontal) {
        _this.reverseHorizontal(width, height);
      }
      return _this;
    }
    PlanarYUVLuminanceSource2.prototype.getRow = function(y, row) {
      if (y < 0 || y >= this.getHeight()) {
        throw new IllegalArgumentException_default("Requested row is outside the image: " + y);
      }
      var width = this.getWidth();
      if (row === null || row === void 0 || row.length < width) {
        row = new Uint8ClampedArray(width);
      }
      var offset = (y + this.top) * this.dataWidth + this.left;
      System_default.arraycopy(this.yuvData, offset, row, 0, width);
      return row;
    };
    PlanarYUVLuminanceSource2.prototype.getMatrix = function() {
      var width = this.getWidth();
      var height = this.getHeight();
      if (width === this.dataWidth && height === this.dataHeight) {
        return this.yuvData;
      }
      var area = width * height;
      var matrix = new Uint8ClampedArray(area);
      var inputOffset = this.top * this.dataWidth + this.left;
      if (width === this.dataWidth) {
        System_default.arraycopy(this.yuvData, inputOffset, matrix, 0, area);
        return matrix;
      }
      for (var y = 0; y < height; y++) {
        var outputOffset = y * width;
        System_default.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);
        inputOffset += this.dataWidth;
      }
      return matrix;
    };
    PlanarYUVLuminanceSource2.prototype.isCropSupported = function() {
      return true;
    };
    PlanarYUVLuminanceSource2.prototype.crop = function(left, top, width, height) {
      return new PlanarYUVLuminanceSource2(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);
    };
    PlanarYUVLuminanceSource2.prototype.renderThumbnail = function() {
      var width = this.getWidth() / PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR;
      var height = this.getHeight() / PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR;
      var pixels = new Int32Array(width * height);
      var yuv = this.yuvData;
      var inputOffset = this.top * this.dataWidth + this.left;
      for (var y = 0; y < height; y++) {
        var outputOffset = y * width;
        for (var x = 0; x < width; x++) {
          var grey = yuv[inputOffset + x * PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR] & 255;
          pixels[outputOffset + x] = 4278190080 | grey * 65793;
        }
        inputOffset += this.dataWidth * PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR;
      }
      return pixels;
    };
    PlanarYUVLuminanceSource2.prototype.getThumbnailWidth = function() {
      return this.getWidth() / PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR;
    };
    PlanarYUVLuminanceSource2.prototype.getThumbnailHeight = function() {
      return this.getHeight() / PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR;
    };
    PlanarYUVLuminanceSource2.prototype.reverseHorizontal = function(width, height) {
      var yuvData = this.yuvData;
      for (var y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {
        var middle = rowStart + width / 2;
        for (var x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {
          var temp = yuvData[x1];
          yuvData[x1] = yuvData[x2];
          yuvData[x2] = temp;
        }
      }
    };
    PlanarYUVLuminanceSource2.prototype.invert = function() {
      return new InvertedLuminanceSource_default(this);
    };
    PlanarYUVLuminanceSource2.THUMBNAIL_SCALE_FACTOR = 2;
    return PlanarYUVLuminanceSource2;
  }(LuminanceSource_default)
);

// node_modules/@zxing/library/esm/core/RGBLuminanceSource.js
var __extends67 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RGBLuminanceSource = (
  /** @class */
  function(_super) {
    __extends67(RGBLuminanceSource2, _super);
    function RGBLuminanceSource2(luminances, width, height, dataWidth, dataHeight, left, top) {
      var _this = _super.call(this, width, height) || this;
      _this.dataWidth = dataWidth;
      _this.dataHeight = dataHeight;
      _this.left = left;
      _this.top = top;
      if (luminances.BYTES_PER_ELEMENT === 4) {
        var size = width * height;
        var luminancesUint8Array = new Uint8ClampedArray(size);
        for (var offset = 0; offset < size; offset++) {
          var pixel = luminances[offset];
          var r = pixel >> 16 & 255;
          var g2 = pixel >> 7 & 510;
          var b = pixel & 255;
          luminancesUint8Array[offset] = /*(byte) */
          (r + g2 + b) / 4 & 255;
        }
        _this.luminances = luminancesUint8Array;
      } else {
        _this.luminances = luminances;
      }
      if (void 0 === dataWidth) {
        _this.dataWidth = width;
      }
      if (void 0 === dataHeight) {
        _this.dataHeight = height;
      }
      if (void 0 === left) {
        _this.left = 0;
      }
      if (void 0 === top) {
        _this.top = 0;
      }
      if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {
        throw new IllegalArgumentException_default("Crop rectangle does not fit within image data.");
      }
      return _this;
    }
    RGBLuminanceSource2.prototype.getRow = function(y, row) {
      if (y < 0 || y >= this.getHeight()) {
        throw new IllegalArgumentException_default("Requested row is outside the image: " + y);
      }
      var width = this.getWidth();
      if (row === null || row === void 0 || row.length < width) {
        row = new Uint8ClampedArray(width);
      }
      var offset = (y + this.top) * this.dataWidth + this.left;
      System_default.arraycopy(this.luminances, offset, row, 0, width);
      return row;
    };
    RGBLuminanceSource2.prototype.getMatrix = function() {
      var width = this.getWidth();
      var height = this.getHeight();
      if (width === this.dataWidth && height === this.dataHeight) {
        return this.luminances;
      }
      var area = width * height;
      var matrix = new Uint8ClampedArray(area);
      var inputOffset = this.top * this.dataWidth + this.left;
      if (width === this.dataWidth) {
        System_default.arraycopy(this.luminances, inputOffset, matrix, 0, area);
        return matrix;
      }
      for (var y = 0; y < height; y++) {
        var outputOffset = y * width;
        System_default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);
        inputOffset += this.dataWidth;
      }
      return matrix;
    };
    RGBLuminanceSource2.prototype.isCropSupported = function() {
      return true;
    };
    RGBLuminanceSource2.prototype.crop = function(left, top, width, height) {
      return new RGBLuminanceSource2(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);
    };
    RGBLuminanceSource2.prototype.invert = function() {
      return new InvertedLuminanceSource_default(this);
    };
    return RGBLuminanceSource2;
  }(LuminanceSource_default)
);

// node_modules/@zxing/library/esm/core/util/Charset.js
var __extends68 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Charset = (
  /** @class */
  function(_super) {
    __extends68(Charset2, _super);
    function Charset2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Charset2.forName = function(name) {
      return this.getCharacterSetECIByName(name);
    };
    return Charset2;
  }(CharacterSetECI_default)
);
var Charset_default = Charset;

// node_modules/@zxing/library/esm/core/util/StandardCharsets.js
var StandardCharsets = (
  /** @class */
  function() {
    function StandardCharsets2() {
    }
    StandardCharsets2.ISO_8859_1 = CharacterSetECI_default.ISO8859_1;
    return StandardCharsets2;
  }()
);
var StandardCharsets_default = StandardCharsets;

// node_modules/@zxing/library/esm/core/datamatrix/encoder/DefaultPlacement.js
var DefaultPlacement = (
  /** @class */
  function() {
    function DefaultPlacement2(codewords, numcols, numrows) {
      this.codewords = codewords;
      this.numcols = numcols;
      this.numrows = numrows;
      this.bits = new Uint8Array(numcols * numrows);
      Arrays_default.fill(this.bits, 2);
    }
    DefaultPlacement2.prototype.getNumrows = function() {
      return this.numrows;
    };
    DefaultPlacement2.prototype.getNumcols = function() {
      return this.numcols;
    };
    DefaultPlacement2.prototype.getBits = function() {
      return this.bits;
    };
    DefaultPlacement2.prototype.getBit = function(col, row) {
      return this.bits[row * this.numcols + col] === 1;
    };
    DefaultPlacement2.prototype.setBit = function(col, row, bit) {
      this.bits[row * this.numcols + col] = bit ? 1 : 0;
    };
    DefaultPlacement2.prototype.noBit = function(col, row) {
      return this.bits[row * this.numcols + col] === 2;
    };
    DefaultPlacement2.prototype.place = function() {
      var pos = 0;
      var row = 4;
      var col = 0;
      do {
        if (row === this.numrows && col === 0) {
          this.corner1(pos++);
        }
        if (row === this.numrows - 2 && col === 0 && this.numcols % 4 !== 0) {
          this.corner2(pos++);
        }
        if (row === this.numrows - 2 && col === 0 && this.numcols % 8 === 4) {
          this.corner3(pos++);
        }
        if (row === this.numrows + 4 && col === 2 && this.numcols % 8 === 0) {
          this.corner4(pos++);
        }
        do {
          if (row < this.numrows && col >= 0 && this.noBit(col, row)) {
            this.utah(row, col, pos++);
          }
          row -= 2;
          col += 2;
        } while (row >= 0 && col < this.numcols);
        row++;
        col += 3;
        do {
          if (row >= 0 && col < this.numcols && this.noBit(col, row)) {
            this.utah(row, col, pos++);
          }
          row += 2;
          col -= 2;
        } while (row < this.numrows && col >= 0);
        row += 3;
        col++;
      } while (row < this.numrows || col < this.numcols);
      if (this.noBit(this.numcols - 1, this.numrows - 1)) {
        this.setBit(this.numcols - 1, this.numrows - 1, true);
        this.setBit(this.numcols - 2, this.numrows - 2, true);
      }
    };
    DefaultPlacement2.prototype.module = function(row, col, pos, bit) {
      if (row < 0) {
        row += this.numrows;
        col += 4 - (this.numrows + 4) % 8;
      }
      if (col < 0) {
        col += this.numcols;
        row += 4 - (this.numcols + 4) % 8;
      }
      var v = this.codewords.charCodeAt(pos);
      v &= 1 << 8 - bit;
      this.setBit(col, row, v !== 0);
    };
    DefaultPlacement2.prototype.utah = function(row, col, pos) {
      this.module(row - 2, col - 2, pos, 1);
      this.module(row - 2, col - 1, pos, 2);
      this.module(row - 1, col - 2, pos, 3);
      this.module(row - 1, col - 1, pos, 4);
      this.module(row - 1, col, pos, 5);
      this.module(row, col - 2, pos, 6);
      this.module(row, col - 1, pos, 7);
      this.module(row, col, pos, 8);
    };
    DefaultPlacement2.prototype.corner1 = function(pos) {
      this.module(this.numrows - 1, 0, pos, 1);
      this.module(this.numrows - 1, 1, pos, 2);
      this.module(this.numrows - 1, 2, pos, 3);
      this.module(0, this.numcols - 2, pos, 4);
      this.module(0, this.numcols - 1, pos, 5);
      this.module(1, this.numcols - 1, pos, 6);
      this.module(2, this.numcols - 1, pos, 7);
      this.module(3, this.numcols - 1, pos, 8);
    };
    DefaultPlacement2.prototype.corner2 = function(pos) {
      this.module(this.numrows - 3, 0, pos, 1);
      this.module(this.numrows - 2, 0, pos, 2);
      this.module(this.numrows - 1, 0, pos, 3);
      this.module(0, this.numcols - 4, pos, 4);
      this.module(0, this.numcols - 3, pos, 5);
      this.module(0, this.numcols - 2, pos, 6);
      this.module(0, this.numcols - 1, pos, 7);
      this.module(1, this.numcols - 1, pos, 8);
    };
    DefaultPlacement2.prototype.corner3 = function(pos) {
      this.module(this.numrows - 3, 0, pos, 1);
      this.module(this.numrows - 2, 0, pos, 2);
      this.module(this.numrows - 1, 0, pos, 3);
      this.module(0, this.numcols - 2, pos, 4);
      this.module(0, this.numcols - 1, pos, 5);
      this.module(1, this.numcols - 1, pos, 6);
      this.module(2, this.numcols - 1, pos, 7);
      this.module(3, this.numcols - 1, pos, 8);
    };
    DefaultPlacement2.prototype.corner4 = function(pos) {
      this.module(this.numrows - 1, 0, pos, 1);
      this.module(this.numrows - 1, this.numcols - 1, pos, 2);
      this.module(0, this.numcols - 3, pos, 3);
      this.module(0, this.numcols - 2, pos, 4);
      this.module(0, this.numcols - 1, pos, 5);
      this.module(1, this.numcols - 3, pos, 6);
      this.module(1, this.numcols - 2, pos, 7);
      this.module(1, this.numcols - 1, pos, 8);
    };
    return DefaultPlacement2;
  }()
);
var DefaultPlacement_default = DefaultPlacement;

// node_modules/@zxing/library/esm/core/datamatrix/encoder/constants.js
var _a;
var FACTOR_SETS = [
  5,
  7,
  10,
  11,
  12,
  14,
  18,
  20,
  24,
  28,
  36,
  42,
  48,
  56,
  62,
  68
];
var FACTORS = [
  [228, 48, 15, 111, 62],
  [23, 68, 144, 134, 240, 92, 254],
  [28, 24, 185, 166, 223, 248, 116, 255, 110, 61],
  [175, 138, 205, 12, 194, 168, 39, 245, 60, 97, 120],
  [41, 153, 158, 91, 61, 42, 142, 213, 97, 178, 100, 242],
  [156, 97, 192, 252, 95, 9, 157, 119, 138, 45, 18, 186, 83, 185],
  [
    83,
    195,
    100,
    39,
    188,
    75,
    66,
    61,
    241,
    213,
    109,
    129,
    94,
    254,
    225,
    48,
    90,
    188
  ],
  [
    15,
    195,
    244,
    9,
    233,
    71,
    168,
    2,
    188,
    160,
    153,
    145,
    253,
    79,
    108,
    82,
    27,
    174,
    186,
    172
  ],
  [
    52,
    190,
    88,
    205,
    109,
    39,
    176,
    21,
    155,
    197,
    251,
    223,
    155,
    21,
    5,
    172,
    254,
    124,
    12,
    181,
    184,
    96,
    50,
    193
  ],
  [
    211,
    231,
    43,
    97,
    71,
    96,
    103,
    174,
    37,
    151,
    170,
    53,
    75,
    34,
    249,
    121,
    17,
    138,
    110,
    213,
    141,
    136,
    120,
    151,
    233,
    168,
    93,
    255
  ],
  [
    245,
    127,
    242,
    218,
    130,
    250,
    162,
    181,
    102,
    120,
    84,
    179,
    220,
    251,
    80,
    182,
    229,
    18,
    2,
    4,
    68,
    33,
    101,
    137,
    95,
    119,
    115,
    44,
    175,
    184,
    59,
    25,
    225,
    98,
    81,
    112
  ],
  [
    77,
    193,
    137,
    31,
    19,
    38,
    22,
    153,
    247,
    105,
    122,
    2,
    245,
    133,
    242,
    8,
    175,
    95,
    100,
    9,
    167,
    105,
    214,
    111,
    57,
    121,
    21,
    1,
    253,
    57,
    54,
    101,
    248,
    202,
    69,
    50,
    150,
    177,
    226,
    5,
    9,
    5
  ],
  [
    245,
    132,
    172,
    223,
    96,
    32,
    117,
    22,
    238,
    133,
    238,
    231,
    205,
    188,
    237,
    87,
    191,
    106,
    16,
    147,
    118,
    23,
    37,
    90,
    170,
    205,
    131,
    88,
    120,
    100,
    66,
    138,
    186,
    240,
    82,
    44,
    176,
    87,
    187,
    147,
    160,
    175,
    69,
    213,
    92,
    253,
    225,
    19
  ],
  [
    175,
    9,
    223,
    238,
    12,
    17,
    220,
    208,
    100,
    29,
    175,
    170,
    230,
    192,
    215,
    235,
    150,
    159,
    36,
    223,
    38,
    200,
    132,
    54,
    228,
    146,
    218,
    234,
    117,
    203,
    29,
    232,
    144,
    238,
    22,
    150,
    201,
    117,
    62,
    207,
    164,
    13,
    137,
    245,
    127,
    67,
    247,
    28,
    155,
    43,
    203,
    107,
    233,
    53,
    143,
    46
  ],
  [
    242,
    93,
    169,
    50,
    144,
    210,
    39,
    118,
    202,
    188,
    201,
    189,
    143,
    108,
    196,
    37,
    185,
    112,
    134,
    230,
    245,
    63,
    197,
    190,
    250,
    106,
    185,
    221,
    175,
    64,
    114,
    71,
    161,
    44,
    147,
    6,
    27,
    218,
    51,
    63,
    87,
    10,
    40,
    130,
    188,
    17,
    163,
    31,
    176,
    170,
    4,
    107,
    232,
    7,
    94,
    166,
    224,
    124,
    86,
    47,
    11,
    204
  ],
  [
    220,
    228,
    173,
    89,
    251,
    149,
    159,
    56,
    89,
    33,
    147,
    244,
    154,
    36,
    73,
    127,
    213,
    136,
    248,
    180,
    234,
    197,
    158,
    177,
    68,
    122,
    93,
    213,
    15,
    160,
    227,
    236,
    66,
    139,
    153,
    185,
    202,
    167,
    179,
    25,
    220,
    232,
    96,
    210,
    231,
    136,
    223,
    239,
    181,
    241,
    59,
    52,
    172,
    25,
    49,
    232,
    211,
    189,
    64,
    54,
    108,
    153,
    132,
    63,
    96,
    103,
    82,
    186
  ]
];
var MODULO_VALUE = 301;
var static_LOG = function(LOG2, ALOG2) {
  var p = 1;
  for (var i = 0; i < 255; i++) {
    ALOG2[i] = p;
    LOG2[p] = i;
    p *= 2;
    if (p >= 256) {
      p ^= MODULO_VALUE;
    }
  }
  return {
    LOG: LOG2,
    ALOG: ALOG2
  };
};
var LOG = (_a = static_LOG([], []), _a.LOG);
var ALOG = _a.ALOG;
var SymbolShapeHint;
(function(SymbolShapeHint2) {
  SymbolShapeHint2[SymbolShapeHint2["FORCE_NONE"] = 0] = "FORCE_NONE";
  SymbolShapeHint2[SymbolShapeHint2["FORCE_SQUARE"] = 1] = "FORCE_SQUARE";
  SymbolShapeHint2[SymbolShapeHint2["FORCE_RECTANGLE"] = 2] = "FORCE_RECTANGLE";
})(SymbolShapeHint || (SymbolShapeHint = {}));
var PAD = 129;
var LATCH_TO_C40 = 230;
var LATCH_TO_BASE256 = 231;
var UPPER_SHIFT = 235;
var MACRO_05 = 236;
var MACRO_06 = 237;
var LATCH_TO_ANSIX12 = 238;
var LATCH_TO_TEXT = 239;
var LATCH_TO_EDIFACT = 240;
var C40_UNLATCH = 254;
var X12_UNLATCH = 254;
var MACRO_05_HEADER = "[)>05";
var MACRO_06_HEADER = "[)>06";
var MACRO_TRAILER = "";
var ASCII_ENCODATION = 0;
var C40_ENCODATION = 1;
var TEXT_ENCODATION = 2;
var X12_ENCODATION = 3;
var EDIFACT_ENCODATION = 4;
var BASE256_ENCODATION = 5;

// node_modules/@zxing/library/esm/core/datamatrix/encoder/ErrorCorrection.js
var ErrorCorrection2 = (
  /** @class */
  function() {
    function ErrorCorrection3() {
    }
    ErrorCorrection3.encodeECC200 = function(codewords, symbolInfo) {
      if (codewords.length !== symbolInfo.getDataCapacity()) {
        throw new Error("The number of codewords does not match the selected symbol");
      }
      var sb = new StringBuilder_default();
      sb.append(codewords);
      var blockCount = symbolInfo.getInterleavedBlockCount();
      if (blockCount === 1) {
        var ecc = this.createECCBlock(codewords, symbolInfo.getErrorCodewords());
        sb.append(ecc);
      } else {
        var dataSizes = [];
        var errorSizes = [];
        for (var i = 0; i < blockCount; i++) {
          dataSizes[i] = symbolInfo.getDataLengthForInterleavedBlock(i + 1);
          errorSizes[i] = symbolInfo.getErrorLengthForInterleavedBlock(i + 1);
        }
        for (var block = 0; block < blockCount; block++) {
          var temp = new StringBuilder_default();
          for (var d = block; d < symbolInfo.getDataCapacity(); d += blockCount) {
            temp.append(codewords.charAt(d));
          }
          var ecc = this.createECCBlock(temp.toString(), errorSizes[block]);
          var pos = 0;
          for (var e = block; e < errorSizes[block] * blockCount; e += blockCount) {
            sb.setCharAt(symbolInfo.getDataCapacity() + e, ecc.charAt(pos++));
          }
        }
      }
      return sb.toString();
    };
    ErrorCorrection3.createECCBlock = function(codewords, numECWords) {
      var table = -1;
      for (var i = 0; i < FACTOR_SETS.length; i++) {
        if (FACTOR_SETS[i] === numECWords) {
          table = i;
          break;
        }
      }
      if (table < 0) {
        throw new Error("Illegal number of error correction codewords specified: " + numECWords);
      }
      var poly = FACTORS[table];
      var ecc = [];
      for (var i = 0; i < numECWords; i++) {
        ecc[i] = 0;
      }
      for (var i = 0; i < codewords.length; i++) {
        var m = ecc[numECWords - 1] ^ codewords.charAt(i).charCodeAt(0);
        for (var k = numECWords - 1; k > 0; k--) {
          if (m !== 0 && poly[k] !== 0) {
            ecc[k] = ecc[k - 1] ^ ALOG[(LOG[m] + LOG[poly[k]]) % 255];
          } else {
            ecc[k] = ecc[k - 1];
          }
        }
        if (m !== 0 && poly[0] !== 0) {
          ecc[0] = ALOG[(LOG[m] + LOG[poly[0]]) % 255];
        } else {
          ecc[0] = 0;
        }
      }
      var eccReversed = [];
      for (var i = 0; i < numECWords; i++) {
        eccReversed[i] = ecc[numECWords - i - 1];
      }
      return eccReversed.map(function(c) {
        return String.fromCharCode(c);
      }).join("");
    };
    return ErrorCorrection3;
  }()
);
var ErrorCorrection_default2 = ErrorCorrection2;

// node_modules/@zxing/library/esm/core/datamatrix/encoder/ASCIIEncoder.js
var ASCIIEncoder = (
  /** @class */
  function() {
    function ASCIIEncoder2() {
    }
    ASCIIEncoder2.prototype.getEncodingMode = function() {
      return ASCII_ENCODATION;
    };
    ASCIIEncoder2.prototype.encode = function(context) {
      var n = HighLevelEncoder_default.determineConsecutiveDigitCount(context.getMessage(), context.pos);
      if (n >= 2) {
        context.writeCodeword(this.encodeASCIIDigits(context.getMessage().charCodeAt(context.pos), context.getMessage().charCodeAt(context.pos + 1)));
        context.pos += 2;
      } else {
        var c = context.getCurrentChar();
        var newMode = HighLevelEncoder_default.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());
        if (newMode !== this.getEncodingMode()) {
          switch (newMode) {
            case BASE256_ENCODATION:
              context.writeCodeword(LATCH_TO_BASE256);
              context.signalEncoderChange(BASE256_ENCODATION);
              return;
            case C40_ENCODATION:
              context.writeCodeword(LATCH_TO_C40);
              context.signalEncoderChange(C40_ENCODATION);
              return;
            case X12_ENCODATION:
              context.writeCodeword(LATCH_TO_ANSIX12);
              context.signalEncoderChange(X12_ENCODATION);
              break;
            case TEXT_ENCODATION:
              context.writeCodeword(LATCH_TO_TEXT);
              context.signalEncoderChange(TEXT_ENCODATION);
              break;
            case EDIFACT_ENCODATION:
              context.writeCodeword(LATCH_TO_EDIFACT);
              context.signalEncoderChange(EDIFACT_ENCODATION);
              break;
            default:
              throw new Error("Illegal mode: " + newMode);
          }
        } else if (HighLevelEncoder_default.isExtendedASCII(c)) {
          context.writeCodeword(UPPER_SHIFT);
          context.writeCodeword(c - 128 + 1);
          context.pos++;
        } else {
          context.writeCodeword(c + 1);
          context.pos++;
        }
      }
    };
    ASCIIEncoder2.prototype.encodeASCIIDigits = function(digit1, digit2) {
      if (HighLevelEncoder_default.isDigit(digit1) && HighLevelEncoder_default.isDigit(digit2)) {
        var num = (digit1 - 48) * 10 + (digit2 - 48);
        return num + 130;
      }
      throw new Error("not digits: " + digit1 + digit2);
    };
    return ASCIIEncoder2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/Base256Encoder.js
var Base256Encoder = (
  /** @class */
  function() {
    function Base256Encoder2() {
    }
    Base256Encoder2.prototype.getEncodingMode = function() {
      return BASE256_ENCODATION;
    };
    Base256Encoder2.prototype.encode = function(context) {
      var buffer = new StringBuilder_default();
      buffer.append(0);
      while (context.hasMoreCharacters()) {
        var c = context.getCurrentChar();
        buffer.append(c);
        context.pos++;
        var newMode = HighLevelEncoder_default.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());
        if (newMode !== this.getEncodingMode()) {
          context.signalEncoderChange(ASCII_ENCODATION);
          break;
        }
      }
      var dataCount = buffer.length() - 1;
      var lengthFieldSize = 1;
      var currentSize = context.getCodewordCount() + dataCount + lengthFieldSize;
      context.updateSymbolInfo(currentSize);
      var mustPad = context.getSymbolInfo().getDataCapacity() - currentSize > 0;
      if (context.hasMoreCharacters() || mustPad) {
        if (dataCount <= 249) {
          buffer.setCharAt(0, StringUtils_default.getCharAt(dataCount));
        } else if (dataCount <= 1555) {
          buffer.setCharAt(0, StringUtils_default.getCharAt(Math.floor(dataCount / 250) + 249));
          buffer.insert(1, StringUtils_default.getCharAt(dataCount % 250));
        } else {
          throw new Error("Message length not in valid ranges: " + dataCount);
        }
      }
      for (var i = 0, c = buffer.length(); i < c; i++) {
        context.writeCodeword(this.randomize255State(buffer.charAt(i).charCodeAt(0), context.getCodewordCount() + 1));
      }
    };
    Base256Encoder2.prototype.randomize255State = function(ch, codewordPosition) {
      var pseudoRandom = 149 * codewordPosition % 255 + 1;
      var tempVariable = ch + pseudoRandom;
      if (tempVariable <= 255) {
        return tempVariable;
      } else {
        return tempVariable - 256;
      }
    };
    return Base256Encoder2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/C40Encoder.js
var C40Encoder = (
  /** @class */
  function() {
    function C40Encoder2() {
    }
    C40Encoder2.prototype.getEncodingMode = function() {
      return C40_ENCODATION;
    };
    C40Encoder2.prototype.encodeMaximal = function(context) {
      var buffer = new StringBuilder_default();
      var lastCharSize = 0;
      var backtrackStartPosition = context.pos;
      var backtrackBufferLength = 0;
      while (context.hasMoreCharacters()) {
        var c = context.getCurrentChar();
        context.pos++;
        lastCharSize = this.encodeChar(c, buffer);
        if (buffer.length() % 3 === 0) {
          backtrackStartPosition = context.pos;
          backtrackBufferLength = buffer.length();
        }
      }
      if (backtrackBufferLength !== buffer.length()) {
        var unwritten = Math.floor(buffer.length() / 3 * 2);
        var curCodewordCount = Math.floor(context.getCodewordCount() + unwritten + 1);
        context.updateSymbolInfo(curCodewordCount);
        var available = context.getSymbolInfo().getDataCapacity() - curCodewordCount;
        var rest = Math.floor(buffer.length() % 3);
        if (rest === 2 && available !== 2 || rest === 1 && (lastCharSize > 3 || available !== 1)) {
          context.pos = backtrackStartPosition;
        }
      }
      if (buffer.length() > 0) {
        context.writeCodeword(LATCH_TO_C40);
      }
      this.handleEOD(context, buffer);
    };
    C40Encoder2.prototype.encode = function(context) {
      var buffer = new StringBuilder_default();
      while (context.hasMoreCharacters()) {
        var c = context.getCurrentChar();
        context.pos++;
        var lastCharSize = this.encodeChar(c, buffer);
        var unwritten = Math.floor(buffer.length() / 3) * 2;
        var curCodewordCount = context.getCodewordCount() + unwritten;
        context.updateSymbolInfo(curCodewordCount);
        var available = context.getSymbolInfo().getDataCapacity() - curCodewordCount;
        if (!context.hasMoreCharacters()) {
          var removed = new StringBuilder_default();
          if (buffer.length() % 3 === 2 && available !== 2) {
            lastCharSize = this.backtrackOneCharacter(context, buffer, removed, lastCharSize);
          }
          while (buffer.length() % 3 === 1 && (lastCharSize > 3 || available !== 1)) {
            lastCharSize = this.backtrackOneCharacter(context, buffer, removed, lastCharSize);
          }
          break;
        }
        var count = buffer.length();
        if (count % 3 === 0) {
          var newMode = HighLevelEncoder_default.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());
          if (newMode !== this.getEncodingMode()) {
            context.signalEncoderChange(ASCII_ENCODATION);
            break;
          }
        }
      }
      this.handleEOD(context, buffer);
    };
    C40Encoder2.prototype.backtrackOneCharacter = function(context, buffer, removed, lastCharSize) {
      var count = buffer.length();
      var test = buffer.toString().substring(0, count - lastCharSize);
      buffer.setLengthToZero();
      buffer.append(test);
      context.pos--;
      var c = context.getCurrentChar();
      lastCharSize = this.encodeChar(c, removed);
      context.resetSymbolInfo();
      return lastCharSize;
    };
    C40Encoder2.prototype.writeNextTriplet = function(context, buffer) {
      context.writeCodewords(this.encodeToCodewords(buffer.toString()));
      var test = buffer.toString().substring(3);
      buffer.setLengthToZero();
      buffer.append(test);
    };
    C40Encoder2.prototype.handleEOD = function(context, buffer) {
      var unwritten = Math.floor(buffer.length() / 3 * 2);
      var rest = buffer.length() % 3;
      var curCodewordCount = context.getCodewordCount() + unwritten;
      context.updateSymbolInfo(curCodewordCount);
      var available = context.getSymbolInfo().getDataCapacity() - curCodewordCount;
      if (rest === 2) {
        buffer.append("\0");
        while (buffer.length() >= 3) {
          this.writeNextTriplet(context, buffer);
        }
        if (context.hasMoreCharacters()) {
          context.writeCodeword(C40_UNLATCH);
        }
      } else if (available === 1 && rest === 1) {
        while (buffer.length() >= 3) {
          this.writeNextTriplet(context, buffer);
        }
        if (context.hasMoreCharacters()) {
          context.writeCodeword(C40_UNLATCH);
        }
        context.pos--;
      } else if (rest === 0) {
        while (buffer.length() >= 3) {
          this.writeNextTriplet(context, buffer);
        }
        if (available > 0 || context.hasMoreCharacters()) {
          context.writeCodeword(C40_UNLATCH);
        }
      } else {
        throw new Error("Unexpected case. Please report!");
      }
      context.signalEncoderChange(ASCII_ENCODATION);
    };
    C40Encoder2.prototype.encodeChar = function(c, sb) {
      if (c === " ".charCodeAt(0)) {
        sb.append(3);
        return 1;
      }
      if (c >= "0".charCodeAt(0) && c <= "9".charCodeAt(0)) {
        sb.append(c - 48 + 4);
        return 1;
      }
      if (c >= "A".charCodeAt(0) && c <= "Z".charCodeAt(0)) {
        sb.append(c - 65 + 14);
        return 1;
      }
      if (c < " ".charCodeAt(0)) {
        sb.append(0);
        sb.append(c);
        return 2;
      }
      if (c <= "/".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 33);
        return 2;
      }
      if (c <= "@".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 58 + 15);
        return 2;
      }
      if (c <= "_".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 91 + 22);
        return 2;
      }
      if (c <= 127) {
        sb.append(2);
        sb.append(c - 96);
        return 2;
      }
      sb.append("1");
      var len = 2;
      len += this.encodeChar(c - 128, sb);
      return len;
    };
    C40Encoder2.prototype.encodeToCodewords = function(sb) {
      var v = 1600 * sb.charCodeAt(0) + 40 * sb.charCodeAt(1) + sb.charCodeAt(2) + 1;
      var cw1 = v / 256;
      var cw2 = v % 256;
      var result = new StringBuilder_default();
      result.append(cw1);
      result.append(cw2);
      return result.toString();
    };
    return C40Encoder2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/EdifactEncoder.js
var EdifactEncoder = (
  /** @class */
  function() {
    function EdifactEncoder2() {
    }
    EdifactEncoder2.prototype.getEncodingMode = function() {
      return EDIFACT_ENCODATION;
    };
    EdifactEncoder2.prototype.encode = function(context) {
      var buffer = new StringBuilder_default();
      while (context.hasMoreCharacters()) {
        var c = context.getCurrentChar();
        this.encodeChar(c, buffer);
        context.pos++;
        var count = buffer.length();
        if (count >= 4) {
          context.writeCodewords(this.encodeToCodewords(buffer.toString()));
          var test_1 = buffer.toString().substring(4);
          buffer.setLengthToZero();
          buffer.append(test_1);
          var newMode = HighLevelEncoder_default.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());
          if (newMode !== this.getEncodingMode()) {
            context.signalEncoderChange(ASCII_ENCODATION);
            break;
          }
        }
      }
      buffer.append(StringUtils_default.getCharAt(31));
      this.handleEOD(context, buffer);
    };
    EdifactEncoder2.prototype.handleEOD = function(context, buffer) {
      try {
        var count = buffer.length();
        if (count === 0) {
          return;
        }
        if (count === 1) {
          context.updateSymbolInfo();
          var available = context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();
          var remaining = context.getRemainingCharacters();
          if (remaining > available) {
            context.updateSymbolInfo(context.getCodewordCount() + 1);
            available = context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();
          }
          if (remaining <= available && available <= 2) {
            return;
          }
        }
        if (count > 4) {
          throw new Error("Count must not exceed 4");
        }
        var restChars = count - 1;
        var encoded = this.encodeToCodewords(buffer.toString());
        var endOfSymbolReached = !context.hasMoreCharacters();
        var restInAscii = endOfSymbolReached && restChars <= 2;
        if (restChars <= 2) {
          context.updateSymbolInfo(context.getCodewordCount() + restChars);
          var available = context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();
          if (available >= 3) {
            restInAscii = false;
            context.updateSymbolInfo(context.getCodewordCount() + encoded.length);
          }
        }
        if (restInAscii) {
          context.resetSymbolInfo();
          context.pos -= restChars;
        } else {
          context.writeCodewords(encoded);
        }
      } finally {
        context.signalEncoderChange(ASCII_ENCODATION);
      }
    };
    EdifactEncoder2.prototype.encodeChar = function(c, sb) {
      if (c >= " ".charCodeAt(0) && c <= "?".charCodeAt(0)) {
        sb.append(c);
      } else if (c >= "@".charCodeAt(0) && c <= "^".charCodeAt(0)) {
        sb.append(StringUtils_default.getCharAt(c - 64));
      } else {
        HighLevelEncoder_default.illegalCharacter(StringUtils_default.getCharAt(c));
      }
    };
    EdifactEncoder2.prototype.encodeToCodewords = function(sb) {
      var len = sb.length;
      if (len === 0) {
        throw new Error("StringBuilder must not be empty");
      }
      var c1 = sb.charAt(0).charCodeAt(0);
      var c2 = len >= 2 ? sb.charAt(1).charCodeAt(0) : 0;
      var c3 = len >= 3 ? sb.charAt(2).charCodeAt(0) : 0;
      var c4 = len >= 4 ? sb.charAt(3).charCodeAt(0) : 0;
      var v = (c1 << 18) + (c2 << 12) + (c3 << 6) + c4;
      var cw1 = v >> 16 & 255;
      var cw2 = v >> 8 & 255;
      var cw3 = v & 255;
      var res = new StringBuilder_default();
      res.append(cw1);
      if (len >= 2) {
        res.append(cw2);
      }
      if (len >= 3) {
        res.append(cw3);
      }
      return res.toString();
    };
    return EdifactEncoder2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/SymbolInfo.js
var __extends69 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values41 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var SymbolInfo = (
  /** @class */
  function() {
    function SymbolInfo2(rectangular, dataCapacity, errorCodewords, matrixWidth, matrixHeight, dataRegions, rsBlockData, rsBlockError) {
      if (rsBlockData === void 0) {
        rsBlockData = 0;
      }
      if (rsBlockError === void 0) {
        rsBlockError = 0;
      }
      this.rectangular = rectangular;
      this.dataCapacity = dataCapacity;
      this.errorCodewords = errorCodewords;
      this.matrixWidth = matrixWidth;
      this.matrixHeight = matrixHeight;
      this.dataRegions = dataRegions;
      this.rsBlockData = rsBlockData;
      this.rsBlockError = rsBlockError;
    }
    SymbolInfo2.lookup = function(dataCodewords, shape, minSize, maxSize, fail) {
      var e_1, _a2;
      if (shape === void 0) {
        shape = 0;
      }
      if (minSize === void 0) {
        minSize = null;
      }
      if (maxSize === void 0) {
        maxSize = null;
      }
      if (fail === void 0) {
        fail = true;
      }
      try {
        for (var PROD_SYMBOLS_1 = __values41(PROD_SYMBOLS), PROD_SYMBOLS_1_1 = PROD_SYMBOLS_1.next(); !PROD_SYMBOLS_1_1.done; PROD_SYMBOLS_1_1 = PROD_SYMBOLS_1.next()) {
          var symbol = PROD_SYMBOLS_1_1.value;
          if (shape === 1 && symbol.rectangular) {
            continue;
          }
          if (shape === 2 && !symbol.rectangular) {
            continue;
          }
          if (minSize != null && (symbol.getSymbolWidth() < minSize.getWidth() || symbol.getSymbolHeight() < minSize.getHeight())) {
            continue;
          }
          if (maxSize != null && (symbol.getSymbolWidth() > maxSize.getWidth() || symbol.getSymbolHeight() > maxSize.getHeight())) {
            continue;
          }
          if (dataCodewords <= symbol.dataCapacity) {
            return symbol;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (PROD_SYMBOLS_1_1 && !PROD_SYMBOLS_1_1.done && (_a2 = PROD_SYMBOLS_1.return)) _a2.call(PROD_SYMBOLS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (fail) {
        throw new Error("Can't find a symbol arrangement that matches the message. Data codewords: " + dataCodewords);
      }
      return null;
    };
    SymbolInfo2.prototype.getHorizontalDataRegions = function() {
      switch (this.dataRegions) {
        case 1:
          return 1;
        case 2:
        case 4:
          return 2;
        case 16:
          return 4;
        case 36:
          return 6;
        default:
          throw new Error("Cannot handle this number of data regions");
      }
    };
    SymbolInfo2.prototype.getVerticalDataRegions = function() {
      switch (this.dataRegions) {
        case 1:
        case 2:
          return 1;
        case 4:
          return 2;
        case 16:
          return 4;
        case 36:
          return 6;
        default:
          throw new Error("Cannot handle this number of data regions");
      }
    };
    SymbolInfo2.prototype.getSymbolDataWidth = function() {
      return this.getHorizontalDataRegions() * this.matrixWidth;
    };
    SymbolInfo2.prototype.getSymbolDataHeight = function() {
      return this.getVerticalDataRegions() * this.matrixHeight;
    };
    SymbolInfo2.prototype.getSymbolWidth = function() {
      return this.getSymbolDataWidth() + this.getHorizontalDataRegions() * 2;
    };
    SymbolInfo2.prototype.getSymbolHeight = function() {
      return this.getSymbolDataHeight() + this.getVerticalDataRegions() * 2;
    };
    SymbolInfo2.prototype.getCodewordCount = function() {
      return this.dataCapacity + this.errorCodewords;
    };
    SymbolInfo2.prototype.getInterleavedBlockCount = function() {
      if (!this.rsBlockData)
        return 1;
      return this.dataCapacity / this.rsBlockData;
    };
    SymbolInfo2.prototype.getDataCapacity = function() {
      return this.dataCapacity;
    };
    SymbolInfo2.prototype.getErrorCodewords = function() {
      return this.errorCodewords;
    };
    SymbolInfo2.prototype.getDataLengthForInterleavedBlock = function(index) {
      return this.rsBlockData;
    };
    SymbolInfo2.prototype.getErrorLengthForInterleavedBlock = function(index) {
      return this.rsBlockError;
    };
    return SymbolInfo2;
  }()
);
var SymbolInfo_default = SymbolInfo;
var DataMatrixSymbolInfo144 = (
  /** @class */
  function(_super) {
    __extends69(DataMatrixSymbolInfo1442, _super);
    function DataMatrixSymbolInfo1442() {
      return _super.call(this, false, 1558, 620, 22, 22, 36, -1, 62) || this;
    }
    DataMatrixSymbolInfo1442.prototype.getInterleavedBlockCount = function() {
      return 10;
    };
    DataMatrixSymbolInfo1442.prototype.getDataLengthForInterleavedBlock = function(index) {
      return index <= 8 ? 156 : 155;
    };
    return DataMatrixSymbolInfo1442;
  }(SymbolInfo)
);
var PROD_SYMBOLS = [
  new SymbolInfo(false, 3, 5, 8, 8, 1),
  new SymbolInfo(false, 5, 7, 10, 10, 1),
  /*rect*/
  new SymbolInfo(true, 5, 7, 16, 6, 1),
  new SymbolInfo(false, 8, 10, 12, 12, 1),
  /*rect*/
  new SymbolInfo(true, 10, 11, 14, 6, 2),
  new SymbolInfo(false, 12, 12, 14, 14, 1),
  /*rect*/
  new SymbolInfo(true, 16, 14, 24, 10, 1),
  new SymbolInfo(false, 18, 14, 16, 16, 1),
  new SymbolInfo(false, 22, 18, 18, 18, 1),
  /*rect*/
  new SymbolInfo(true, 22, 18, 16, 10, 2),
  new SymbolInfo(false, 30, 20, 20, 20, 1),
  /*rect*/
  new SymbolInfo(true, 32, 24, 16, 14, 2),
  new SymbolInfo(false, 36, 24, 22, 22, 1),
  new SymbolInfo(false, 44, 28, 24, 24, 1),
  /*rect*/
  new SymbolInfo(true, 49, 28, 22, 14, 2),
  new SymbolInfo(false, 62, 36, 14, 14, 4),
  new SymbolInfo(false, 86, 42, 16, 16, 4),
  new SymbolInfo(false, 114, 48, 18, 18, 4),
  new SymbolInfo(false, 144, 56, 20, 20, 4),
  new SymbolInfo(false, 174, 68, 22, 22, 4),
  new SymbolInfo(false, 204, 84, 24, 24, 4, 102, 42),
  new SymbolInfo(false, 280, 112, 14, 14, 16, 140, 56),
  new SymbolInfo(false, 368, 144, 16, 16, 16, 92, 36),
  new SymbolInfo(false, 456, 192, 18, 18, 16, 114, 48),
  new SymbolInfo(false, 576, 224, 20, 20, 16, 144, 56),
  new SymbolInfo(false, 696, 272, 22, 22, 16, 174, 68),
  new SymbolInfo(false, 816, 336, 24, 24, 16, 136, 56),
  new SymbolInfo(false, 1050, 408, 18, 18, 36, 175, 68),
  new SymbolInfo(false, 1304, 496, 20, 20, 36, 163, 62),
  new DataMatrixSymbolInfo144()
];

// node_modules/@zxing/library/esm/core/datamatrix/encoder/EncoderContext.js
var EncoderContext = (
  /** @class */
  function() {
    function EncoderContext2(msg) {
      this.msg = msg;
      this.pos = 0;
      this.skipAtEnd = 0;
      var msgBinary = msg.split("").map(function(c2) {
        return c2.charCodeAt(0);
      });
      var sb = new StringBuilder_default();
      for (var i = 0, c = msgBinary.length; i < c; i++) {
        var ch = String.fromCharCode(msgBinary[i] & 255);
        if (ch === "?" && msg.charAt(i) !== "?") {
          throw new Error("Message contains characters outside ISO-8859-1 encoding.");
        }
        sb.append(ch);
      }
      this.msg = sb.toString();
      this.shape = 0;
      this.codewords = new StringBuilder_default();
      this.newEncoding = -1;
    }
    EncoderContext2.prototype.setSymbolShape = function(shape) {
      this.shape = shape;
    };
    EncoderContext2.prototype.setSizeConstraints = function(minSize, maxSize) {
      this.minSize = minSize;
      this.maxSize = maxSize;
    };
    EncoderContext2.prototype.getMessage = function() {
      return this.msg;
    };
    EncoderContext2.prototype.setSkipAtEnd = function(count) {
      this.skipAtEnd = count;
    };
    EncoderContext2.prototype.getCurrentChar = function() {
      return this.msg.charCodeAt(this.pos);
    };
    EncoderContext2.prototype.getCurrent = function() {
      return this.msg.charCodeAt(this.pos);
    };
    EncoderContext2.prototype.getCodewords = function() {
      return this.codewords;
    };
    EncoderContext2.prototype.writeCodewords = function(codewords) {
      this.codewords.append(codewords);
    };
    EncoderContext2.prototype.writeCodeword = function(codeword) {
      this.codewords.append(codeword);
    };
    EncoderContext2.prototype.getCodewordCount = function() {
      return this.codewords.length();
    };
    EncoderContext2.prototype.getNewEncoding = function() {
      return this.newEncoding;
    };
    EncoderContext2.prototype.signalEncoderChange = function(encoding) {
      this.newEncoding = encoding;
    };
    EncoderContext2.prototype.resetEncoderSignal = function() {
      this.newEncoding = -1;
    };
    EncoderContext2.prototype.hasMoreCharacters = function() {
      return this.pos < this.getTotalMessageCharCount();
    };
    EncoderContext2.prototype.getTotalMessageCharCount = function() {
      return this.msg.length - this.skipAtEnd;
    };
    EncoderContext2.prototype.getRemainingCharacters = function() {
      return this.getTotalMessageCharCount() - this.pos;
    };
    EncoderContext2.prototype.getSymbolInfo = function() {
      return this.symbolInfo;
    };
    EncoderContext2.prototype.updateSymbolInfo = function(len) {
      if (len === void 0) {
        len = this.getCodewordCount();
      }
      if (this.symbolInfo == null || len > this.symbolInfo.getDataCapacity()) {
        this.symbolInfo = SymbolInfo_default.lookup(len, this.shape, this.minSize, this.maxSize, true);
      }
    };
    EncoderContext2.prototype.resetSymbolInfo = function() {
      this.symbolInfo = null;
    };
    return EncoderContext2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/X12Encoder.js
var __extends70 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var X12Encoder = (
  /** @class */
  function(_super) {
    __extends70(X12Encoder2, _super);
    function X12Encoder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    X12Encoder2.prototype.getEncodingMode = function() {
      return X12_ENCODATION;
    };
    X12Encoder2.prototype.encode = function(context) {
      var buffer = new StringBuilder_default();
      while (context.hasMoreCharacters()) {
        var c = context.getCurrentChar();
        context.pos++;
        this.encodeChar(c, buffer);
        var count = buffer.length();
        if (count % 3 === 0) {
          this.writeNextTriplet(context, buffer);
          var newMode = HighLevelEncoder_default.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());
          if (newMode !== this.getEncodingMode()) {
            context.signalEncoderChange(ASCII_ENCODATION);
            break;
          }
        }
      }
      this.handleEOD(context, buffer);
    };
    X12Encoder2.prototype.encodeChar = function(c, sb) {
      switch (c) {
        case 13:
          sb.append(0);
          break;
        case "*".charCodeAt(0):
          sb.append(1);
          break;
        case ">".charCodeAt(0):
          sb.append(2);
          break;
        case " ".charCodeAt(0):
          sb.append(3);
          break;
        default:
          if (c >= "0".charCodeAt(0) && c <= "9".charCodeAt(0)) {
            sb.append(c - 48 + 4);
          } else if (c >= "A".charCodeAt(0) && c <= "Z".charCodeAt(0)) {
            sb.append(c - 65 + 14);
          } else {
            HighLevelEncoder_default.illegalCharacter(StringUtils_default.getCharAt(c));
          }
          break;
      }
      return 1;
    };
    X12Encoder2.prototype.handleEOD = function(context, buffer) {
      context.updateSymbolInfo();
      var available = context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();
      var count = buffer.length();
      context.pos -= count;
      if (context.getRemainingCharacters() > 1 || available > 1 || context.getRemainingCharacters() !== available) {
        context.writeCodeword(X12_UNLATCH);
      }
      if (context.getNewEncoding() < 0) {
        context.signalEncoderChange(ASCII_ENCODATION);
      }
    };
    return X12Encoder2;
  }(C40Encoder)
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/TextEncoder.js
var __extends71 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextEncoder2 = (
  /** @class */
  function(_super) {
    __extends71(TextEncoder3, _super);
    function TextEncoder3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TextEncoder3.prototype.getEncodingMode = function() {
      return TEXT_ENCODATION;
    };
    TextEncoder3.prototype.encodeChar = function(c, sb) {
      if (c === " ".charCodeAt(0)) {
        sb.append(3);
        return 1;
      }
      if (c >= "0".charCodeAt(0) && c <= "9".charCodeAt(0)) {
        sb.append(c - 48 + 4);
        return 1;
      }
      if (c >= "a".charCodeAt(0) && c <= "z".charCodeAt(0)) {
        sb.append(c - 97 + 14);
        return 1;
      }
      if (c < " ".charCodeAt(0)) {
        sb.append(0);
        sb.append(c);
        return 2;
      }
      if (c <= "/".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 33);
        return 2;
      }
      if (c <= "@".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 58 + 15);
        return 2;
      }
      if (c >= "[".charCodeAt(0) && c <= "_".charCodeAt(0)) {
        sb.append(1);
        sb.append(c - 91 + 22);
        return 2;
      }
      if (c === "`".charCodeAt(0)) {
        sb.append(2);
        sb.append(0);
        return 2;
      }
      if (c <= "Z".charCodeAt(0)) {
        sb.append(2);
        sb.append(c - 65 + 1);
        return 2;
      }
      if (c <= 127) {
        sb.append(2);
        sb.append(c - 123 + 27);
        return 2;
      }
      sb.append("1");
      var len = 2;
      len += this.encodeChar(c - 128, sb);
      return len;
    };
    return TextEncoder3;
  }(C40Encoder)
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/HighLevelEncoder.js
var HighLevelEncoder = (
  /** @class */
  function() {
    function HighLevelEncoder3() {
    }
    HighLevelEncoder3.randomize253State = function(codewordPosition) {
      var pseudoRandom = 149 * codewordPosition % 253 + 1;
      var tempVariable = PAD + pseudoRandom;
      return tempVariable <= 254 ? tempVariable : tempVariable - 254;
    };
    HighLevelEncoder3.encodeHighLevel = function(msg, shape, minSize, maxSize, forceC40) {
      if (shape === void 0) {
        shape = 0;
      }
      if (minSize === void 0) {
        minSize = null;
      }
      if (maxSize === void 0) {
        maxSize = null;
      }
      if (forceC40 === void 0) {
        forceC40 = false;
      }
      var c40Encoder = new C40Encoder();
      var encoders = [
        new ASCIIEncoder(),
        c40Encoder,
        new TextEncoder2(),
        new X12Encoder(),
        new EdifactEncoder(),
        new Base256Encoder()
      ];
      var context = new EncoderContext(msg);
      context.setSymbolShape(shape);
      context.setSizeConstraints(minSize, maxSize);
      if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {
        context.writeCodeword(MACRO_05);
        context.setSkipAtEnd(2);
        context.pos += MACRO_05_HEADER.length;
      } else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {
        context.writeCodeword(MACRO_06);
        context.setSkipAtEnd(2);
        context.pos += MACRO_06_HEADER.length;
      }
      var encodingMode = ASCII_ENCODATION;
      if (forceC40) {
        c40Encoder.encodeMaximal(context);
        encodingMode = context.getNewEncoding();
        context.resetEncoderSignal();
      }
      while (context.hasMoreCharacters()) {
        encoders[encodingMode].encode(context);
        if (context.getNewEncoding() >= 0) {
          encodingMode = context.getNewEncoding();
          context.resetEncoderSignal();
        }
      }
      var len = context.getCodewordCount();
      context.updateSymbolInfo();
      var capacity = context.getSymbolInfo().getDataCapacity();
      if (len < capacity && encodingMode !== ASCII_ENCODATION && encodingMode !== BASE256_ENCODATION && encodingMode !== EDIFACT_ENCODATION) {
        context.writeCodeword("\xFE");
      }
      var codewords = context.getCodewords();
      if (codewords.length() < capacity) {
        codewords.append(PAD);
      }
      while (codewords.length() < capacity) {
        codewords.append(this.randomize253State(codewords.length() + 1));
      }
      return context.getCodewords().toString();
    };
    HighLevelEncoder3.lookAheadTest = function(msg, startpos, currentMode) {
      var newMode = this.lookAheadTestIntern(msg, startpos, currentMode);
      if (currentMode === X12_ENCODATION && newMode === X12_ENCODATION) {
        var endpos = Math.min(startpos + 3, msg.length);
        for (var i = startpos; i < endpos; i++) {
          if (!this.isNativeX12(msg.charCodeAt(i))) {
            return ASCII_ENCODATION;
          }
        }
      } else if (currentMode === EDIFACT_ENCODATION && newMode === EDIFACT_ENCODATION) {
        var endpos = Math.min(startpos + 4, msg.length);
        for (var i = startpos; i < endpos; i++) {
          if (!this.isNativeEDIFACT(msg.charCodeAt(i))) {
            return ASCII_ENCODATION;
          }
        }
      }
      return newMode;
    };
    HighLevelEncoder3.lookAheadTestIntern = function(msg, startpos, currentMode) {
      if (startpos >= msg.length) {
        return currentMode;
      }
      var charCounts;
      if (currentMode === ASCII_ENCODATION) {
        charCounts = [0, 1, 1, 1, 1, 1.25];
      } else {
        charCounts = [1, 2, 2, 2, 2, 2.25];
        charCounts[currentMode] = 0;
      }
      var charsProcessed = 0;
      var mins = new Uint8Array(6);
      var intCharCounts = [];
      while (true) {
        if (startpos + charsProcessed === msg.length) {
          Arrays_default.fill(mins, 0);
          Arrays_default.fill(intCharCounts, 0);
          var min = this.findMinimums(charCounts, intCharCounts, Integer_default.MAX_VALUE, mins);
          var minCount = this.getMinimumCount(mins);
          if (intCharCounts[ASCII_ENCODATION] === min) {
            return ASCII_ENCODATION;
          }
          if (minCount === 1) {
            if (mins[BASE256_ENCODATION] > 0) {
              return BASE256_ENCODATION;
            }
            if (mins[EDIFACT_ENCODATION] > 0) {
              return EDIFACT_ENCODATION;
            }
            if (mins[TEXT_ENCODATION] > 0) {
              return TEXT_ENCODATION;
            }
            if (mins[X12_ENCODATION] > 0) {
              return X12_ENCODATION;
            }
          }
          return C40_ENCODATION;
        }
        var c = msg.charCodeAt(startpos + charsProcessed);
        charsProcessed++;
        if (this.isDigit(c)) {
          charCounts[ASCII_ENCODATION] += 0.5;
        } else if (this.isExtendedASCII(c)) {
          charCounts[ASCII_ENCODATION] = Math.ceil(charCounts[ASCII_ENCODATION]);
          charCounts[ASCII_ENCODATION] += 2;
        } else {
          charCounts[ASCII_ENCODATION] = Math.ceil(charCounts[ASCII_ENCODATION]);
          charCounts[ASCII_ENCODATION]++;
        }
        if (this.isNativeC40(c)) {
          charCounts[C40_ENCODATION] += 2 / 3;
        } else if (this.isExtendedASCII(c)) {
          charCounts[C40_ENCODATION] += 8 / 3;
        } else {
          charCounts[C40_ENCODATION] += 4 / 3;
        }
        if (this.isNativeText(c)) {
          charCounts[TEXT_ENCODATION] += 2 / 3;
        } else if (this.isExtendedASCII(c)) {
          charCounts[TEXT_ENCODATION] += 8 / 3;
        } else {
          charCounts[TEXT_ENCODATION] += 4 / 3;
        }
        if (this.isNativeX12(c)) {
          charCounts[X12_ENCODATION] += 2 / 3;
        } else if (this.isExtendedASCII(c)) {
          charCounts[X12_ENCODATION] += 13 / 3;
        } else {
          charCounts[X12_ENCODATION] += 10 / 3;
        }
        if (this.isNativeEDIFACT(c)) {
          charCounts[EDIFACT_ENCODATION] += 3 / 4;
        } else if (this.isExtendedASCII(c)) {
          charCounts[EDIFACT_ENCODATION] += 17 / 4;
        } else {
          charCounts[EDIFACT_ENCODATION] += 13 / 4;
        }
        if (this.isSpecialB256(c)) {
          charCounts[BASE256_ENCODATION] += 4;
        } else {
          charCounts[BASE256_ENCODATION]++;
        }
        if (charsProcessed >= 4) {
          Arrays_default.fill(mins, 0);
          Arrays_default.fill(intCharCounts, 0);
          this.findMinimums(charCounts, intCharCounts, Integer_default.MAX_VALUE, mins);
          if (intCharCounts[ASCII_ENCODATION] < this.min(intCharCounts[BASE256_ENCODATION], intCharCounts[C40_ENCODATION], intCharCounts[TEXT_ENCODATION], intCharCounts[X12_ENCODATION], intCharCounts[EDIFACT_ENCODATION])) {
            return ASCII_ENCODATION;
          }
          if (intCharCounts[BASE256_ENCODATION] < intCharCounts[ASCII_ENCODATION] || intCharCounts[BASE256_ENCODATION] + 1 < this.min(intCharCounts[C40_ENCODATION], intCharCounts[TEXT_ENCODATION], intCharCounts[X12_ENCODATION], intCharCounts[EDIFACT_ENCODATION])) {
            return BASE256_ENCODATION;
          }
          if (intCharCounts[EDIFACT_ENCODATION] + 1 < this.min(intCharCounts[BASE256_ENCODATION], intCharCounts[C40_ENCODATION], intCharCounts[TEXT_ENCODATION], intCharCounts[X12_ENCODATION], intCharCounts[ASCII_ENCODATION])) {
            return EDIFACT_ENCODATION;
          }
          if (intCharCounts[TEXT_ENCODATION] + 1 < this.min(intCharCounts[BASE256_ENCODATION], intCharCounts[C40_ENCODATION], intCharCounts[EDIFACT_ENCODATION], intCharCounts[X12_ENCODATION], intCharCounts[ASCII_ENCODATION])) {
            return TEXT_ENCODATION;
          }
          if (intCharCounts[X12_ENCODATION] + 1 < this.min(intCharCounts[BASE256_ENCODATION], intCharCounts[C40_ENCODATION], intCharCounts[EDIFACT_ENCODATION], intCharCounts[TEXT_ENCODATION], intCharCounts[ASCII_ENCODATION])) {
            return X12_ENCODATION;
          }
          if (intCharCounts[C40_ENCODATION] + 1 < this.min(intCharCounts[ASCII_ENCODATION], intCharCounts[BASE256_ENCODATION], intCharCounts[EDIFACT_ENCODATION], intCharCounts[TEXT_ENCODATION])) {
            if (intCharCounts[C40_ENCODATION] < intCharCounts[X12_ENCODATION]) {
              return C40_ENCODATION;
            }
            if (intCharCounts[C40_ENCODATION] === intCharCounts[X12_ENCODATION]) {
              var p = startpos + charsProcessed + 1;
              while (p < msg.length) {
                var tc = msg.charCodeAt(p);
                if (this.isX12TermSep(tc)) {
                  return X12_ENCODATION;
                }
                if (!this.isNativeX12(tc)) {
                  break;
                }
                p++;
              }
              return C40_ENCODATION;
            }
          }
        }
      }
    };
    HighLevelEncoder3.min = function(f1, f2, f3, f4, f5) {
      var val = Math.min(f1, Math.min(f2, Math.min(f3, f4)));
      if (f5 === void 0) {
        return val;
      } else {
        return Math.min(val, f5);
      }
    };
    HighLevelEncoder3.findMinimums = function(charCounts, intCharCounts, min, mins) {
      for (var i = 0; i < 6; i++) {
        var current = intCharCounts[i] = Math.ceil(charCounts[i]);
        if (min > current) {
          min = current;
          Arrays_default.fill(mins, 0);
        }
        if (min === current) {
          mins[i] = mins[i] + 1;
        }
      }
      return min;
    };
    HighLevelEncoder3.getMinimumCount = function(mins) {
      var minCount = 0;
      for (var i = 0; i < 6; i++) {
        minCount += mins[i];
      }
      return minCount || 0;
    };
    HighLevelEncoder3.isDigit = function(ch) {
      return ch >= "0".charCodeAt(0) && ch <= "9".charCodeAt(0);
    };
    HighLevelEncoder3.isExtendedASCII = function(ch) {
      return ch >= 128 && ch <= 255;
    };
    HighLevelEncoder3.isNativeC40 = function(ch) {
      return ch === " ".charCodeAt(0) || ch >= "0".charCodeAt(0) && ch <= "9".charCodeAt(0) || ch >= "A".charCodeAt(0) && ch <= "Z".charCodeAt(0);
    };
    HighLevelEncoder3.isNativeText = function(ch) {
      return ch === " ".charCodeAt(0) || ch >= "0".charCodeAt(0) && ch <= "9".charCodeAt(0) || ch >= "a".charCodeAt(0) && ch <= "z".charCodeAt(0);
    };
    HighLevelEncoder3.isNativeX12 = function(ch) {
      return this.isX12TermSep(ch) || ch === " ".charCodeAt(0) || ch >= "0".charCodeAt(0) && ch <= "9".charCodeAt(0) || ch >= "A".charCodeAt(0) && ch <= "Z".charCodeAt(0);
    };
    HighLevelEncoder3.isX12TermSep = function(ch) {
      return ch === 13 || // CR
      ch === "*".charCodeAt(0) || ch === ">".charCodeAt(0);
    };
    HighLevelEncoder3.isNativeEDIFACT = function(ch) {
      return ch >= " ".charCodeAt(0) && ch <= "^".charCodeAt(0);
    };
    HighLevelEncoder3.isSpecialB256 = function(ch) {
      return false;
    };
    HighLevelEncoder3.determineConsecutiveDigitCount = function(msg, startpos) {
      if (startpos === void 0) {
        startpos = 0;
      }
      var len = msg.length;
      var idx = startpos;
      while (idx < len && this.isDigit(msg.charCodeAt(idx))) {
        idx++;
      }
      return idx - startpos;
    };
    HighLevelEncoder3.illegalCharacter = function(singleCharacter) {
      var hex = Integer_default.toHexString(singleCharacter.charCodeAt(0));
      hex = "0000".substring(0, 4 - hex.length) + hex;
      throw new Error("Illegal character: " + singleCharacter + " (0x" + hex + ")");
    };
    return HighLevelEncoder3;
  }()
);
var HighLevelEncoder_default = HighLevelEncoder;

// node_modules/@zxing/library/esm/core/common/ECIEncoderSet.js
var __values42 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var CharsetEncoder = (
  /** @class */
  function() {
    function CharsetEncoder2(charset) {
      this.charset = charset;
      this.name = charset.name;
    }
    CharsetEncoder2.prototype.canEncode = function(c) {
      try {
        return StringEncoding_default.encode(c, this.charset) != null;
      } catch (ex) {
        return false;
      }
    };
    return CharsetEncoder2;
  }()
);
var ECIEncoderSet = (
  /** @class */
  function() {
    function ECIEncoderSet2(stringToEncode, priorityCharset, fnc1) {
      var e_1, _a2, e_2, _b, e_3, _c;
      this.ENCODERS = [
        "IBM437",
        "ISO-8859-2",
        "ISO-8859-3",
        "ISO-8859-4",
        "ISO-8859-5",
        "ISO-8859-6",
        "ISO-8859-7",
        "ISO-8859-8",
        "ISO-8859-9",
        "ISO-8859-10",
        "ISO-8859-11",
        "ISO-8859-13",
        "ISO-8859-14",
        "ISO-8859-15",
        "ISO-8859-16",
        "windows-1250",
        "windows-1251",
        "windows-1252",
        "windows-1256",
        "Shift_JIS"
      ].map(function(name) {
        return new CharsetEncoder(Charset_default.forName(name));
      });
      this.encoders = [];
      var neededEncoders = [];
      neededEncoders.push(new CharsetEncoder(StandardCharsets_default.ISO_8859_1));
      var needUnicodeEncoder = priorityCharset != null && priorityCharset.name.startsWith("UTF");
      for (var i = 0; i < stringToEncode.length; i++) {
        var canEncode = false;
        try {
          for (var neededEncoders_1 = (e_1 = void 0, __values42(neededEncoders)), neededEncoders_1_1 = neededEncoders_1.next(); !neededEncoders_1_1.done; neededEncoders_1_1 = neededEncoders_1.next()) {
            var encoder = neededEncoders_1_1.value;
            var singleCharacter = stringToEncode.charAt(i);
            var c = singleCharacter.charCodeAt(0);
            if (c === fnc1 || encoder.canEncode(singleCharacter)) {
              canEncode = true;
              break;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (neededEncoders_1_1 && !neededEncoders_1_1.done && (_a2 = neededEncoders_1.return)) _a2.call(neededEncoders_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        if (!canEncode) {
          try {
            for (var _d = (e_2 = void 0, __values42(this.ENCODERS)), _e = _d.next(); !_e.done; _e = _d.next()) {
              var encoder = _e.value;
              if (encoder.canEncode(stringToEncode.charAt(i))) {
                neededEncoders.push(encoder);
                canEncode = true;
                break;
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }
        if (!canEncode) {
          needUnicodeEncoder = true;
        }
      }
      if (neededEncoders.length === 1 && !needUnicodeEncoder) {
        this.encoders = [neededEncoders[0]];
      } else {
        this.encoders = [];
        var index = 0;
        try {
          for (var neededEncoders_2 = __values42(neededEncoders), neededEncoders_2_1 = neededEncoders_2.next(); !neededEncoders_2_1.done; neededEncoders_2_1 = neededEncoders_2.next()) {
            var encoder = neededEncoders_2_1.value;
            this.encoders[index++] = encoder;
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (neededEncoders_2_1 && !neededEncoders_2_1.done && (_c = neededEncoders_2.return)) _c.call(neededEncoders_2);
          } finally {
            if (e_3) throw e_3.error;
          }
        }
      }
      var priorityEncoderIndexValue = -1;
      if (priorityCharset != null) {
        for (var i = 0; i < this.encoders.length; i++) {
          if (this.encoders[i] != null && priorityCharset.name === this.encoders[i].name) {
            priorityEncoderIndexValue = i;
            break;
          }
        }
      }
      this.priorityEncoderIndex = priorityEncoderIndexValue;
    }
    ECIEncoderSet2.prototype.length = function() {
      return this.encoders.length;
    };
    ECIEncoderSet2.prototype.getCharsetName = function(index) {
      if (!(index < this.length())) {
        throw new Error("index must be less than length");
      }
      return this.encoders[index].name;
    };
    ECIEncoderSet2.prototype.getCharset = function(index) {
      if (!(index < this.length())) {
        throw new Error("index must be less than length");
      }
      return this.encoders[index].charset;
    };
    ECIEncoderSet2.prototype.getECIValue = function(encoderIndex) {
      return this.encoders[encoderIndex].charset.getValueIdentifier();
    };
    ECIEncoderSet2.prototype.getPriorityEncoderIndex = function() {
      return this.priorityEncoderIndex;
    };
    ECIEncoderSet2.prototype.canEncode = function(c, encoderIndex) {
      if (!(encoderIndex < this.length())) {
        throw new Error("index must be less than length");
      }
      return true;
    };
    ECIEncoderSet2.prototype.encode = function(c, encoderIndex) {
      if (!(encoderIndex < this.length())) {
        throw new Error("index must be less than length");
      }
      return StringEncoding_default.encode(StringUtils_default.getCharAt(c), this.encoders[encoderIndex].name);
    };
    return ECIEncoderSet2;
  }()
);

// node_modules/@zxing/library/esm/core/common/MinimalECIInput.js
var COST_PER_ECI = 3;
var MinimalECIInput = (
  /** @class */
  function() {
    function MinimalECIInput2(stringToEncode, priorityCharset, fnc1) {
      this.fnc1 = fnc1;
      var encoderSet = new ECIEncoderSet(stringToEncode, priorityCharset, fnc1);
      if (encoderSet.length() === 1) {
        for (var i = 0; i < this.bytes.length; i++) {
          var c = stringToEncode.charAt(i).charCodeAt(0);
          this.bytes[i] = c === fnc1 ? 1e3 : c;
        }
      } else {
        this.bytes = this.encodeMinimally(stringToEncode, encoderSet, fnc1);
      }
    }
    MinimalECIInput2.prototype.getFNC1Character = function() {
      return this.fnc1;
    };
    MinimalECIInput2.prototype.length = function() {
      return this.bytes.length;
    };
    MinimalECIInput2.prototype.haveNCharacters = function(index, n) {
      if (index + n - 1 >= this.bytes.length) {
        return false;
      }
      for (var i = 0; i < n; i++) {
        if (this.isECI(index + i)) {
          return false;
        }
      }
      return true;
    };
    MinimalECIInput2.prototype.charAt = function(index) {
      if (index < 0 || index >= this.length()) {
        throw new Error("" + index);
      }
      if (this.isECI(index)) {
        throw new Error("value at " + index + " is not a character but an ECI");
      }
      return this.isFNC1(index) ? this.fnc1 : this.bytes[index];
    };
    MinimalECIInput2.prototype.subSequence = function(start, end) {
      if (start < 0 || start > end || end > this.length()) {
        throw new Error("" + start);
      }
      var result = new StringBuilder_default();
      for (var i = start; i < end; i++) {
        if (this.isECI(i)) {
          throw new Error("value at " + i + " is not a character but an ECI");
        }
        result.append(this.charAt(i));
      }
      return result.toString();
    };
    MinimalECIInput2.prototype.isECI = function(index) {
      if (index < 0 || index >= this.length()) {
        throw new Error("" + index);
      }
      return this.bytes[index] > 255 && this.bytes[index] <= 999;
    };
    MinimalECIInput2.prototype.isFNC1 = function(index) {
      if (index < 0 || index >= this.length()) {
        throw new Error("" + index);
      }
      return this.bytes[index] === 1e3;
    };
    MinimalECIInput2.prototype.getECIValue = function(index) {
      if (index < 0 || index >= this.length()) {
        throw new Error("" + index);
      }
      if (!this.isECI(index)) {
        throw new Error("value at " + index + " is not an ECI but a character");
      }
      return this.bytes[index] - 256;
    };
    MinimalECIInput2.prototype.addEdge = function(edges, to, edge) {
      if (edges[to][edge.encoderIndex] == null || edges[to][edge.encoderIndex].cachedTotalSize > edge.cachedTotalSize) {
        edges[to][edge.encoderIndex] = edge;
      }
    };
    MinimalECIInput2.prototype.addEdges = function(stringToEncode, encoderSet, edges, from, previous, fnc1) {
      var ch = stringToEncode.charAt(from).charCodeAt(0);
      var start = 0;
      var end = encoderSet.length();
      if (encoderSet.getPriorityEncoderIndex() >= 0 && (ch === fnc1 || encoderSet.canEncode(ch, encoderSet.getPriorityEncoderIndex()))) {
        start = encoderSet.getPriorityEncoderIndex();
        end = start + 1;
      }
      for (var i = start; i < end; i++) {
        if (ch === fnc1 || encoderSet.canEncode(ch, i)) {
          this.addEdge(edges, from + 1, new InputEdge(ch, encoderSet, i, previous, fnc1));
        }
      }
    };
    MinimalECIInput2.prototype.encodeMinimally = function(stringToEncode, encoderSet, fnc1) {
      var inputLength = stringToEncode.length;
      var edges = new InputEdge[inputLength + 1][encoderSet.length()]();
      this.addEdges(stringToEncode, encoderSet, edges, 0, null, fnc1);
      for (var i = 1; i <= inputLength; i++) {
        for (var j = 0; j < encoderSet.length(); j++) {
          if (edges[i][j] != null && i < inputLength) {
            this.addEdges(stringToEncode, encoderSet, edges, i, edges[i][j], fnc1);
          }
        }
        for (var j = 0; j < encoderSet.length(); j++) {
          edges[i - 1][j] = null;
        }
      }
      var minimalJ = -1;
      var minimalSize = Integer_default.MAX_VALUE;
      for (var j = 0; j < encoderSet.length(); j++) {
        if (edges[inputLength][j] != null) {
          var edge = edges[inputLength][j];
          if (edge.cachedTotalSize < minimalSize) {
            minimalSize = edge.cachedTotalSize;
            minimalJ = j;
          }
        }
      }
      if (minimalJ < 0) {
        throw new Error('Failed to encode "' + stringToEncode + '"');
      }
      var intsAL = [];
      var current = edges[inputLength][minimalJ];
      while (current != null) {
        if (current.isFNC1()) {
          intsAL.unshift(1e3);
        } else {
          var bytes = encoderSet.encode(current.c, current.encoderIndex);
          for (var i = bytes.length - 1; i >= 0; i--) {
            intsAL.unshift(bytes[i] & 255);
          }
        }
        var previousEncoderIndex = current.previous === null ? 0 : current.previous.encoderIndex;
        if (previousEncoderIndex !== current.encoderIndex) {
          intsAL.unshift(256 + encoderSet.getECIValue(current.encoderIndex));
        }
        current = current.previous;
      }
      var ints = [];
      for (var i = 0; i < ints.length; i++) {
        ints[i] = intsAL[i];
      }
      return ints;
    };
    return MinimalECIInput2;
  }()
);
var InputEdge = (
  /** @class */
  function() {
    function InputEdge2(c, encoderSet, encoderIndex, previous, fnc1) {
      this.c = c;
      this.encoderSet = encoderSet;
      this.encoderIndex = encoderIndex;
      this.previous = previous;
      this.fnc1 = fnc1;
      this.c = c === fnc1 ? 1e3 : c;
      var size = this.isFNC1() ? 1 : encoderSet.encode(c, encoderIndex).length;
      var previousEncoderIndex = previous === null ? 0 : previous.encoderIndex;
      if (previousEncoderIndex !== encoderIndex) {
        size += COST_PER_ECI;
      }
      if (previous != null) {
        size += previous.cachedTotalSize;
      }
      this.cachedTotalSize = size;
    }
    InputEdge2.prototype.isFNC1 = function() {
      return this.c === 1e3;
    };
    return InputEdge2;
  }()
);

// node_modules/@zxing/library/esm/core/datamatrix/encoder/MinimalEncoder.js
var __extends72 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values43 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read2(arguments[i]));
  return ar;
};
var Mode4;
(function(Mode5) {
  Mode5[Mode5["ASCII"] = 0] = "ASCII";
  Mode5[Mode5["C40"] = 1] = "C40";
  Mode5[Mode5["TEXT"] = 2] = "TEXT";
  Mode5[Mode5["X12"] = 3] = "X12";
  Mode5[Mode5["EDF"] = 4] = "EDF";
  Mode5[Mode5["B256"] = 5] = "B256";
})(Mode4 || (Mode4 = {}));
var C40_SHIFT2_CHARS = [
  "!",
  '"',
  "#",
  "$",
  "%",
  "&",
  "'",
  "(",
  ")",
  "*",
  "+",
  ",",
  "-",
  ".",
  "/",
  ":",
  ";",
  "<",
  "=",
  ">",
  "?",
  "@",
  "[",
  "\\",
  "]",
  "^",
  "_"
];
var MinimalEncoder = (
  /** @class */
  function() {
    function MinimalEncoder2() {
    }
    MinimalEncoder2.isExtendedASCII = function(ch, fnc1) {
      return ch !== fnc1 && ch >= 128 && ch <= 255;
    };
    MinimalEncoder2.isInC40Shift1Set = function(ch) {
      return ch <= 31;
    };
    MinimalEncoder2.isInC40Shift2Set = function(ch, fnc1) {
      var e_1, _a2;
      try {
        for (var C40_SHIFT2_CHARS_1 = __values43(C40_SHIFT2_CHARS), C40_SHIFT2_CHARS_1_1 = C40_SHIFT2_CHARS_1.next(); !C40_SHIFT2_CHARS_1_1.done; C40_SHIFT2_CHARS_1_1 = C40_SHIFT2_CHARS_1.next()) {
          var c40Shift2Char = C40_SHIFT2_CHARS_1_1.value;
          if (c40Shift2Char.charCodeAt(0) === ch) {
            return true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (C40_SHIFT2_CHARS_1_1 && !C40_SHIFT2_CHARS_1_1.done && (_a2 = C40_SHIFT2_CHARS_1.return)) _a2.call(C40_SHIFT2_CHARS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return ch === fnc1;
    };
    MinimalEncoder2.isInTextShift1Set = function(ch) {
      return this.isInC40Shift1Set(ch);
    };
    MinimalEncoder2.isInTextShift2Set = function(ch, fnc1) {
      return this.isInC40Shift2Set(ch, fnc1);
    };
    MinimalEncoder2.encodeHighLevel = function(msg, priorityCharset, fnc1, shape) {
      if (priorityCharset === void 0) {
        priorityCharset = null;
      }
      if (fnc1 === void 0) {
        fnc1 = -1;
      }
      if (shape === void 0) {
        shape = 0;
      }
      var macroId = 0;
      if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {
        macroId = 5;
        msg = msg.substring(MACRO_05_HEADER.length, msg.length - 2);
      } else if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {
        macroId = 6;
        msg = msg.substring(MACRO_06_HEADER.length, msg.length - 2);
      }
      return decodeURIComponent(escape(String.fromCharCode.apply(String, __spread(this.encode(msg, priorityCharset, fnc1, shape, macroId)))));
    };
    MinimalEncoder2.encode = function(input, priorityCharset, fnc1, shape, macroId) {
      return this.encodeMinimally(new Input(input, priorityCharset, fnc1, shape, macroId)).getBytes();
    };
    MinimalEncoder2.addEdge = function(edges, edge) {
      var vertexIndex = edge.fromPosition + edge.characterLength;
      if (edges[vertexIndex][edge.getEndMode()] === null || edges[vertexIndex][edge.getEndMode()].cachedTotalSize > edge.cachedTotalSize) {
        edges[vertexIndex][edge.getEndMode()] = edge;
      }
    };
    MinimalEncoder2.getNumberOfC40Words = function(input, from, c40, characterLength) {
      var thirdsCount = 0;
      for (var i = from; i < input.length(); i++) {
        if (input.isECI(i)) {
          characterLength[0] = 0;
          return 0;
        }
        var ci = input.charAt(i);
        if (c40 && HighLevelEncoder_default.isNativeC40(ci) || !c40 && HighLevelEncoder_default.isNativeText(ci)) {
          thirdsCount++;
        } else if (!MinimalEncoder2.isExtendedASCII(ci, input.getFNC1Character())) {
          thirdsCount += 2;
        } else {
          var asciiValue = ci & 255;
          if (asciiValue >= 128 && (c40 && HighLevelEncoder_default.isNativeC40(asciiValue - 128) || !c40 && HighLevelEncoder_default.isNativeText(asciiValue - 128))) {
            thirdsCount += 3;
          } else {
            thirdsCount += 4;
          }
        }
        if (thirdsCount % 3 === 0 || (thirdsCount - 2) % 3 === 0 && i + 1 === input.length()) {
          characterLength[0] = i - from + 1;
          return Math.ceil(thirdsCount / 3);
        }
      }
      characterLength[0] = 0;
      return 0;
    };
    MinimalEncoder2.addEdges = function(input, edges, from, previous) {
      var e_2, _a2;
      if (input.isECI(from)) {
        this.addEdge(edges, new Edge(input, Mode4.ASCII, from, 1, previous));
        return;
      }
      var ch = input.charAt(from);
      if (previous === null || previous.getEndMode() !== Mode4.EDF) {
        if (HighLevelEncoder_default.isDigit(ch) && input.haveNCharacters(from, 2) && HighLevelEncoder_default.isDigit(input.charAt(from + 1))) {
          this.addEdge(edges, new Edge(input, Mode4.ASCII, from, 2, previous));
        } else {
          this.addEdge(edges, new Edge(input, Mode4.ASCII, from, 1, previous));
        }
        var modes = [Mode4.C40, Mode4.TEXT];
        try {
          for (var modes_1 = __values43(modes), modes_1_1 = modes_1.next(); !modes_1_1.done; modes_1_1 = modes_1.next()) {
            var mode = modes_1_1.value;
            var characterLength = [];
            if (MinimalEncoder2.getNumberOfC40Words(input, from, mode === Mode4.C40, characterLength) > 0) {
              this.addEdge(edges, new Edge(input, mode, from, characterLength[0], previous));
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (modes_1_1 && !modes_1_1.done && (_a2 = modes_1.return)) _a2.call(modes_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
        if (input.haveNCharacters(from, 3) && HighLevelEncoder_default.isNativeX12(input.charAt(from)) && HighLevelEncoder_default.isNativeX12(input.charAt(from + 1)) && HighLevelEncoder_default.isNativeX12(input.charAt(from + 2))) {
          this.addEdge(edges, new Edge(input, Mode4.X12, from, 3, previous));
        }
        this.addEdge(edges, new Edge(input, Mode4.B256, from, 1, previous));
      }
      var i;
      for (i = 0; i < 3; i++) {
        var pos = from + i;
        if (input.haveNCharacters(pos, 1) && HighLevelEncoder_default.isNativeEDIFACT(input.charAt(pos))) {
          this.addEdge(edges, new Edge(input, Mode4.EDF, from, i + 1, previous));
        } else {
          break;
        }
      }
      if (i === 3 && input.haveNCharacters(from, 4) && HighLevelEncoder_default.isNativeEDIFACT(input.charAt(from + 3))) {
        this.addEdge(edges, new Edge(input, Mode4.EDF, from, 4, previous));
      }
    };
    MinimalEncoder2.encodeMinimally = function(input) {
      var inputLength = input.length();
      var edges = Array(inputLength + 1).fill(null).map(function() {
        return Array(6).fill(0);
      });
      this.addEdges(input, edges, 0, null);
      for (var i = 1; i <= inputLength; i++) {
        for (var j = 0; j < 6; j++) {
          if (edges[i][j] !== null && i < inputLength) {
            this.addEdges(input, edges, i, edges[i][j]);
          }
        }
        for (var j = 0; j < 6; j++) {
          edges[i - 1][j] = null;
        }
      }
      var minimalJ = -1;
      var minimalSize = Integer_default.MAX_VALUE;
      for (var j = 0; j < 6; j++) {
        if (edges[inputLength][j] !== null) {
          var edge = edges[inputLength][j];
          var size = j >= 1 && j <= 3 ? edge.cachedTotalSize + 1 : edge.cachedTotalSize;
          if (size < minimalSize) {
            minimalSize = size;
            minimalJ = j;
          }
        }
      }
      if (minimalJ < 0) {
        throw new Error('Failed to encode "' + input + '"');
      }
      return new Result2(edges[inputLength][minimalJ]);
    };
    return MinimalEncoder2;
  }()
);
var Result2 = (
  /** @class */
  function() {
    function Result3(solution) {
      var input = solution.input;
      var size = 0;
      var bytesAL = [];
      var randomizePostfixLength = [];
      var randomizeLengths = [];
      if ((solution.mode === Mode4.C40 || solution.mode === Mode4.TEXT || solution.mode === Mode4.X12) && solution.getEndMode() !== Mode4.ASCII) {
        size += this.prepend(Edge.getBytes(254), bytesAL);
      }
      var current = solution;
      while (current !== null) {
        size += this.prepend(current.getDataBytes(), bytesAL);
        if (current.previous === null || current.getPreviousStartMode() !== current.getMode()) {
          if (current.getMode() === Mode4.B256) {
            if (size <= 249) {
              bytesAL.unshift(size);
              size++;
            } else {
              bytesAL.unshift(size % 250);
              bytesAL.unshift(size / 250 + 249);
              size += 2;
            }
            randomizePostfixLength.push(bytesAL.length);
            randomizeLengths.push(size);
          }
          this.prepend(current.getLatchBytes(), bytesAL);
          size = 0;
        }
        current = current.previous;
      }
      if (input.getMacroId() === 5) {
        size += this.prepend(Edge.getBytes(236), bytesAL);
      } else if (input.getMacroId() === 6) {
        size += this.prepend(Edge.getBytes(237), bytesAL);
      }
      if (input.getFNC1Character() > 0) {
        size += this.prepend(Edge.getBytes(232), bytesAL);
      }
      for (var i = 0; i < randomizePostfixLength.length; i++) {
        this.applyRandomPattern(bytesAL, bytesAL.length - randomizePostfixLength[i], randomizeLengths[i]);
      }
      var capacity = solution.getMinSymbolSize(bytesAL.length);
      if (bytesAL.length < capacity) {
        bytesAL.push(129);
      }
      while (bytesAL.length < capacity) {
        bytesAL.push(this.randomize253State(bytesAL.length + 1));
      }
      this.bytes = new Uint8Array(bytesAL.length);
      for (var i = 0; i < this.bytes.length; i++) {
        this.bytes[i] = bytesAL[i];
      }
    }
    Result3.prototype.prepend = function(bytes, into) {
      for (var i = bytes.length - 1; i >= 0; i--) {
        into.unshift(bytes[i]);
      }
      return bytes.length;
    };
    Result3.prototype.randomize253State = function(codewordPosition) {
      var pseudoRandom = 149 * codewordPosition % 253 + 1;
      var tempVariable = 129 + pseudoRandom;
      return tempVariable <= 254 ? tempVariable : tempVariable - 254;
    };
    Result3.prototype.applyRandomPattern = function(bytesAL, startPosition, length) {
      for (var i = 0; i < length; i++) {
        var Pad_codeword_position = startPosition + i;
        var Pad_codeword_value = bytesAL[Pad_codeword_position] & 255;
        var pseudo_random_number = 149 * (Pad_codeword_position + 1) % 255 + 1;
        var temp_variable = Pad_codeword_value + pseudo_random_number;
        bytesAL[Pad_codeword_position] = temp_variable <= 255 ? temp_variable : temp_variable - 256;
      }
    };
    Result3.prototype.getBytes = function() {
      return this.bytes;
    };
    return Result3;
  }()
);
var Edge = (
  /** @class */
  function() {
    function Edge2(input, mode, fromPosition, characterLength, previous) {
      this.input = input;
      this.mode = mode;
      this.fromPosition = fromPosition;
      this.characterLength = characterLength;
      this.previous = previous;
      this.allCodewordCapacities = [
        3,
        5,
        8,
        10,
        12,
        16,
        18,
        22,
        30,
        32,
        36,
        44,
        49,
        62,
        86,
        114,
        144,
        174,
        204,
        280,
        368,
        456,
        576,
        696,
        816,
        1050,
        1304,
        1558
      ];
      this.squareCodewordCapacities = [
        3,
        5,
        8,
        12,
        18,
        22,
        30,
        36,
        44,
        62,
        86,
        114,
        144,
        174,
        204,
        280,
        368,
        456,
        576,
        696,
        816,
        1050,
        1304,
        1558
      ];
      this.rectangularCodewordCapacities = [5, 10, 16, 33, 32, 49];
      if (!(fromPosition + characterLength <= input.length())) {
        throw new Error("Invalid edge");
      }
      var size = previous !== null ? previous.cachedTotalSize : 0;
      var previousMode = this.getPreviousMode();
      switch (mode) {
        case Mode4.ASCII:
          size++;
          if (input.isECI(fromPosition) || MinimalEncoder.isExtendedASCII(input.charAt(fromPosition), input.getFNC1Character())) {
            size++;
          }
          if (previousMode === Mode4.C40 || previousMode === Mode4.TEXT || previousMode === Mode4.X12) {
            size++;
          }
          break;
        case Mode4.B256:
          size++;
          if (previousMode !== Mode4.B256) {
            size++;
          } else if (this.getB256Size() === 250) {
            size++;
          }
          if (previousMode === Mode4.ASCII) {
            size++;
          } else if (previousMode === Mode4.C40 || previousMode === Mode4.TEXT || previousMode === Mode4.X12) {
            size += 2;
          }
          break;
        case Mode4.C40:
        case Mode4.TEXT:
        case Mode4.X12:
          if (mode === Mode4.X12) {
            size += 2;
          } else {
            var charLen = [];
            size += MinimalEncoder.getNumberOfC40Words(input, fromPosition, mode === Mode4.C40, charLen) * 2;
          }
          if (previousMode === Mode4.ASCII || previousMode === Mode4.B256) {
            size++;
          } else if (previousMode !== mode && (previousMode === Mode4.C40 || previousMode === Mode4.TEXT || previousMode === Mode4.X12)) {
            size += 2;
          }
          break;
        case Mode4.EDF:
          size += 3;
          if (previousMode === Mode4.ASCII || previousMode === Mode4.B256) {
            size++;
          } else if (previousMode === Mode4.C40 || previousMode === Mode4.TEXT || previousMode === Mode4.X12) {
            size += 2;
          }
          break;
      }
      this.cachedTotalSize = size;
    }
    Edge2.prototype.getB256Size = function() {
      var cnt = 0;
      var current = this;
      while (current !== null && current.mode === Mode4.B256 && cnt <= 250) {
        cnt++;
        current = current.previous;
      }
      return cnt;
    };
    Edge2.prototype.getPreviousStartMode = function() {
      return this.previous === null ? Mode4.ASCII : this.previous.mode;
    };
    Edge2.prototype.getPreviousMode = function() {
      return this.previous === null ? Mode4.ASCII : this.previous.getEndMode();
    };
    Edge2.prototype.getEndMode = function() {
      if (this.mode === Mode4.EDF) {
        if (this.characterLength < 4) {
          return Mode4.ASCII;
        }
        var lastASCII = this.getLastASCII();
        if (lastASCII > 0 && this.getCodewordsRemaining(this.cachedTotalSize + lastASCII) <= 2 - lastASCII) {
          return Mode4.ASCII;
        }
      }
      if (this.mode === Mode4.C40 || this.mode === Mode4.TEXT || this.mode === Mode4.X12) {
        if (this.fromPosition + this.characterLength >= this.input.length() && this.getCodewordsRemaining(this.cachedTotalSize) === 0) {
          return Mode4.ASCII;
        }
        var lastASCII = this.getLastASCII();
        if (lastASCII === 1 && this.getCodewordsRemaining(this.cachedTotalSize + 1) === 0) {
          return Mode4.ASCII;
        }
      }
      return this.mode;
    };
    Edge2.prototype.getMode = function() {
      return this.mode;
    };
    Edge2.prototype.getLastASCII = function() {
      var length = this.input.length();
      var from = this.fromPosition + this.characterLength;
      if (length - from > 4 || from >= length) {
        return 0;
      }
      if (length - from === 1) {
        if (MinimalEncoder.isExtendedASCII(this.input.charAt(from), this.input.getFNC1Character())) {
          return 0;
        }
        return 1;
      }
      if (length - from === 2) {
        if (MinimalEncoder.isExtendedASCII(this.input.charAt(from), this.input.getFNC1Character()) || MinimalEncoder.isExtendedASCII(this.input.charAt(from + 1), this.input.getFNC1Character())) {
          return 0;
        }
        if (HighLevelEncoder_default.isDigit(this.input.charAt(from)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 1))) {
          return 1;
        }
        return 2;
      }
      if (length - from === 3) {
        if (HighLevelEncoder_default.isDigit(this.input.charAt(from)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 1)) && !MinimalEncoder.isExtendedASCII(this.input.charAt(from + 2), this.input.getFNC1Character())) {
          return 2;
        }
        if (HighLevelEncoder_default.isDigit(this.input.charAt(from + 1)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 2)) && !MinimalEncoder.isExtendedASCII(this.input.charAt(from), this.input.getFNC1Character())) {
          return 2;
        }
        return 0;
      }
      if (HighLevelEncoder_default.isDigit(this.input.charAt(from)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 1)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 2)) && HighLevelEncoder_default.isDigit(this.input.charAt(from + 3))) {
        return 2;
      }
      return 0;
    };
    Edge2.prototype.getMinSymbolSize = function(minimum) {
      var e_3, _a2, e_4, _b, e_5, _c;
      switch (this.input.getShapeHint()) {
        case 1:
          try {
            for (var _d = __values43(this.squareCodewordCapacities), _e = _d.next(); !_e.done; _e = _d.next()) {
              var capacity = _e.value;
              if (capacity >= minimum) {
                return capacity;
              }
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_e && !_e.done && (_a2 = _d.return)) _a2.call(_d);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          break;
        case 2:
          try {
            for (var _f = __values43(this.rectangularCodewordCapacities), _g = _f.next(); !_g.done; _g = _f.next()) {
              var capacity = _g.value;
              if (capacity >= minimum) {
                return capacity;
              }
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
          break;
      }
      try {
        for (var _h = __values43(this.allCodewordCapacities), _j = _h.next(); !_j.done; _j = _h.next()) {
          var capacity = _j.value;
          if (capacity >= minimum) {
            return capacity;
          }
        }
      } catch (e_5_1) {
        e_5 = { error: e_5_1 };
      } finally {
        try {
          if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
        } finally {
          if (e_5) throw e_5.error;
        }
      }
      return this.allCodewordCapacities[this.allCodewordCapacities.length - 1];
    };
    Edge2.prototype.getCodewordsRemaining = function(minimum) {
      return this.getMinSymbolSize(minimum) - minimum;
    };
    Edge2.getBytes = function(c1, c2) {
      var result = new Uint8Array(c2 ? 2 : 1);
      result[0] = c1;
      if (c2) {
        result[1] = c2;
      }
      return result;
    };
    Edge2.prototype.setC40Word = function(bytes, offset, c1, c2, c3) {
      var val16 = 1600 * (c1 & 255) + 40 * (c2 & 255) + (c3 & 255) + 1;
      bytes[offset] = val16 / 256;
      bytes[offset + 1] = val16 % 256;
    };
    Edge2.prototype.getX12Value = function(c) {
      return c === 13 ? 0 : c === 42 ? 1 : c === 62 ? 2 : c === 32 ? 3 : c >= 48 && c <= 57 ? c - 44 : c >= 65 && c <= 90 ? c - 51 : c;
    };
    Edge2.prototype.getX12Words = function() {
      if (!(this.characterLength % 3 === 0)) {
        throw new Error("X12 words must be a multiple of 3");
      }
      var result = new Uint8Array(this.characterLength / 3 * 2);
      for (var i = 0; i < result.length; i += 2) {
        this.setC40Word(result, i, this.getX12Value(this.input.charAt(this.fromPosition + i / 2 * 3)), this.getX12Value(this.input.charAt(this.fromPosition + i / 2 * 3 + 1)), this.getX12Value(this.input.charAt(this.fromPosition + i / 2 * 3 + 2)));
      }
      return result;
    };
    Edge2.prototype.getShiftValue = function(c, c40, fnc1) {
      return c40 && MinimalEncoder.isInC40Shift1Set(c) || !c40 && MinimalEncoder.isInTextShift1Set(c) ? 0 : c40 && MinimalEncoder.isInC40Shift2Set(c, fnc1) || !c40 && MinimalEncoder.isInTextShift2Set(c, fnc1) ? 1 : 2;
    };
    Edge2.prototype.getC40Value = function(c40, setIndex, c, fnc1) {
      if (c === fnc1) {
        if (!(setIndex === 2)) {
          throw new Error("FNC1 cannot be used in C40 shift 2");
        }
        return 27;
      }
      if (c40) {
        return c <= 31 ? c : c === 32 ? 3 : c <= 47 ? c - 33 : c <= 57 ? c - 44 : c <= 64 ? c - 43 : c <= 90 ? c - 51 : c <= 95 ? c - 69 : c <= 127 ? c - 96 : c;
      } else {
        return c === 0 ? 0 : setIndex === 0 && c <= 3 ? c - 1 : setIndex === 1 && c <= 31 ? c : c === 32 ? 3 : c >= 33 && c <= 47 ? c - 33 : c >= 48 && c <= 57 ? c - 44 : c >= 58 && c <= 64 ? c - 43 : c >= 65 && c <= 90 ? c - 64 : c >= 91 && c <= 95 ? c - 69 : c === 96 ? 0 : c >= 97 && c <= 122 ? c - 83 : c >= 123 && c <= 127 ? c - 96 : c;
      }
    };
    Edge2.prototype.getC40Words = function(c40, fnc1) {
      var c40Values = [];
      for (var i = 0; i < this.characterLength; i++) {
        var ci = this.input.charAt(this.fromPosition + i);
        if (c40 && HighLevelEncoder_default.isNativeC40(ci) || !c40 && HighLevelEncoder_default.isNativeText(ci)) {
          c40Values.push(this.getC40Value(c40, 0, ci, fnc1));
        } else if (!MinimalEncoder.isExtendedASCII(ci, fnc1)) {
          var shiftValue = this.getShiftValue(ci, c40, fnc1);
          c40Values.push(shiftValue);
          c40Values.push(this.getC40Value(c40, shiftValue, ci, fnc1));
        } else {
          var asciiValue = (ci & 255) - 128;
          if (c40 && HighLevelEncoder_default.isNativeC40(asciiValue) || !c40 && HighLevelEncoder_default.isNativeText(asciiValue)) {
            c40Values.push(1);
            c40Values.push(30);
            c40Values.push(this.getC40Value(c40, 0, asciiValue, fnc1));
          } else {
            c40Values.push(1);
            c40Values.push(30);
            var shiftValue = this.getShiftValue(asciiValue, c40, fnc1);
            c40Values.push(shiftValue);
            c40Values.push(this.getC40Value(c40, shiftValue, asciiValue, fnc1));
          }
        }
      }
      if (c40Values.length % 3 !== 0) {
        if (!((c40Values.length - 2) % 3 === 0 && this.fromPosition + this.characterLength === this.input.length())) {
          throw new Error("C40 words must be a multiple of 3");
        }
        c40Values.push(0);
      }
      var result = new Uint8Array(c40Values.length / 3 * 2);
      var byteIndex = 0;
      for (var i = 0; i < c40Values.length; i += 3) {
        this.setC40Word(result, byteIndex, c40Values[i] & 255, c40Values[i + 1] & 255, c40Values[i + 2] & 255);
        byteIndex += 2;
      }
      return result;
    };
    Edge2.prototype.getEDFBytes = function() {
      var numberOfThirds = Math.ceil(this.characterLength / 4);
      var result = new Uint8Array(numberOfThirds * 3);
      var pos = this.fromPosition;
      var endPos = Math.min(this.fromPosition + this.characterLength - 1, this.input.length() - 1);
      for (var i = 0; i < numberOfThirds; i += 3) {
        var edfValues = [];
        for (var j = 0; j < 4; j++) {
          if (pos <= endPos) {
            edfValues[j] = this.input.charAt(pos++) & 63;
          } else {
            edfValues[j] = pos === endPos + 1 ? 31 : 0;
          }
        }
        var val24 = edfValues[0] << 18;
        val24 |= edfValues[1] << 12;
        val24 |= edfValues[2] << 6;
        val24 |= edfValues[3];
        result[i] = val24 >> 16 & 255;
        result[i + 1] = val24 >> 8 & 255;
        result[i + 2] = val24 & 255;
      }
      return result;
    };
    Edge2.prototype.getLatchBytes = function() {
      switch (this.getPreviousMode()) {
        case Mode4.ASCII:
        case Mode4.B256:
          switch (this.mode) {
            case Mode4.B256:
              return Edge2.getBytes(231);
            case Mode4.C40:
              return Edge2.getBytes(230);
            case Mode4.TEXT:
              return Edge2.getBytes(239);
            case Mode4.X12:
              return Edge2.getBytes(238);
            case Mode4.EDF:
              return Edge2.getBytes(240);
          }
          break;
        case Mode4.C40:
        case Mode4.TEXT:
        case Mode4.X12:
          if (this.mode !== this.getPreviousMode()) {
            switch (this.mode) {
              case Mode4.ASCII:
                return Edge2.getBytes(254);
              case Mode4.B256:
                return Edge2.getBytes(254, 231);
              case Mode4.C40:
                return Edge2.getBytes(254, 230);
              case Mode4.TEXT:
                return Edge2.getBytes(254, 239);
              case Mode4.X12:
                return Edge2.getBytes(254, 238);
              case Mode4.EDF:
                return Edge2.getBytes(254, 240);
            }
          }
          break;
        case Mode4.EDF:
          if (this.mode !== Mode4.EDF) {
            throw new Error("Cannot switch from EDF to " + this.mode);
          }
          break;
      }
      return new Uint8Array(0);
    };
    Edge2.prototype.getDataBytes = function() {
      switch (this.mode) {
        case Mode4.ASCII:
          if (this.input.isECI(this.fromPosition)) {
            return Edge2.getBytes(241, this.input.getECIValue(this.fromPosition) + 1);
          } else if (MinimalEncoder.isExtendedASCII(this.input.charAt(this.fromPosition), this.input.getFNC1Character())) {
            return Edge2.getBytes(235, this.input.charAt(this.fromPosition) - 127);
          } else if (this.characterLength === 2) {
            return Edge2.getBytes(this.input.charAt(this.fromPosition) * 10 + this.input.charAt(this.fromPosition + 1) + 130);
          } else if (this.input.isFNC1(this.fromPosition)) {
            return Edge2.getBytes(232);
          } else {
            return Edge2.getBytes(this.input.charAt(this.fromPosition) + 1);
          }
        case Mode4.B256:
          return Edge2.getBytes(this.input.charAt(this.fromPosition));
        case Mode4.C40:
          return this.getC40Words(true, this.input.getFNC1Character());
        case Mode4.TEXT:
          return this.getC40Words(false, this.input.getFNC1Character());
        case Mode4.X12:
          return this.getX12Words();
        case Mode4.EDF:
          return this.getEDFBytes();
      }
    };
    return Edge2;
  }()
);
var Input = (
  /** @class */
  function(_super) {
    __extends72(Input2, _super);
    function Input2(stringToEncode, priorityCharset, fnc1, shape, macroId) {
      var _this = _super.call(this, stringToEncode, priorityCharset, fnc1) || this;
      _this.shape = shape;
      _this.macroId = macroId;
      return _this;
    }
    Input2.prototype.getMacroId = function() {
      return this.macroId;
    };
    Input2.prototype.getShapeHint = function() {
      return this.shape;
    };
    return Input2;
  }(MinimalECIInput)
);

// node_modules/@zxing/library/esm/core/datamatrix/DataMatrixWriter.js
var DataMatrixWriter = (
  /** @class */
  function() {
    function DataMatrixWriter2() {
    }
    DataMatrixWriter2.prototype.encode = function(contents, format, width, height, hints) {
      if (hints === void 0) {
        hints = null;
      }
      if (contents.trim() === "") {
        throw new Error("Found empty contents");
      }
      if (format !== BarcodeFormat_default.DATA_MATRIX) {
        throw new Error("Can only encode DATA_MATRIX, but got " + format);
      }
      if (width < 0 || height < 0) {
        throw new Error("Requested dimensions can't be negative: " + width + "x" + height);
      }
      var shape = 0;
      var minSize = null;
      var maxSize = null;
      if (hints != null) {
        var requestedShape = hints.get(EncodeHintType_default.DATA_MATRIX_SHAPE);
        if (requestedShape != null) {
          shape = requestedShape;
        }
        var requestedMinSize = hints.get(EncodeHintType_default.MIN_SIZE);
        if (requestedMinSize != null) {
          minSize = requestedMinSize;
        }
        var requestedMaxSize = hints.get(EncodeHintType_default.MAX_SIZE);
        if (requestedMaxSize != null) {
          maxSize = requestedMaxSize;
        }
      }
      var encoded;
      var hasCompactionHint = hints != null && hints.has(EncodeHintType_default.DATA_MATRIX_COMPACT) && Boolean(hints.get(EncodeHintType_default.DATA_MATRIX_COMPACT).toString());
      if (hasCompactionHint) {
        var hasGS1FormatHint = hints.has(EncodeHintType_default.GS1_FORMAT) && Boolean(hints.get(EncodeHintType_default.GS1_FORMAT).toString());
        var charset = null;
        var hasEncodingHint = hints.has(EncodeHintType_default.CHARACTER_SET);
        if (hasEncodingHint) {
          charset = Charset_default.forName(hints.get(EncodeHintType_default.CHARACTER_SET).toString());
        }
        encoded = MinimalEncoder.encodeHighLevel(contents, charset, hasGS1FormatHint ? 29 : -1, shape);
      } else {
        var hasForceC40Hint = hints != null && hints.has(EncodeHintType_default.FORCE_C40) && Boolean(hints.get(EncodeHintType_default.FORCE_C40).toString());
        encoded = HighLevelEncoder_default.encodeHighLevel(contents, shape, minSize, maxSize, hasForceC40Hint);
      }
      var symbolInfo = SymbolInfo_default.lookup(encoded.length, shape, minSize, maxSize, true);
      var codewords = ErrorCorrection_default2.encodeECC200(encoded, symbolInfo);
      var placement = new DefaultPlacement_default(codewords, symbolInfo.getSymbolDataWidth(), symbolInfo.getSymbolDataHeight());
      placement.place();
      return this.encodeLowLevel(placement, symbolInfo, width, height);
    };
    DataMatrixWriter2.prototype.encodeLowLevel = function(placement, symbolInfo, width, height) {
      var symbolWidth = symbolInfo.getSymbolDataWidth();
      var symbolHeight = symbolInfo.getSymbolDataHeight();
      var matrix = new ByteMatrix_default(symbolInfo.getSymbolWidth(), symbolInfo.getSymbolHeight());
      var matrixY = 0;
      for (var y = 0; y < symbolHeight; y++) {
        var matrixX = void 0;
        if (y % symbolInfo.matrixHeight === 0) {
          matrixX = 0;
          for (var x = 0; x < symbolInfo.getSymbolWidth(); x++) {
            matrix.setBoolean(matrixX, matrixY, x % 2 === 0);
            matrixX++;
          }
          matrixY++;
        }
        matrixX = 0;
        for (var x = 0; x < symbolWidth; x++) {
          if (x % symbolInfo.matrixWidth === 0) {
            matrix.setBoolean(matrixX, matrixY, true);
            matrixX++;
          }
          matrix.setBoolean(matrixX, matrixY, placement.getBit(x, y));
          matrixX++;
          if (x % symbolInfo.matrixWidth === symbolInfo.matrixWidth - 1) {
            matrix.setBoolean(matrixX, matrixY, y % 2 === 0);
            matrixX++;
          }
        }
        matrixY++;
        if (y % symbolInfo.matrixHeight === symbolInfo.matrixHeight - 1) {
          matrixX = 0;
          for (var x = 0; x < symbolInfo.getSymbolWidth(); x++) {
            matrix.setBoolean(matrixX, matrixY, true);
            matrixX++;
          }
          matrixY++;
        }
      }
      return this.convertByteMatrixToBitMatrix(matrix, width, height);
    };
    DataMatrixWriter2.prototype.convertByteMatrixToBitMatrix = function(matrix, reqWidth, reqHeight) {
      var matrixWidth = matrix.getWidth();
      var matrixHeight = matrix.getHeight();
      var outputWidth = Math.max(reqWidth, matrixWidth);
      var outputHeight = Math.max(reqHeight, matrixHeight);
      var multiple = Math.min(outputWidth / matrixWidth, outputHeight / matrixHeight);
      var leftPadding = (outputWidth - matrixWidth * multiple) / 2;
      var topPadding = (outputHeight - matrixHeight * multiple) / 2;
      var output;
      if (reqHeight < matrixHeight || reqWidth < matrixWidth) {
        leftPadding = 0;
        topPadding = 0;
        output = new BitMatrix_default(matrixWidth, matrixHeight);
      } else {
        output = new BitMatrix_default(reqWidth, reqHeight);
      }
      output.clear();
      for (var inputY = 0, outputY = topPadding; inputY < matrixHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < matrixWidth; inputX++, outputX += multiple) {
          if (matrix.get(inputX, inputY) === 1) {
            output.setRegion(outputX, outputY, multiple, multiple);
          }
        }
      }
      return output;
    };
    return DataMatrixWriter2;
  }()
);

// node_modules/@zxing/library/esm/core/aztec/encoder/AztecCode.js
var AztecCode = (
  /** @class */
  function() {
    function AztecCode2() {
    }
    AztecCode2.prototype.isCompact = function() {
      return this.compact;
    };
    AztecCode2.prototype.setCompact = function(compact) {
      this.compact = compact;
    };
    AztecCode2.prototype.getSize = function() {
      return this.size;
    };
    AztecCode2.prototype.setSize = function(size) {
      this.size = size;
    };
    AztecCode2.prototype.getLayers = function() {
      return this.layers;
    };
    AztecCode2.prototype.setLayers = function(layers) {
      this.layers = layers;
    };
    AztecCode2.prototype.getCodeWords = function() {
      return this.codeWords;
    };
    AztecCode2.prototype.setCodeWords = function(codeWords) {
      this.codeWords = codeWords;
    };
    AztecCode2.prototype.getMatrix = function() {
      return this.matrix;
    };
    AztecCode2.prototype.setMatrix = function(matrix) {
      this.matrix = matrix;
    };
    return AztecCode2;
  }()
);
var AztecCode_default = AztecCode;

// node_modules/@zxing/library/esm/core/util/Collections.js
var Collections = (
  /** @class */
  function() {
    function Collections2() {
    }
    Collections2.singletonList = function(item) {
      return [item];
    };
    Collections2.min = function(collection, comparator) {
      return collection.sort(comparator)[0];
    };
    return Collections2;
  }()
);
var Collections_default = Collections;

// node_modules/@zxing/library/esm/core/aztec/encoder/Token.js
var Token = (
  /** @class */
  function() {
    function Token2(previous) {
      this.previous = previous;
    }
    Token2.prototype.getPrevious = function() {
      return this.previous;
    };
    return Token2;
  }()
);
var Token_default = Token;

// node_modules/@zxing/library/esm/core/aztec/encoder/SimpleToken.js
var __extends73 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SimpleToken = (
  /** @class */
  function(_super) {
    __extends73(SimpleToken2, _super);
    function SimpleToken2(previous, value, bitCount) {
      var _this = _super.call(this, previous) || this;
      _this.value = value;
      _this.bitCount = bitCount;
      return _this;
    }
    SimpleToken2.prototype.appendTo = function(bitArray, text) {
      bitArray.appendBits(this.value, this.bitCount);
    };
    SimpleToken2.prototype.add = function(value, bitCount) {
      return new SimpleToken2(this, value, bitCount);
    };
    SimpleToken2.prototype.addBinaryShift = function(start, byteCount) {
      console.warn("addBinaryShift on SimpleToken, this simply returns a copy of this token");
      return new SimpleToken2(this, start, byteCount);
    };
    SimpleToken2.prototype.toString = function() {
      var value = this.value & (1 << this.bitCount) - 1;
      value |= 1 << this.bitCount;
      return "<" + Integer_default.toBinaryString(value | 1 << this.bitCount).substring(1) + ">";
    };
    return SimpleToken2;
  }(Token_default)
);
var SimpleToken_default = SimpleToken;

// node_modules/@zxing/library/esm/core/aztec/encoder/BinaryShiftToken.js
var __extends74 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BinaryShiftToken = (
  /** @class */
  function(_super) {
    __extends74(BinaryShiftToken2, _super);
    function BinaryShiftToken2(previous, binaryShiftStart, binaryShiftByteCount) {
      var _this = _super.call(this, previous, 0, 0) || this;
      _this.binaryShiftStart = binaryShiftStart;
      _this.binaryShiftByteCount = binaryShiftByteCount;
      return _this;
    }
    BinaryShiftToken2.prototype.appendTo = function(bitArray, text) {
      for (var i = 0; i < this.binaryShiftByteCount; i++) {
        if (i === 0 || i === 31 && this.binaryShiftByteCount <= 62) {
          bitArray.appendBits(31, 5);
          if (this.binaryShiftByteCount > 62) {
            bitArray.appendBits(this.binaryShiftByteCount - 31, 16);
          } else if (i === 0) {
            bitArray.appendBits(Math.min(this.binaryShiftByteCount, 31), 5);
          } else {
            bitArray.appendBits(this.binaryShiftByteCount - 31, 5);
          }
        }
        bitArray.appendBits(text[this.binaryShiftStart + i], 8);
      }
    };
    BinaryShiftToken2.prototype.addBinaryShift = function(start, byteCount) {
      return new BinaryShiftToken2(this, start, byteCount);
    };
    BinaryShiftToken2.prototype.toString = function() {
      return "<" + this.binaryShiftStart + "::" + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + ">";
    };
    return BinaryShiftToken2;
  }(SimpleToken_default)
);
var BinaryShiftToken_default = BinaryShiftToken;

// node_modules/@zxing/library/esm/core/aztec/encoder/TokenHelpers.js
function addBinaryShift(token, start, byteCount) {
  return new BinaryShiftToken_default(token, start, byteCount);
}
function add(token, value, bitCount) {
  return new SimpleToken_default(token, value, bitCount);
}

// node_modules/@zxing/library/esm/core/aztec/encoder/EncoderConstants.js
var MODE_NAMES = [
  "UPPER",
  "LOWER",
  "DIGIT",
  "MIXED",
  "PUNCT"
];
var MODE_UPPER = 0;
var MODE_LOWER = 1;
var MODE_DIGIT = 2;
var MODE_MIXED = 3;
var MODE_PUNCT = 4;
var EMPTY_TOKEN = new SimpleToken_default(null, 0, 0);

// node_modules/@zxing/library/esm/core/aztec/encoder/LatchTable.js
var LATCH_TABLE = [
  Int32Array.from([
    0,
    (5 << 16) + 28,
    (5 << 16) + 30,
    (5 << 16) + 29,
    (10 << 16) + (29 << 5) + 30
    // UPPER -> MIXED -> PUNCT
  ]),
  Int32Array.from([
    (9 << 16) + (30 << 4) + 14,
    0,
    (5 << 16) + 30,
    (5 << 16) + 29,
    (10 << 16) + (29 << 5) + 30
    // LOWER -> MIXED -> PUNCT
  ]),
  Int32Array.from([
    (4 << 16) + 14,
    (9 << 16) + (14 << 5) + 28,
    0,
    (9 << 16) + (14 << 5) + 29,
    (14 << 16) + (14 << 10) + (29 << 5) + 30
    // DIGIT -> UPPER -> MIXED -> PUNCT
  ]),
  Int32Array.from([
    (5 << 16) + 29,
    (5 << 16) + 28,
    (10 << 16) + (29 << 5) + 30,
    0,
    (5 << 16) + 30
    // MIXED -> PUNCT
  ]),
  Int32Array.from([
    (5 << 16) + 31,
    (10 << 16) + (31 << 5) + 28,
    (10 << 16) + (31 << 5) + 30,
    (10 << 16) + (31 << 5) + 29,
    0
  ])
];

// node_modules/@zxing/library/esm/core/aztec/encoder/ShiftTable.js
var __values44 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function static_SHIFT_TABLE(SHIFT_TABLE2) {
  var e_1, _a2;
  try {
    for (var SHIFT_TABLE_1 = __values44(SHIFT_TABLE2), SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next(); !SHIFT_TABLE_1_1.done; SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next()) {
      var table = SHIFT_TABLE_1_1.value;
      Arrays_default.fill(table, -1);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (SHIFT_TABLE_1_1 && !SHIFT_TABLE_1_1.done && (_a2 = SHIFT_TABLE_1.return)) _a2.call(SHIFT_TABLE_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  SHIFT_TABLE2[MODE_UPPER][MODE_PUNCT] = 0;
  SHIFT_TABLE2[MODE_LOWER][MODE_PUNCT] = 0;
  SHIFT_TABLE2[MODE_LOWER][MODE_UPPER] = 28;
  SHIFT_TABLE2[MODE_MIXED][MODE_PUNCT] = 0;
  SHIFT_TABLE2[MODE_DIGIT][MODE_PUNCT] = 0;
  SHIFT_TABLE2[MODE_DIGIT][MODE_UPPER] = 15;
  return SHIFT_TABLE2;
}
var SHIFT_TABLE = static_SHIFT_TABLE(Arrays_default.createInt32Array(6, 6));

// node_modules/@zxing/library/esm/core/aztec/encoder/State.js
var __values45 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var State = (
  /** @class */
  function() {
    function State2(token, mode, binaryBytes, bitCount) {
      this.token = token;
      this.mode = mode;
      this.binaryShiftByteCount = binaryBytes;
      this.bitCount = bitCount;
    }
    State2.prototype.getMode = function() {
      return this.mode;
    };
    State2.prototype.getToken = function() {
      return this.token;
    };
    State2.prototype.getBinaryShiftByteCount = function() {
      return this.binaryShiftByteCount;
    };
    State2.prototype.getBitCount = function() {
      return this.bitCount;
    };
    State2.prototype.latchAndAppend = function(mode, value) {
      var bitCount = this.bitCount;
      var token = this.token;
      if (mode !== this.mode) {
        var latch = LATCH_TABLE[this.mode][mode];
        token = add(token, latch & 65535, latch >> 16);
        bitCount += latch >> 16;
      }
      var latchModeBitCount = mode === MODE_DIGIT ? 4 : 5;
      token = add(token, value, latchModeBitCount);
      return new State2(token, mode, 0, bitCount + latchModeBitCount);
    };
    State2.prototype.shiftAndAppend = function(mode, value) {
      var token = this.token;
      var thisModeBitCount = this.mode === MODE_DIGIT ? 4 : 5;
      token = add(token, SHIFT_TABLE[this.mode][mode], thisModeBitCount);
      token = add(token, value, 5);
      return new State2(token, this.mode, 0, this.bitCount + thisModeBitCount + 5);
    };
    State2.prototype.addBinaryShiftChar = function(index) {
      var token = this.token;
      var mode = this.mode;
      var bitCount = this.bitCount;
      if (this.mode === MODE_PUNCT || this.mode === MODE_DIGIT) {
        var latch = LATCH_TABLE[mode][MODE_UPPER];
        token = add(token, latch & 65535, latch >> 16);
        bitCount += latch >> 16;
        mode = MODE_UPPER;
      }
      var deltaBitCount = this.binaryShiftByteCount === 0 || this.binaryShiftByteCount === 31 ? 18 : this.binaryShiftByteCount === 62 ? 9 : 8;
      var result = new State2(token, mode, this.binaryShiftByteCount + 1, bitCount + deltaBitCount);
      if (result.binaryShiftByteCount === 2047 + 31) {
        result = result.endBinaryShift(index + 1);
      }
      return result;
    };
    State2.prototype.endBinaryShift = function(index) {
      if (this.binaryShiftByteCount === 0) {
        return this;
      }
      var token = this.token;
      token = addBinaryShift(token, index - this.binaryShiftByteCount, this.binaryShiftByteCount);
      return new State2(token, this.mode, 0, this.bitCount);
    };
    State2.prototype.isBetterThanOrEqualTo = function(other) {
      var newModeBitCount = this.bitCount + (LATCH_TABLE[this.mode][other.mode] >> 16);
      if (this.binaryShiftByteCount < other.binaryShiftByteCount) {
        newModeBitCount += State2.calculateBinaryShiftCost(other) - State2.calculateBinaryShiftCost(this);
      } else if (this.binaryShiftByteCount > other.binaryShiftByteCount && other.binaryShiftByteCount > 0) {
        newModeBitCount += 10;
      }
      return newModeBitCount <= other.bitCount;
    };
    State2.prototype.toBitArray = function(text) {
      var e_1, _a2;
      var symbols = [];
      for (var token = this.endBinaryShift(text.length).token; token !== null; token = token.getPrevious()) {
        symbols.unshift(token);
      }
      var bitArray = new BitArray_default();
      try {
        for (var symbols_1 = __values45(symbols), symbols_1_1 = symbols_1.next(); !symbols_1_1.done; symbols_1_1 = symbols_1.next()) {
          var symbol = symbols_1_1.value;
          symbol.appendTo(bitArray, text);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (symbols_1_1 && !symbols_1_1.done && (_a2 = symbols_1.return)) _a2.call(symbols_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return bitArray;
    };
    State2.prototype.toString = function() {
      return StringUtils_default.format("%s bits=%d bytes=%d", MODE_NAMES[this.mode], this.bitCount, this.binaryShiftByteCount);
    };
    State2.calculateBinaryShiftCost = function(state) {
      if (state.binaryShiftByteCount > 62) {
        return 21;
      }
      if (state.binaryShiftByteCount > 31) {
        return 20;
      }
      if (state.binaryShiftByteCount > 0) {
        return 10;
      }
      return 0;
    };
    State2.INITIAL_STATE = new State2(EMPTY_TOKEN, MODE_UPPER, 0, 0);
    return State2;
  }()
);
var State_default = State;

// node_modules/@zxing/library/esm/core/aztec/encoder/CharMap.js
function static_CHAR_MAP(CHAR_MAP2) {
  var spaceCharCode = StringUtils_default.getCharCode(" ");
  var pointCharCode = StringUtils_default.getCharCode(".");
  var commaCharCode = StringUtils_default.getCharCode(",");
  CHAR_MAP2[MODE_UPPER][spaceCharCode] = 1;
  var zUpperCharCode = StringUtils_default.getCharCode("Z");
  var aUpperCharCode = StringUtils_default.getCharCode("A");
  for (var c = aUpperCharCode; c <= zUpperCharCode; c++) {
    CHAR_MAP2[MODE_UPPER][c] = c - aUpperCharCode + 2;
  }
  CHAR_MAP2[MODE_LOWER][spaceCharCode] = 1;
  var zLowerCharCode = StringUtils_default.getCharCode("z");
  var aLowerCharCode = StringUtils_default.getCharCode("a");
  for (var c = aLowerCharCode; c <= zLowerCharCode; c++) {
    CHAR_MAP2[MODE_LOWER][c] = c - aLowerCharCode + 2;
  }
  CHAR_MAP2[MODE_DIGIT][spaceCharCode] = 1;
  var nineCharCode = StringUtils_default.getCharCode("9");
  var zeroCharCode = StringUtils_default.getCharCode("0");
  for (var c = zeroCharCode; c <= nineCharCode; c++) {
    CHAR_MAP2[MODE_DIGIT][c] = c - zeroCharCode + 2;
  }
  CHAR_MAP2[MODE_DIGIT][commaCharCode] = 12;
  CHAR_MAP2[MODE_DIGIT][pointCharCode] = 13;
  var mixedTable = [
    "\0",
    " ",
    "",
    "",
    "",
    "",
    "",
    "",
    "\x07",
    "\b",
    "	",
    "\n",
    "\v",
    "\f",
    "\r",
    "\x1B",
    "",
    "",
    "",
    "",
    "@",
    "\\",
    "^",
    "_",
    "`",
    "|",
    "~",
    "\x7F"
  ];
  for (var i = 0; i < mixedTable.length; i++) {
    CHAR_MAP2[MODE_MIXED][StringUtils_default.getCharCode(mixedTable[i])] = i;
  }
  var punctTable = [
    "\0",
    "\r",
    "\0",
    "\0",
    "\0",
    "\0",
    "!",
    "'",
    "#",
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "[",
    "]",
    "{",
    "}"
  ];
  for (var i = 0; i < punctTable.length; i++) {
    if (StringUtils_default.getCharCode(punctTable[i]) > 0) {
      CHAR_MAP2[MODE_PUNCT][StringUtils_default.getCharCode(punctTable[i])] = i;
    }
  }
  return CHAR_MAP2;
}
var CHAR_MAP = static_CHAR_MAP(Arrays_default.createInt32Array(5, 256));

// node_modules/@zxing/library/esm/core/aztec/encoder/HighLevelEncoder.js
var __values46 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var HighLevelEncoder2 = (
  /** @class */
  function() {
    function HighLevelEncoder3(text) {
      this.text = text;
    }
    HighLevelEncoder3.prototype.encode = function() {
      var spaceCharCode = StringUtils_default.getCharCode(" ");
      var lineBreakCharCode = StringUtils_default.getCharCode("\n");
      var states = Collections_default.singletonList(State_default.INITIAL_STATE);
      for (var index = 0; index < this.text.length; index++) {
        var pairCode = void 0;
        var nextChar = index + 1 < this.text.length ? this.text[index + 1] : 0;
        switch (this.text[index]) {
          case StringUtils_default.getCharCode("\r"):
            pairCode = nextChar === lineBreakCharCode ? 2 : 0;
            break;
          case StringUtils_default.getCharCode("."):
            pairCode = nextChar === spaceCharCode ? 3 : 0;
            break;
          case StringUtils_default.getCharCode(","):
            pairCode = nextChar === spaceCharCode ? 4 : 0;
            break;
          case StringUtils_default.getCharCode(":"):
            pairCode = nextChar === spaceCharCode ? 5 : 0;
            break;
          default:
            pairCode = 0;
        }
        if (pairCode > 0) {
          states = HighLevelEncoder3.updateStateListForPair(states, index, pairCode);
          index++;
        } else {
          states = this.updateStateListForChar(states, index);
        }
      }
      var minState = Collections_default.min(states, function(a, b) {
        return a.getBitCount() - b.getBitCount();
      });
      return minState.toBitArray(this.text);
    };
    HighLevelEncoder3.prototype.updateStateListForChar = function(states, index) {
      var e_1, _a2;
      var result = [];
      try {
        for (var states_1 = __values46(states), states_1_1 = states_1.next(); !states_1_1.done; states_1_1 = states_1.next()) {
          var state = states_1_1.value;
          this.updateStateForChar(state, index, result);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (states_1_1 && !states_1_1.done && (_a2 = states_1.return)) _a2.call(states_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return HighLevelEncoder3.simplifyStates(result);
    };
    HighLevelEncoder3.prototype.updateStateForChar = function(state, index, result) {
      var ch = this.text[index] & 255;
      var charInCurrentTable = CHAR_MAP[state.getMode()][ch] > 0;
      var stateNoBinary = null;
      for (var mode = 0; mode <= MODE_PUNCT; mode++) {
        var charInMode = CHAR_MAP[mode][ch];
        if (charInMode > 0) {
          if (stateNoBinary == null) {
            stateNoBinary = state.endBinaryShift(index);
          }
          if (!charInCurrentTable || mode === state.getMode() || mode === MODE_DIGIT) {
            var latchState = stateNoBinary.latchAndAppend(mode, charInMode);
            result.push(latchState);
          }
          if (!charInCurrentTable && SHIFT_TABLE[state.getMode()][mode] >= 0) {
            var shiftState = stateNoBinary.shiftAndAppend(mode, charInMode);
            result.push(shiftState);
          }
        }
      }
      if (state.getBinaryShiftByteCount() > 0 || CHAR_MAP[state.getMode()][ch] === 0) {
        var binaryState = state.addBinaryShiftChar(index);
        result.push(binaryState);
      }
    };
    HighLevelEncoder3.updateStateListForPair = function(states, index, pairCode) {
      var e_2, _a2;
      var result = [];
      try {
        for (var states_2 = __values46(states), states_2_1 = states_2.next(); !states_2_1.done; states_2_1 = states_2.next()) {
          var state = states_2_1.value;
          this.updateStateForPair(state, index, pairCode, result);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (states_2_1 && !states_2_1.done && (_a2 = states_2.return)) _a2.call(states_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return this.simplifyStates(result);
    };
    HighLevelEncoder3.updateStateForPair = function(state, index, pairCode, result) {
      var stateNoBinary = state.endBinaryShift(index);
      result.push(stateNoBinary.latchAndAppend(MODE_PUNCT, pairCode));
      if (state.getMode() !== MODE_PUNCT) {
        result.push(stateNoBinary.shiftAndAppend(MODE_PUNCT, pairCode));
      }
      if (pairCode === 3 || pairCode === 4) {
        var digitState = stateNoBinary.latchAndAppend(MODE_DIGIT, 16 - pairCode).latchAndAppend(MODE_DIGIT, 1);
        result.push(digitState);
      }
      if (state.getBinaryShiftByteCount() > 0) {
        var binaryState = state.addBinaryShiftChar(index).addBinaryShiftChar(index + 1);
        result.push(binaryState);
      }
    };
    HighLevelEncoder3.simplifyStates = function(states) {
      var e_3, _a2, e_4, _b;
      var result = [];
      try {
        for (var states_3 = __values46(states), states_3_1 = states_3.next(); !states_3_1.done; states_3_1 = states_3.next()) {
          var newState = states_3_1.value;
          var add2 = true;
          var _loop_1 = function(oldState2) {
            if (oldState2.isBetterThanOrEqualTo(newState)) {
              add2 = false;
              return "break";
            }
            if (newState.isBetterThanOrEqualTo(oldState2)) {
              result = result.filter(function(x) {
                return x !== oldState2;
              });
            }
          };
          try {
            for (var result_1 = (e_4 = void 0, __values46(result)), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
              var oldState = result_1_1.value;
              var state_1 = _loop_1(oldState);
              if (state_1 === "break")
                break;
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (result_1_1 && !result_1_1.done && (_b = result_1.return)) _b.call(result_1);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
          if (add2) {
            result.push(newState);
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (states_3_1 && !states_3_1.done && (_a2 = states_3.return)) _a2.call(states_3);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return result;
    };
    return HighLevelEncoder3;
  }()
);
var HighLevelEncoder_default2 = HighLevelEncoder2;

// node_modules/@zxing/library/esm/core/aztec/encoder/Encoder.js
var __values47 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Encoder2 = (
  /** @class */
  function() {
    function Encoder3() {
    }
    Encoder3.encodeBytes = function(data) {
      return Encoder3.encode(data, Encoder3.DEFAULT_EC_PERCENT, Encoder3.DEFAULT_AZTEC_LAYERS);
    };
    Encoder3.encode = function(data, minECCPercent, userSpecifiedLayers) {
      var bits = new HighLevelEncoder_default2(data).encode();
      var eccBits = Integer_default.truncDivision(bits.getSize() * minECCPercent, 100) + 11;
      var totalSizeBits = bits.getSize() + eccBits;
      var compact;
      var layers;
      var totalBitsInLayer;
      var wordSize;
      var stuffedBits;
      if (userSpecifiedLayers !== Encoder3.DEFAULT_AZTEC_LAYERS) {
        compact = userSpecifiedLayers < 0;
        layers = Math.abs(userSpecifiedLayers);
        if (layers > (compact ? Encoder3.MAX_NB_BITS_COMPACT : Encoder3.MAX_NB_BITS)) {
          throw new IllegalArgumentException_default(StringUtils_default.format("Illegal value %s for layers", userSpecifiedLayers));
        }
        totalBitsInLayer = Encoder3.totalBitsInLayer(layers, compact);
        wordSize = Encoder3.WORD_SIZE[layers];
        var usableBitsInLayers = totalBitsInLayer - totalBitsInLayer % wordSize;
        stuffedBits = Encoder3.stuffBits(bits, wordSize);
        if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {
          throw new IllegalArgumentException_default("Data to large for user specified layer");
        }
        if (compact && stuffedBits.getSize() > wordSize * 64) {
          throw new IllegalArgumentException_default("Data to large for user specified layer");
        }
      } else {
        wordSize = 0;
        stuffedBits = null;
        for (var i = 0; ; i++) {
          if (i > Encoder3.MAX_NB_BITS) {
            throw new IllegalArgumentException_default("Data too large for an Aztec code");
          }
          compact = i <= 3;
          layers = compact ? i + 1 : i;
          totalBitsInLayer = Encoder3.totalBitsInLayer(layers, compact);
          if (totalSizeBits > totalBitsInLayer) {
            continue;
          }
          if (stuffedBits == null || wordSize !== Encoder3.WORD_SIZE[layers]) {
            wordSize = Encoder3.WORD_SIZE[layers];
            stuffedBits = Encoder3.stuffBits(bits, wordSize);
          }
          var usableBitsInLayers = totalBitsInLayer - totalBitsInLayer % wordSize;
          if (compact && stuffedBits.getSize() > wordSize * 64) {
            continue;
          }
          if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {
            break;
          }
        }
      }
      var messageBits = Encoder3.generateCheckWords(stuffedBits, totalBitsInLayer, wordSize);
      var messageSizeInWords = stuffedBits.getSize() / wordSize;
      var modeMessage = Encoder3.generateModeMessage(compact, layers, messageSizeInWords);
      var baseMatrixSize = (compact ? 11 : 14) + layers * 4;
      var alignmentMap = new Int32Array(baseMatrixSize);
      var matrixSize;
      if (compact) {
        matrixSize = baseMatrixSize;
        for (var i = 0; i < alignmentMap.length; i++) {
          alignmentMap[i] = i;
        }
      } else {
        matrixSize = baseMatrixSize + 1 + 2 * Integer_default.truncDivision(Integer_default.truncDivision(baseMatrixSize, 2) - 1, 15);
        var origCenter = Integer_default.truncDivision(baseMatrixSize, 2);
        var center = Integer_default.truncDivision(matrixSize, 2);
        for (var i = 0; i < origCenter; i++) {
          var newOffset = i + Integer_default.truncDivision(i, 15);
          alignmentMap[origCenter - i - 1] = center - newOffset - 1;
          alignmentMap[origCenter + i] = center + newOffset + 1;
        }
      }
      var matrix = new BitMatrix_default(matrixSize);
      for (var i = 0, rowOffset = 0; i < layers; i++) {
        var rowSize = (layers - i) * 4 + (compact ? 9 : 12);
        for (var j = 0; j < rowSize; j++) {
          var columnOffset = j * 2;
          for (var k = 0; k < 2; k++) {
            if (messageBits.get(rowOffset + columnOffset + k)) {
              matrix.set(alignmentMap[i * 2 + k], alignmentMap[i * 2 + j]);
            }
            if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {
              matrix.set(alignmentMap[i * 2 + j], alignmentMap[baseMatrixSize - 1 - i * 2 - k]);
            }
            if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {
              matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k], alignmentMap[baseMatrixSize - 1 - i * 2 - j]);
            }
            if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {
              matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j], alignmentMap[i * 2 + k]);
            }
          }
        }
        rowOffset += rowSize * 8;
      }
      Encoder3.drawModeMessage(matrix, compact, matrixSize, modeMessage);
      if (compact) {
        Encoder3.drawBullsEye(matrix, Integer_default.truncDivision(matrixSize, 2), 5);
      } else {
        Encoder3.drawBullsEye(matrix, Integer_default.truncDivision(matrixSize, 2), 7);
        for (var i = 0, j = 0; i < Integer_default.truncDivision(baseMatrixSize, 2) - 1; i += 15, j += 16) {
          for (var k = Integer_default.truncDivision(matrixSize, 2) & 1; k < matrixSize; k += 2) {
            matrix.set(Integer_default.truncDivision(matrixSize, 2) - j, k);
            matrix.set(Integer_default.truncDivision(matrixSize, 2) + j, k);
            matrix.set(k, Integer_default.truncDivision(matrixSize, 2) - j);
            matrix.set(k, Integer_default.truncDivision(matrixSize, 2) + j);
          }
        }
      }
      var aztec = new AztecCode_default();
      aztec.setCompact(compact);
      aztec.setSize(matrixSize);
      aztec.setLayers(layers);
      aztec.setCodeWords(messageSizeInWords);
      aztec.setMatrix(matrix);
      return aztec;
    };
    Encoder3.drawBullsEye = function(matrix, center, size) {
      for (var i = 0; i < size; i += 2) {
        for (var j = center - i; j <= center + i; j++) {
          matrix.set(j, center - i);
          matrix.set(j, center + i);
          matrix.set(center - i, j);
          matrix.set(center + i, j);
        }
      }
      matrix.set(center - size, center - size);
      matrix.set(center - size + 1, center - size);
      matrix.set(center - size, center - size + 1);
      matrix.set(center + size, center - size);
      matrix.set(center + size, center - size + 1);
      matrix.set(center + size, center + size - 1);
    };
    Encoder3.generateModeMessage = function(compact, layers, messageSizeInWords) {
      var modeMessage = new BitArray_default();
      if (compact) {
        modeMessage.appendBits(layers - 1, 2);
        modeMessage.appendBits(messageSizeInWords - 1, 6);
        modeMessage = Encoder3.generateCheckWords(modeMessage, 28, 4);
      } else {
        modeMessage.appendBits(layers - 1, 5);
        modeMessage.appendBits(messageSizeInWords - 1, 11);
        modeMessage = Encoder3.generateCheckWords(modeMessage, 40, 4);
      }
      return modeMessage;
    };
    Encoder3.drawModeMessage = function(matrix, compact, matrixSize, modeMessage) {
      var center = Integer_default.truncDivision(matrixSize, 2);
      if (compact) {
        for (var i = 0; i < 7; i++) {
          var offset = center - 3 + i;
          if (modeMessage.get(i)) {
            matrix.set(offset, center - 5);
          }
          if (modeMessage.get(i + 7)) {
            matrix.set(center + 5, offset);
          }
          if (modeMessage.get(20 - i)) {
            matrix.set(offset, center + 5);
          }
          if (modeMessage.get(27 - i)) {
            matrix.set(center - 5, offset);
          }
        }
      } else {
        for (var i = 0; i < 10; i++) {
          var offset = center - 5 + i + Integer_default.truncDivision(i, 5);
          if (modeMessage.get(i)) {
            matrix.set(offset, center - 7);
          }
          if (modeMessage.get(i + 10)) {
            matrix.set(center + 7, offset);
          }
          if (modeMessage.get(29 - i)) {
            matrix.set(offset, center + 7);
          }
          if (modeMessage.get(39 - i)) {
            matrix.set(center - 7, offset);
          }
        }
      }
    };
    Encoder3.generateCheckWords = function(bitArray, totalBits, wordSize) {
      var e_1, _a2;
      var messageSizeInWords = bitArray.getSize() / wordSize;
      var rs = new ReedSolomonEncoder_default(Encoder3.getGF(wordSize));
      var totalWords = Integer_default.truncDivision(totalBits, wordSize);
      var messageWords = Encoder3.bitsToWords(bitArray, wordSize, totalWords);
      rs.encode(messageWords, totalWords - messageSizeInWords);
      var startPad = totalBits % wordSize;
      var messageBits = new BitArray_default();
      messageBits.appendBits(0, startPad);
      try {
        for (var _b = __values47(Array.from(messageWords)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var messageWord = _c.value;
          messageBits.appendBits(messageWord, wordSize);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return messageBits;
    };
    Encoder3.bitsToWords = function(stuffedBits, wordSize, totalWords) {
      var message = new Int32Array(totalWords);
      var i;
      var n;
      for (i = 0, n = stuffedBits.getSize() / wordSize; i < n; i++) {
        var value = 0;
        for (var j = 0; j < wordSize; j++) {
          value |= stuffedBits.get(i * wordSize + j) ? 1 << wordSize - j - 1 : 0;
        }
        message[i] = value;
      }
      return message;
    };
    Encoder3.getGF = function(wordSize) {
      switch (wordSize) {
        case 4:
          return GenericGF_default.AZTEC_PARAM;
        case 6:
          return GenericGF_default.AZTEC_DATA_6;
        case 8:
          return GenericGF_default.AZTEC_DATA_8;
        case 10:
          return GenericGF_default.AZTEC_DATA_10;
        case 12:
          return GenericGF_default.AZTEC_DATA_12;
        default:
          throw new IllegalArgumentException_default("Unsupported word size " + wordSize);
      }
    };
    Encoder3.stuffBits = function(bits, wordSize) {
      var out = new BitArray_default();
      var n = bits.getSize();
      var mask = (1 << wordSize) - 2;
      for (var i = 0; i < n; i += wordSize) {
        var word = 0;
        for (var j = 0; j < wordSize; j++) {
          if (i + j >= n || bits.get(i + j)) {
            word |= 1 << wordSize - 1 - j;
          }
        }
        if ((word & mask) === mask) {
          out.appendBits(word & mask, wordSize);
          i--;
        } else if ((word & mask) === 0) {
          out.appendBits(word | 1, wordSize);
          i--;
        } else {
          out.appendBits(word, wordSize);
        }
      }
      return out;
    };
    Encoder3.totalBitsInLayer = function(layers, compact) {
      return ((compact ? 88 : 112) + 16 * layers) * layers;
    };
    Encoder3.DEFAULT_EC_PERCENT = 33;
    Encoder3.DEFAULT_AZTEC_LAYERS = 0;
    Encoder3.MAX_NB_BITS = 32;
    Encoder3.MAX_NB_BITS_COMPACT = 4;
    Encoder3.WORD_SIZE = Int32Array.from([
      4,
      6,
      6,
      8,
      8,
      8,
      8,
      8,
      8,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      12,
      12,
      12,
      12,
      12,
      12,
      12,
      12,
      12,
      12
    ]);
    return Encoder3;
  }()
);
var Encoder_default2 = Encoder2;

// node_modules/@zxing/library/esm/core/aztec/AztecWriter.js
var AztecWriter = (
  /** @class */
  function() {
    function AztecWriter2() {
    }
    AztecWriter2.prototype.encode = function(contents, format, width, height) {
      return this.encodeWithHints(contents, format, width, height, null);
    };
    AztecWriter2.prototype.encodeWithHints = function(contents, format, width, height, hints) {
      var charset = StandardCharsets_default.ISO_8859_1;
      var eccPercent = Encoder_default2.DEFAULT_EC_PERCENT;
      var layers = Encoder_default2.DEFAULT_AZTEC_LAYERS;
      if (hints != null) {
        if (hints.has(EncodeHintType_default.CHARACTER_SET)) {
          charset = Charset_default.forName(hints.get(EncodeHintType_default.CHARACTER_SET).toString());
        }
        if (hints.has(EncodeHintType_default.ERROR_CORRECTION)) {
          eccPercent = Integer_default.parseInt(hints.get(EncodeHintType_default.ERROR_CORRECTION).toString());
        }
        if (hints.has(EncodeHintType_default.AZTEC_LAYERS)) {
          layers = Integer_default.parseInt(hints.get(EncodeHintType_default.AZTEC_LAYERS).toString());
        }
      }
      return AztecWriter2.encodeLayers(contents, format, width, height, charset, eccPercent, layers);
    };
    AztecWriter2.encodeLayers = function(contents, format, width, height, charset, eccPercent, layers) {
      if (format !== BarcodeFormat_default.AZTEC) {
        throw new IllegalArgumentException_default("Can only encode AZTEC, but got " + format);
      }
      var aztec = Encoder_default2.encode(StringUtils_default.getBytes(contents, charset), eccPercent, layers);
      return AztecWriter2.renderResult(aztec, width, height);
    };
    AztecWriter2.renderResult = function(code, width, height) {
      var input = code.getMatrix();
      if (input == null) {
        throw new IllegalStateException_default();
      }
      var inputWidth = input.getWidth();
      var inputHeight = input.getHeight();
      var outputWidth = Math.max(width, inputWidth);
      var outputHeight = Math.max(height, inputHeight);
      var multiple = Math.min(outputWidth / inputWidth, outputHeight / inputHeight);
      var leftPadding = (outputWidth - inputWidth * multiple) / 2;
      var topPadding = (outputHeight - inputHeight * multiple) / 2;
      var output = new BitMatrix_default(outputWidth, outputHeight);
      for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {
          if (input.get(inputX, inputY)) {
            output.setRegion(outputX, outputY, multiple, multiple);
          }
        }
      }
      return output;
    };
    return AztecWriter2;
  }()
);

// node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js
var __extends75 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HTMLCanvasElementLuminanceSource2 = (
  /** @class */
  function(_super) {
    __extends75(HTMLCanvasElementLuminanceSource3, _super);
    function HTMLCanvasElementLuminanceSource3(canvas) {
      var _this = _super.call(this, canvas.width, canvas.height) || this;
      _this.canvas = canvas;
      _this.tempCanvasElement = null;
      _this.buffer = HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData(canvas);
      return _this;
    }
    HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData = function(canvas) {
      var canvasCtx;
      try {
        canvasCtx = canvas.getContext("2d", { willReadFrequently: true });
      } catch (e) {
        canvasCtx = canvas.getContext("2d");
      }
      if (!canvasCtx) {
        throw new Error("Couldn't get canvas context.");
      }
      var imageData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);
      return HTMLCanvasElementLuminanceSource3.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);
    };
    HTMLCanvasElementLuminanceSource3.toGrayscaleBuffer = function(imageBuffer, width, height) {
      var grayscaleBuffer = new Uint8ClampedArray(width * height);
      for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {
        var gray = void 0;
        var alpha = imageBuffer[i + 3];
        if (alpha === 0) {
          gray = 255;
        } else {
          var pixelR = imageBuffer[i];
          var pixelG = imageBuffer[i + 1];
          var pixelB = imageBuffer[i + 2];
          gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 512 >> 10;
        }
        grayscaleBuffer[j] = gray;
      }
      return grayscaleBuffer;
    };
    HTMLCanvasElementLuminanceSource3.prototype.getRow = function(y, row) {
      if (y < 0 || y >= this.getHeight()) {
        throw new IllegalArgumentException_default("Requested row is outside the image: " + y);
      }
      var width = this.getWidth();
      var start = y * width;
      if (row === null) {
        row = this.buffer.slice(start, start + width);
      } else {
        if (row.length < width) {
          row = new Uint8ClampedArray(width);
        }
        row.set(this.buffer.slice(start, start + width));
      }
      return row;
    };
    HTMLCanvasElementLuminanceSource3.prototype.getMatrix = function() {
      return this.buffer;
    };
    HTMLCanvasElementLuminanceSource3.prototype.isCropSupported = function() {
      return true;
    };
    HTMLCanvasElementLuminanceSource3.prototype.crop = function(left, top, width, height) {
      _super.prototype.crop.call(this, left, top, width, height);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.isRotateSupported = function() {
      return true;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotateCounterClockwise = function() {
      this.rotate(-90);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotateCounterClockwise45 = function() {
      this.rotate(-45);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.prototype.invert = function() {
      return new InvertedLuminanceSource_default(this);
    };
    HTMLCanvasElementLuminanceSource3.prototype.getTempCanvasElement = function() {
      if (null === this.tempCanvasElement) {
        var tempCanvasElement = this.canvas.ownerDocument.createElement("canvas");
        tempCanvasElement.width = this.canvas.width;
        tempCanvasElement.height = this.canvas.height;
        this.tempCanvasElement = tempCanvasElement;
      }
      return this.tempCanvasElement;
    };
    HTMLCanvasElementLuminanceSource3.prototype.rotate = function(angle) {
      var tempCanvasElement = this.getTempCanvasElement();
      if (!tempCanvasElement) {
        throw new Error("Could not create a Canvas element.");
      }
      var angleRadians = angle * HTMLCanvasElementLuminanceSource3.DEGREE_TO_RADIANS;
      var width = this.canvas.width;
      var height = this.canvas.height;
      var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);
      var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);
      tempCanvasElement.width = newWidth;
      tempCanvasElement.height = newHeight;
      var tempContext = tempCanvasElement.getContext("2d");
      if (!tempContext) {
        throw new Error("Could not create a Canvas Context element.");
      }
      tempContext.translate(newWidth / 2, newHeight / 2);
      tempContext.rotate(angleRadians);
      tempContext.drawImage(this.canvas, width / -2, height / -2);
      this.buffer = HTMLCanvasElementLuminanceSource3.makeBufferFromCanvasImageData(tempCanvasElement);
      return this;
    };
    HTMLCanvasElementLuminanceSource3.DEGREE_TO_RADIANS = Math.PI / 180;
    return HTMLCanvasElementLuminanceSource3;
  }(LuminanceSource_default)
);

// node_modules/@zxing/browser/esm/common/navigator-utils.js
function hasNavigator() {
  return typeof navigator !== "undefined";
}
function isMediaDevicesSupported() {
  return hasNavigator() && !!navigator.mediaDevices;
}
function canEnumerateDevices() {
  return !!(isMediaDevicesSupported() && navigator.mediaDevices.enumerateDevices);
}

// node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __values48 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var defaultOptions = {
  delayBetweenScanAttempts: 500,
  delayBetweenScanSuccess: 500,
  tryPlayVideoTimeout: 5e3
};
var BrowserCodeReader2 = (
  /** @class */
  function() {
    function BrowserCodeReader3(reader, hints, options) {
      if (hints === void 0) {
        hints = /* @__PURE__ */ new Map();
      }
      if (options === void 0) {
        options = {};
      }
      this.reader = reader;
      this.hints = hints;
      this.options = __assign(__assign({}, defaultOptions), options);
    }
    Object.defineProperty(BrowserCodeReader3.prototype, "possibleFormats", {
      /**
       * Allows to change the possible formats the decoder should
       * search for while scanning some image. Useful for changing
       * the possible formats during BrowserCodeReader::scan.
       */
      set: function(formats) {
        this.hints.set(DecodeHintType_default.POSSIBLE_FORMATS, formats);
      },
      enumerable: false,
      configurable: true
    });
    BrowserCodeReader3.addVideoSource = function(videoElement, stream) {
      try {
        videoElement.srcObject = stream;
      } catch (err) {
        console.error("got interrupted by new loading request");
      }
    };
    BrowserCodeReader3.mediaStreamSetTorch = function(track, onOff) {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, track.applyConstraints({
                advanced: [{
                  fillLightMode: onOff ? "flash" : "off",
                  torch: onOff ? true : false
                }]
              })];
            case 1:
              _a2.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.mediaStreamIsTorchCompatible = function(params) {
      var e_1, _a2;
      var tracks = params.getVideoTracks();
      try {
        for (var tracks_1 = __values48(tracks), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()) {
          var track = tracks_1_1.value;
          if (BrowserCodeReader3.mediaStreamIsTorchCompatibleTrack(track)) {
            return true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (tracks_1_1 && !tracks_1_1.done && (_a2 = tracks_1.return)) _a2.call(tracks_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      return false;
    };
    BrowserCodeReader3.mediaStreamIsTorchCompatibleTrack = function(track) {
      try {
        var capabilities = track.getCapabilities();
        return "torch" in capabilities;
      } catch (err) {
        console.error(err);
        console.warn("Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.");
        return false;
      }
    };
    BrowserCodeReader3.isVideoPlaying = function(video) {
      return video.currentTime > 0 && !video.paused && video.readyState > 2;
    };
    BrowserCodeReader3.getMediaElement = function(mediaElementId, type) {
      var mediaElement = document.getElementById(mediaElementId);
      if (!mediaElement) {
        throw new ArgumentException_default("element with id '".concat(mediaElementId, "' not found"));
      }
      if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {
        throw new ArgumentException_default("element with id '".concat(mediaElementId, "' must be an ").concat(type, " element"));
      }
      return mediaElement;
    };
    BrowserCodeReader3.createVideoElement = function(videoThingy) {
      if (videoThingy instanceof HTMLVideoElement) {
        return videoThingy;
      }
      if (typeof videoThingy === "string") {
        return BrowserCodeReader3.getMediaElement(videoThingy, "video");
      }
      if (!videoThingy && typeof document !== "undefined") {
        var videoElement = document.createElement("video");
        videoElement.width = 200;
        videoElement.height = 200;
        return videoElement;
      }
      throw new Error("Couldn't get videoElement from videoSource!");
    };
    BrowserCodeReader3.prepareImageElement = function(imageSource) {
      if (imageSource instanceof HTMLImageElement) {
        return imageSource;
      }
      if (typeof imageSource === "string") {
        return BrowserCodeReader3.getMediaElement(imageSource, "img");
      }
      if (typeof imageSource === "undefined") {
        var imageElement = document.createElement("img");
        imageElement.width = 200;
        imageElement.height = 200;
        return imageElement;
      }
      throw new Error("Couldn't get imageElement from imageSource!");
    };
    BrowserCodeReader3.prepareVideoElement = function(videoElem) {
      var videoElement = BrowserCodeReader3.createVideoElement(videoElem);
      videoElement.setAttribute("autoplay", "true");
      videoElement.setAttribute("muted", "true");
      videoElement.setAttribute("playsinline", "true");
      return videoElement;
    };
    BrowserCodeReader3.isImageLoaded = function(img) {
      if (!img.complete) {
        return false;
      }
      if (img.naturalWidth === 0) {
        return false;
      }
      return true;
    };
    BrowserCodeReader3.createBinaryBitmapFromCanvas = function(canvas) {
      var luminanceSource = new HTMLCanvasElementLuminanceSource2(canvas);
      var hybridBinarizer = new HybridBinarizer_default(luminanceSource);
      return new BinaryBitmap_default(hybridBinarizer);
    };
    BrowserCodeReader3.drawImageOnCanvas = function(canvasElementContext, srcElement) {
      canvasElementContext.drawImage(srcElement, 0, 0);
    };
    BrowserCodeReader3.getMediaElementDimensions = function(mediaElement) {
      if (mediaElement instanceof HTMLVideoElement) {
        return {
          height: mediaElement.videoHeight,
          width: mediaElement.videoWidth
        };
      }
      if (mediaElement instanceof HTMLImageElement) {
        return {
          height: mediaElement.naturalHeight || mediaElement.height,
          width: mediaElement.naturalWidth || mediaElement.width
        };
      }
      throw new Error("Couldn't find the Source's dimensions!");
    };
    BrowserCodeReader3.createCaptureCanvas = function(mediaElement) {
      if (!mediaElement) {
        throw new ArgumentException_default("Cannot create a capture canvas without a media element.");
      }
      if (typeof document === "undefined") {
        throw new Error(`The page "Document" is undefined, make sure you're running in a browser.`);
      }
      var canvasElement = document.createElement("canvas");
      var _a2 = BrowserCodeReader3.getMediaElementDimensions(mediaElement), width = _a2.width, height = _a2.height;
      canvasElement.style.width = width + "px";
      canvasElement.style.height = height + "px";
      canvasElement.width = width;
      canvasElement.height = height;
      return canvasElement;
    };
    BrowserCodeReader3.tryPlayVideo = function(videoElement) {
      return __awaiter2(this, void 0, void 0, function() {
        var error_1;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (videoElement === null || videoElement === void 0 ? void 0 : videoElement.ended) {
                console.error("Trying to play video that has ended.");
                return [2, false];
              }
              if (BrowserCodeReader3.isVideoPlaying(videoElement)) {
                console.warn("Trying to play video that is already playing.");
                return [2, true];
              }
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, videoElement.play()];
            case 2:
              _a2.sent();
              return [2, true];
            case 3:
              error_1 = _a2.sent();
              console.warn("It was not possible to play the video.", error_1);
              return [2, false];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.createCanvasFromMediaElement = function(mediaElement) {
      var canvas = BrowserCodeReader3.createCaptureCanvas(mediaElement);
      var ctx = canvas.getContext("2d");
      if (!ctx) {
        throw new Error("Couldn't find Canvas 2D Context.");
      }
      BrowserCodeReader3.drawImageOnCanvas(ctx, mediaElement);
      return canvas;
    };
    BrowserCodeReader3.createBinaryBitmapFromMediaElem = function(mediaElement) {
      var canvas = BrowserCodeReader3.createCanvasFromMediaElement(mediaElement);
      return BrowserCodeReader3.createBinaryBitmapFromCanvas(canvas);
    };
    BrowserCodeReader3.destroyImageElement = function(imageElement) {
      imageElement.src = "";
      imageElement.removeAttribute("src");
      imageElement = void 0;
    };
    BrowserCodeReader3.listVideoInputDevices = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;
        var e_2, _a2;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!hasNavigator()) {
                throw new Error("Can't enumerate devices, navigator is not present.");
              }
              if (!canEnumerateDevices()) {
                throw new Error("Can't enumerate devices, method not supported.");
              }
              return [4, navigator.mediaDevices.enumerateDevices()];
            case 1:
              devices = _b.sent();
              videoDevices = [];
              try {
                for (devices_1 = __values48(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
                  device = devices_1_1.value;
                  kind = device.kind === "video" ? "videoinput" : device.kind;
                  if (kind !== "videoinput") {
                    continue;
                  }
                  deviceId = device.deviceId || device.id;
                  label = device.label || "Video device ".concat(videoDevices.length + 1);
                  groupId = device.groupId;
                  videoDevice = { deviceId, label, kind, groupId };
                  videoDevices.push(videoDevice);
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (devices_1_1 && !devices_1_1.done && (_a2 = devices_1.return)) _a2.call(devices_1);
                } finally {
                  if (e_2) throw e_2.error;
                }
              }
              return [2, videoDevices];
          }
        });
      });
    };
    BrowserCodeReader3.findDeviceById = function(deviceId) {
      return __awaiter2(this, void 0, void 0, function() {
        var devices;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, BrowserCodeReader3.listVideoInputDevices()];
            case 1:
              devices = _a2.sent();
              if (!devices) {
                return [
                  2
                  /*return*/
                ];
              }
              return [2, devices.find(function(x) {
                return x.deviceId === deviceId;
              })];
          }
        });
      });
    };
    BrowserCodeReader3.cleanVideoSource = function(videoElement) {
      if (!videoElement) {
        return;
      }
      try {
        videoElement.srcObject = null;
      } catch (err) {
        videoElement.src = "";
      }
      if (videoElement) {
        videoElement.removeAttribute("src");
      }
    };
    BrowserCodeReader3.releaseAllStreams = function() {
      if (BrowserCodeReader3.streamTracker.length !== 0) {
        BrowserCodeReader3.streamTracker.forEach(function(mediaStream) {
          mediaStream.getTracks().forEach(function(track) {
            return track.stop();
          });
        });
      }
      BrowserCodeReader3.streamTracker = [];
    };
    BrowserCodeReader3.playVideoOnLoadAsync = function(element, timeout) {
      return __awaiter2(this, void 0, void 0, function() {
        var isPlaying;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, BrowserCodeReader3.tryPlayVideo(element)];
            case 1:
              isPlaying = _a2.sent();
              if (isPlaying) {
                return [2, true];
              }
              return [2, new Promise(function(resolve, reject) {
                var timeoutId = setTimeout(function() {
                  if (BrowserCodeReader3.isVideoPlaying(element)) {
                    return;
                  }
                  reject(false);
                  element.removeEventListener("canplay", videoCanPlayListener);
                }, timeout);
                var videoCanPlayListener = function() {
                  BrowserCodeReader3.tryPlayVideo(element).then(function(hasPlayed) {
                    clearTimeout(timeoutId);
                    element.removeEventListener("canplay", videoCanPlayListener);
                    resolve(hasPlayed);
                  });
                };
                element.addEventListener("canplay", videoCanPlayListener);
              })];
          }
        });
      });
    };
    BrowserCodeReader3.attachStreamToVideo = function(stream, preview, previewPlayTimeout) {
      if (previewPlayTimeout === void 0) {
        previewPlayTimeout = 5e3;
      }
      return __awaiter2(this, void 0, void 0, function() {
        var videoElement;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              videoElement = BrowserCodeReader3.prepareVideoElement(preview);
              BrowserCodeReader3.addVideoSource(videoElement, stream);
              return [4, BrowserCodeReader3.playVideoOnLoadAsync(videoElement, previewPlayTimeout)];
            case 1:
              _a2.sent();
              return [2, videoElement];
          }
        });
      });
    };
    BrowserCodeReader3._waitImageLoad = function(element) {
      return new Promise(function(resolve, reject) {
        var timeout = 1e4;
        var timeoutId = setTimeout(function() {
          if (BrowserCodeReader3.isImageLoaded(element)) {
            return;
          }
          element.removeEventListener("load", imageLoadedListener);
          reject();
        }, timeout);
        var imageLoadedListener = function() {
          clearTimeout(timeoutId);
          element.removeEventListener("load", imageLoadedListener);
          resolve();
        };
        element.addEventListener("load", imageLoadedListener);
      });
    };
    BrowserCodeReader3.checkCallbackFnOrThrow = function(callbackFn) {
      if (!callbackFn) {
        throw new ArgumentException_default("`callbackFn` is a required parameter, you cannot capture results without it.");
      }
    };
    BrowserCodeReader3.disposeMediaStream = function(stream) {
      stream.getVideoTracks().forEach(function(x) {
        return x.stop();
      });
      stream = void 0;
    };
    BrowserCodeReader3.prototype.decode = function(element) {
      var canvas = BrowserCodeReader3.createCanvasFromMediaElement(element);
      return this.decodeFromCanvas(canvas);
    };
    BrowserCodeReader3.prototype.decodeBitmap = function(binaryBitmap) {
      return this.reader.decode(binaryBitmap, this.hints);
    };
    BrowserCodeReader3.prototype.decodeFromCanvas = function(canvas) {
      var binaryBitmap = BrowserCodeReader3.createBinaryBitmapFromCanvas(canvas);
      return this.decodeBitmap(binaryBitmap);
    };
    BrowserCodeReader3.prototype.decodeFromImageElement = function(source) {
      return __awaiter2(this, void 0, void 0, function() {
        var element;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!source) {
                throw new ArgumentException_default("An image element must be provided.");
              }
              element = BrowserCodeReader3.prepareImageElement(source);
              return [4, this._decodeOnLoadImage(element)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromImageUrl = function(url) {
      return __awaiter2(this, void 0, void 0, function() {
        var element;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!url) {
                throw new ArgumentException_default("An URL must be provided.");
              }
              element = BrowserCodeReader3.prepareImageElement();
              element.src = url;
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, , 3, 4]);
              return [4, this.decodeFromImageElement(element)];
            case 2:
              return [2, _a2.sent()];
            case 3:
              BrowserCodeReader3.destroyImageElement(element);
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromConstraints = function(constraints, previewElem, callbackFn) {
      return __awaiter2(this, void 0, void 0, function() {
        var stream, error_2;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
              return [4, this.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              _a2.label = 2;
            case 2:
              _a2.trys.push([2, 4, , 5]);
              return [4, this.decodeFromStream(stream, previewElem, callbackFn)];
            case 3:
              return [2, _a2.sent()];
            case 4:
              error_2 = _a2.sent();
              BrowserCodeReader3.disposeMediaStream(stream);
              throw error_2;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromStream = function(stream, preview, callbackFn) {
      return __awaiter2(this, void 0, void 0, function() {
        var timeout, video, finalizeCallback, originalControls, videoTracks, controls, isTorchAvailable, torchTrack_1, switchTorch_1;
        var _this = this;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
              timeout = this.options.tryPlayVideoTimeout;
              return [4, BrowserCodeReader3.attachStreamToVideo(stream, preview, timeout)];
            case 1:
              video = _a2.sent();
              finalizeCallback = function() {
                BrowserCodeReader3.disposeMediaStream(stream);
                BrowserCodeReader3.cleanVideoSource(video);
              };
              originalControls = this.scan(video, callbackFn, finalizeCallback);
              videoTracks = stream.getVideoTracks();
              controls = __assign(__assign({}, originalControls), { stop: function() {
                originalControls.stop();
              }, streamVideoConstraintsApply: function(constraints, trackFilter) {
                return __awaiter2(this, void 0, void 0, function() {
                  var tracks, tracks_2, tracks_2_1, track, e_3_1;
                  var e_3, _a3;
                  return __generator2(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        tracks = trackFilter ? videoTracks.filter(trackFilter) : videoTracks;
                        _b.label = 1;
                      case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        tracks_2 = __values48(tracks), tracks_2_1 = tracks_2.next();
                        _b.label = 2;
                      case 2:
                        if (!!tracks_2_1.done) return [3, 5];
                        track = tracks_2_1.value;
                        return [4, track.applyConstraints(constraints)];
                      case 3:
                        _b.sent();
                        _b.label = 4;
                      case 4:
                        tracks_2_1 = tracks_2.next();
                        return [3, 2];
                      case 5:
                        return [3, 8];
                      case 6:
                        e_3_1 = _b.sent();
                        e_3 = { error: e_3_1 };
                        return [3, 8];
                      case 7:
                        try {
                          if (tracks_2_1 && !tracks_2_1.done && (_a3 = tracks_2.return)) _a3.call(tracks_2);
                        } finally {
                          if (e_3) throw e_3.error;
                        }
                        return [
                          7
                          /*endfinally*/
                        ];
                      case 8:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, streamVideoConstraintsGet: function(trackFilter) {
                return videoTracks.find(trackFilter).getConstraints();
              }, streamVideoSettingsGet: function(trackFilter) {
                return videoTracks.find(trackFilter).getSettings();
              }, streamVideoCapabilitiesGet: function(trackFilter) {
                return videoTracks.find(trackFilter).getCapabilities();
              } });
              isTorchAvailable = BrowserCodeReader3.mediaStreamIsTorchCompatible(stream);
              if (isTorchAvailable) {
                torchTrack_1 = videoTracks === null || videoTracks === void 0 ? void 0 : videoTracks.find(function(t) {
                  return BrowserCodeReader3.mediaStreamIsTorchCompatibleTrack(t);
                });
                switchTorch_1 = function(onOff) {
                  return __awaiter2(_this, void 0, void 0, function() {
                    return __generator2(this, function(_a3) {
                      switch (_a3.label) {
                        case 0:
                          return [4, BrowserCodeReader3.mediaStreamSetTorch(torchTrack_1, onOff)];
                        case 1:
                          _a3.sent();
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                };
                controls.switchTorch = switchTorch_1;
                controls.stop = function() {
                  return __awaiter2(_this, void 0, void 0, function() {
                    return __generator2(this, function(_a3) {
                      switch (_a3.label) {
                        case 0:
                          originalControls.stop();
                          return [4, switchTorch_1(false)];
                        case 1:
                          _a3.sent();
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                };
              }
              return [2, controls];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromVideoDevice = function(deviceId, previewElem, callbackFn) {
      return __awaiter2(this, void 0, void 0, function() {
        var videoConstraints, constraints;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
              if (!deviceId) {
                videoConstraints = { facingMode: "environment" };
              } else {
                videoConstraints = { deviceId: { exact: deviceId } };
              }
              constraints = { video: videoConstraints };
              return [4, this.decodeFromConstraints(constraints, previewElem, callbackFn)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromVideoElement = function(source, callbackFn) {
      return __awaiter2(this, void 0, void 0, function() {
        var element, timeout;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
              if (!source) {
                throw new ArgumentException_default("A video element must be provided.");
              }
              element = BrowserCodeReader3.prepareVideoElement(source);
              timeout = this.options.tryPlayVideoTimeout;
              return [4, BrowserCodeReader3.playVideoOnLoadAsync(element, timeout)];
            case 1:
              _a2.sent();
              return [2, this.scan(element, callbackFn)];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeFromVideoUrl = function(url, callbackFn) {
      return __awaiter2(this, void 0, void 0, function() {
        var element, finalizeCallback, timeout, controls;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
              if (!url) {
                throw new ArgumentException_default("An URL must be provided.");
              }
              element = BrowserCodeReader3.prepareVideoElement();
              element.src = url;
              finalizeCallback = function() {
                BrowserCodeReader3.cleanVideoSource(element);
              };
              timeout = this.options.tryPlayVideoTimeout;
              return [4, BrowserCodeReader3.playVideoOnLoadAsync(element, timeout)];
            case 1:
              _a2.sent();
              controls = this.scan(element, callbackFn, finalizeCallback);
              return [2, controls];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromConstraints = function(constraints, videoSource) {
      return __awaiter2(this, void 0, void 0, function() {
        var stream;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              return [4, this.decodeOnceFromStream(stream, videoSource)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromStream = function(stream, preview) {
      return __awaiter2(this, void 0, void 0, function() {
        var receivedPreview, video, result;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              receivedPreview = Boolean(preview);
              return [4, BrowserCodeReader3.attachStreamToVideo(stream, preview)];
            case 1:
              video = _a2.sent();
              _a2.label = 2;
            case 2:
              _a2.trys.push([2, , 4, 5]);
              return [4, this.scanOneResult(video)];
            case 3:
              result = _a2.sent();
              return [2, result];
            case 4:
              if (!receivedPreview) {
                BrowserCodeReader3.cleanVideoSource(video);
              }
              return [
                7
                /*endfinally*/
              ];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromVideoDevice = function(deviceId, videoSource) {
      return __awaiter2(this, void 0, void 0, function() {
        var videoConstraints, constraints;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!deviceId) {
                videoConstraints = { facingMode: "environment" };
              } else {
                videoConstraints = { deviceId: { exact: deviceId } };
              }
              constraints = { video: videoConstraints };
              return [4, this.decodeOnceFromConstraints(constraints, videoSource)];
            case 1:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromVideoElement = function(source) {
      return __awaiter2(this, void 0, void 0, function() {
        var element, timeout;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!source) {
                throw new ArgumentException_default("A video element must be provided.");
              }
              element = BrowserCodeReader3.prepareVideoElement(source);
              timeout = this.options.tryPlayVideoTimeout;
              return [4, BrowserCodeReader3.playVideoOnLoadAsync(element, timeout)];
            case 1:
              _a2.sent();
              return [4, this.scanOneResult(element)];
            case 2:
              return [2, _a2.sent()];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.decodeOnceFromVideoUrl = function(url) {
      return __awaiter2(this, void 0, void 0, function() {
        var element, task;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!url) {
                throw new ArgumentException_default("An URL must be provided.");
              }
              element = BrowserCodeReader3.prepareVideoElement();
              element.src = url;
              task = this.decodeOnceFromVideoElement(element);
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, , 3, 4]);
              return [4, task];
            case 2:
              return [2, _a2.sent()];
            case 3:
              BrowserCodeReader3.cleanVideoSource(element);
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.scanOneResult = function(element, retryIfNotFound, retryIfChecksumError, retryIfFormatError) {
      var _this = this;
      if (retryIfNotFound === void 0) {
        retryIfNotFound = true;
      }
      if (retryIfChecksumError === void 0) {
        retryIfChecksumError = true;
      }
      if (retryIfFormatError === void 0) {
        retryIfFormatError = true;
      }
      return new Promise(function(resolve, reject) {
        _this.scan(element, function(result, error, controls) {
          if (result) {
            resolve(result);
            controls.stop();
            return;
          }
          if (error) {
            if (error instanceof NotFoundException_default && retryIfNotFound) {
              return;
            }
            if (error instanceof ChecksumException_default && retryIfChecksumError) {
              return;
            }
            if (error instanceof FormatException_default && retryIfFormatError) {
              return;
            }
            controls.stop();
            reject(error);
          }
        });
      });
    };
    BrowserCodeReader3.prototype.scan = function(element, callbackFn, finalizeCallback) {
      var _this = this;
      BrowserCodeReader3.checkCallbackFnOrThrow(callbackFn);
      var captureCanvas = BrowserCodeReader3.createCaptureCanvas(element);
      var captureCanvasContext;
      try {
        captureCanvasContext = captureCanvas.getContext("2d", { willReadFrequently: true });
      } catch (e) {
        captureCanvasContext = captureCanvas.getContext("2d");
      }
      if (!captureCanvasContext) {
        throw new Error("Couldn't create canvas for visual element scan.");
      }
      var disposeCanvas = function() {
        captureCanvasContext = void 0;
        captureCanvas = void 0;
      };
      var stopScan = false;
      var lastTimeoutId;
      var stop = function() {
        stopScan = true;
        clearTimeout(lastTimeoutId);
        disposeCanvas();
        if (finalizeCallback) {
          finalizeCallback();
        }
      };
      var controls = { stop };
      var loop = function() {
        if (stopScan) {
          return;
        }
        try {
          BrowserCodeReader3.drawImageOnCanvas(captureCanvasContext, element);
          var result = _this.decodeFromCanvas(captureCanvas);
          callbackFn(result, void 0, controls);
          lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanSuccess);
        } catch (error) {
          callbackFn(void 0, error, controls);
          var isChecksumError = error instanceof ChecksumException_default;
          var isFormatError = error instanceof FormatException_default;
          var isNotFound = error instanceof NotFoundException_default;
          if (isChecksumError || isFormatError || isNotFound) {
            lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanAttempts);
            return;
          }
          disposeCanvas();
          if (finalizeCallback) {
            finalizeCallback(error);
          }
        }
      };
      loop();
      return controls;
    };
    BrowserCodeReader3.prototype._decodeOnLoadImage = function(element) {
      return __awaiter2(this, void 0, void 0, function() {
        var isImageLoaded;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              isImageLoaded = BrowserCodeReader3.isImageLoaded(element);
              if (!!isImageLoaded) return [3, 2];
              return [4, BrowserCodeReader3._waitImageLoad(element)];
            case 1:
              _a2.sent();
              _a2.label = 2;
            case 2:
              return [2, this.decode(element)];
          }
        });
      });
    };
    BrowserCodeReader3.prototype.getUserMedia = function(constraints) {
      return __awaiter2(this, void 0, void 0, function() {
        var stream;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, navigator.mediaDevices.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              BrowserCodeReader3.streamTracker.push(stream);
              return [2, stream];
          }
        });
      });
    };
    BrowserCodeReader3.streamTracker = [];
    return BrowserCodeReader3;
  }()
);

// node_modules/@zxing/browser/esm/readers/BrowserAztecCodeReader.js
var __extends76 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserAztecCodeReader2 = (
  /** @class */
  function(_super) {
    __extends76(BrowserAztecCodeReader3, _super);
    function BrowserAztecCodeReader3(hints, options) {
      return _super.call(this, new AztecReader_default(), hints, options) || this;
    }
    return BrowserAztecCodeReader3;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/readers/BrowserMultiFormatOneDReader.js
var __extends77 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserMultiFormatOneDReader = (
  /** @class */
  function(_super) {
    __extends77(BrowserMultiFormatOneDReader2, _super);
    function BrowserMultiFormatOneDReader2(hints, options) {
      return _super.call(this, new MultiFormatOneDReader_default(hints), hints, options) || this;
    }
    return BrowserMultiFormatOneDReader2;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/readers/BrowserDatamatrixCodeReader.js
var __extends78 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserDatamatrixCodeReader2 = (
  /** @class */
  function(_super) {
    __extends78(BrowserDatamatrixCodeReader3, _super);
    function BrowserDatamatrixCodeReader3(hints, options) {
      return _super.call(this, new DataMatrixReader_default(), hints, options) || this;
    }
    return BrowserDatamatrixCodeReader3;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/readers/BrowserMultiFormatReader.js
var __extends79 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserMultiFormatReader2 = (
  /** @class */
  function(_super) {
    __extends79(BrowserMultiFormatReader3, _super);
    function BrowserMultiFormatReader3(hints, options) {
      var _this = this;
      var reader = new MultiFormatReader_default();
      reader.setHints(hints);
      _this = _super.call(this, reader, hints, options) || this;
      _this.reader = reader;
      return _this;
    }
    Object.defineProperty(BrowserMultiFormatReader3.prototype, "possibleFormats", {
      set: function(formats) {
        this.hints.set(DecodeHintType_default.POSSIBLE_FORMATS, formats);
        this.reader.setHints(this.hints);
      },
      enumerable: false,
      configurable: true
    });
    BrowserMultiFormatReader3.prototype.decodeBitmap = function(binaryBitmap) {
      return this.reader.decodeWithState(binaryBitmap);
    };
    BrowserMultiFormatReader3.prototype.setHints = function(hints) {
      this.hints = hints;
      this.reader.setHints(this.hints);
    };
    return BrowserMultiFormatReader3;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/readers/BrowserPDF417Reader.js
var __extends80 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserPDF417Reader2 = (
  /** @class */
  function(_super) {
    __extends80(BrowserPDF417Reader3, _super);
    function BrowserPDF417Reader3(hints, options) {
      return _super.call(this, new PDF417Reader_default(), hints, options) || this;
    }
    return BrowserPDF417Reader3;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/readers/BrowserQRCodeReader.js
var __extends81 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BrowserQRCodeReader2 = (
  /** @class */
  function(_super) {
    __extends81(BrowserQRCodeReader3, _super);
    function BrowserQRCodeReader3(hints, options) {
      return _super.call(this, new QRCodeReader_default(), hints, options) || this;
    }
    return BrowserQRCodeReader3;
  }(BrowserCodeReader2)
);

// node_modules/@zxing/browser/esm/writers/BrowserCodeSvgWriter.js
var svgNs = "http://www.w3.org/2000/svg";
var BrowserCodeSvgWriter = (
  /** @class */
  function() {
    function BrowserCodeSvgWriter2(containerElement) {
      if (typeof containerElement === "string") {
        var container2 = document.getElementById(containerElement);
        if (!container2) {
          throw new Error("Could not find a Container element with '".concat(containerElement, "'."));
        }
        this.containerElement = container2;
      } else {
        this.containerElement = containerElement;
      }
    }
    BrowserCodeSvgWriter2.prototype.write = function(contents, width, height, hints) {
      if (contents.length === 0) {
        throw new IllegalArgumentException_default("Found empty contents");
      }
      if (width < 0 || height < 0) {
        throw new IllegalArgumentException_default("Requested dimensions are too small: " + width + "x" + height);
      }
      var quietZone = hints && hints.get(EncodeHintType_default.MARGIN) !== void 0 ? Number.parseInt(hints.get(EncodeHintType_default.MARGIN).toString(), 10) : BrowserCodeSvgWriter2.QUIET_ZONE_SIZE;
      var code = this.encode(hints, contents);
      return this.renderResult(code, width, height, quietZone);
    };
    BrowserCodeSvgWriter2.prototype.createSVGElement = function(w, h) {
      var el = document.createElementNS(BrowserCodeSvgWriter2.SVG_NS, "svg");
      el.setAttributeNS(svgNs, "width", h.toString());
      el.setAttributeNS(svgNs, "height", w.toString());
      return el;
    };
    BrowserCodeSvgWriter2.prototype.createSvgPathPlaceholderElement = function(w, h) {
      var el = document.createElementNS(BrowserCodeSvgWriter2.SVG_NS, "path");
      el.setAttributeNS(svgNs, "d", "M0 0h".concat(w, "v").concat(h, "H0z"));
      el.setAttributeNS(svgNs, "fill", "none");
      return el;
    };
    BrowserCodeSvgWriter2.prototype.createSvgRectElement = function(x, y, w, h) {
      var el = document.createElementNS(BrowserCodeSvgWriter2.SVG_NS, "rect");
      el.setAttributeNS(svgNs, "x", x.toString());
      el.setAttributeNS(svgNs, "y", y.toString());
      el.setAttributeNS(svgNs, "height", w.toString());
      el.setAttributeNS(svgNs, "width", h.toString());
      el.setAttributeNS(svgNs, "fill", "#000000");
      return el;
    };
    BrowserCodeSvgWriter2.prototype.encode = function(hints, contents) {
      var errorCorrectionLevel = ErrorCorrectionLevel_default.L;
      if (hints && hints.get(EncodeHintType_default.ERROR_CORRECTION) !== void 0) {
        var correctionStr = hints.get(EncodeHintType_default.ERROR_CORRECTION).toString();
        errorCorrectionLevel = ErrorCorrectionLevel_default.fromString(correctionStr);
      }
      var code = Encoder_default.encode(contents, errorCorrectionLevel, hints);
      return code;
    };
    BrowserCodeSvgWriter2.prototype.renderResult = function(code, width, height, quietZone) {
      var input = code.getMatrix();
      if (input === null) {
        throw new IllegalStateException_default();
      }
      var inputWidth = input.getWidth();
      var inputHeight = input.getHeight();
      var qrWidth = inputWidth + quietZone * 2;
      var qrHeight = inputHeight + quietZone * 2;
      var outputWidth = Math.max(width, qrWidth);
      var outputHeight = Math.max(height, qrHeight);
      var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
      var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
      var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
      var svgElement = this.createSVGElement(outputWidth, outputHeight);
      var placeholder = this.createSvgPathPlaceholderElement(width, height);
      svgElement.appendChild(placeholder);
      this.containerElement.appendChild(svgElement);
      for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {
          if (input.get(inputX, inputY) === 1) {
            var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);
            svgElement.appendChild(svgRectElement);
          }
        }
      }
      return svgElement;
    };
    BrowserCodeSvgWriter2.QUIET_ZONE_SIZE = 4;
    BrowserCodeSvgWriter2.SVG_NS = "http://www.w3.org/2000/svg";
    return BrowserCodeSvgWriter2;
  }()
);

// node_modules/@zxing/browser/esm/writers/BrowserQRCodeSvgWriter.js
var svgNs2 = "http://www.w3.org/2000/svg";
var BrowserQRCodeSvgWriter2 = (
  /** @class */
  function() {
    function BrowserQRCodeSvgWriter3() {
    }
    BrowserQRCodeSvgWriter3.prototype.write = function(contents, width, height, hints) {
      if (contents.length === 0) {
        throw new IllegalArgumentException_default("Found empty contents");
      }
      if (width < 0 || height < 0) {
        throw new IllegalArgumentException_default("Requested dimensions are too small: " + width + "x" + height);
      }
      var errorCorrectionLevel = ErrorCorrectionLevel_default.L;
      var quietZone = BrowserQRCodeSvgWriter3.QUIET_ZONE_SIZE;
      if (hints) {
        if (void 0 !== hints.get(EncodeHintType_default.ERROR_CORRECTION)) {
          var correctionStr = hints.get(EncodeHintType_default.ERROR_CORRECTION).toString();
          errorCorrectionLevel = ErrorCorrectionLevel_default.fromString(correctionStr);
        }
        if (void 0 !== hints.get(EncodeHintType_default.MARGIN)) {
          quietZone = Number.parseInt(hints.get(EncodeHintType_default.MARGIN).toString(), 10);
        }
      }
      var code = Encoder_default.encode(contents, errorCorrectionLevel, hints);
      return this.renderResult(code, width, height, quietZone);
    };
    BrowserQRCodeSvgWriter3.prototype.writeToDom = function(containerElement, contents, width, height, hints) {
      if (typeof containerElement === "string") {
        var targetEl = document.querySelector(containerElement);
        if (!targetEl) {
          throw new Error("Could no find the target HTML element.");
        }
        containerElement = targetEl;
      }
      var svgElement = this.write(contents, width, height, hints);
      if (containerElement instanceof HTMLElement) {
        containerElement.appendChild(svgElement);
      }
    };
    BrowserQRCodeSvgWriter3.prototype.renderResult = function(code, width, height, quietZone) {
      var input = code.getMatrix();
      if (input === null) {
        throw new IllegalStateException_default();
      }
      var inputWidth = input.getWidth();
      var inputHeight = input.getHeight();
      var qrWidth = inputWidth + quietZone * 2;
      var qrHeight = inputHeight + quietZone * 2;
      var outputWidth = Math.max(width, qrWidth);
      var outputHeight = Math.max(height, qrHeight);
      var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
      var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
      var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
      var svgElement = this.createSVGElement(outputWidth, outputHeight);
      for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {
        for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {
          if (input.get(inputX, inputY) === 1) {
            var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);
            svgElement.appendChild(svgRectElement);
          }
        }
      }
      return svgElement;
    };
    BrowserQRCodeSvgWriter3.prototype.createSVGElement = function(w, h) {
      var svgElement = document.createElementNS(svgNs2, "svg");
      var width = w.toString();
      var height = h.toString();
      svgElement.setAttribute("height", height);
      svgElement.setAttribute("width", width);
      svgElement.setAttribute("viewBox", "0 0 " + width + " " + height);
      return svgElement;
    };
    BrowserQRCodeSvgWriter3.prototype.createSvgRectElement = function(x, y, w, h) {
      var rect = document.createElementNS(svgNs2, "rect");
      rect.setAttribute("x", x.toString());
      rect.setAttribute("y", y.toString());
      rect.setAttribute("height", w.toString());
      rect.setAttribute("width", h.toString());
      rect.setAttribute("fill", "#000000");
      return rect;
    };
    BrowserQRCodeSvgWriter3.QUIET_ZONE_SIZE = 4;
    return BrowserQRCodeSvgWriter3;
  }()
);

// src/pages/OpNewPage.jsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var ZXING_FORMATS = [
  BarcodeFormat_default.EAN_13,
  BarcodeFormat_default.EAN_8,
  BarcodeFormat_default.UPC_A,
  BarcodeFormat_default.UPC_E,
  BarcodeFormat_default.ITF,
  BarcodeFormat_default.CODE_128,
  BarcodeFormat_default.CODE_39,
  BarcodeFormat_default.CODABAR
].filter(Boolean);
var QUICK_QTY = [1, 5, 10, 12];
function firstBarcode(item) {
  return item?.base_barcode || (item?.barcode_list ? String(item.barcode_list).split(",")[0]?.trim() : "") || item?.code || "";
}
async function listVideoDevices(reader) {
  const devices = await reader.listVideoInputDevices();
  return (devices || []).map((device) => ({
    deviceId: device.deviceId || device.id,
    label: device.label || ""
  })).filter((device) => device.deviceId);
}
function pickCamera(devices) {
  const prefer = [/macro|tele|zoom|close/i, /back|environment|rear/i];
  for (const pattern of prefer) {
    const match = devices.find((device) => pattern.test(device.label));
    if (match) return match.deviceId;
  }
  return devices[0]?.deviceId ?? null;
}
function OpNewPage() {
  const { id } = useParams();
  const docId = Number(id);
  const navigate = useNavigate();
  const { api: api2, toNumber: toNumber2, setAppTitle: setAppTitle2 } = useApp();
  const { t, fmt, locale } = useI18n();
  const { showToast } = useToast();
  const [docCtx, setDocCtx] = (0, import_react12.useState)({ price_type_id: null, stock_id: null });
  const [barcodeValue, setBarcodeValue] = (0, import_react12.useState)("");
  const [queryValue, setQueryValue] = (0, import_react12.useState)("");
  const [quantity, setQuantity] = (0, import_react12.useState)("");
  const [cost, setCost] = (0, import_react12.useState)("");
  const [price, setPrice] = (0, import_react12.useState)("");
  const [description, setDescription] = (0, import_react12.useState)("");
  const [searchStatus, setSearchStatus] = (0, import_react12.useState)("idle");
  const [picked, setPicked] = (0, import_react12.useState)(null);
  const [saving, setSaving] = (0, import_react12.useState)(false);
  const [scanning, setScanning] = (0, import_react12.useState)(false);
  const [currentDeviceId, setCurrentDeviceId] = (0, import_react12.useState)(null);
  const videoRef = (0, import_react12.useRef)(null);
  const readerRef = (0, import_react12.useRef)(null);
  const controlsRef = (0, import_react12.useRef)(null);
  (0, import_react12.useEffect)(() => {
    setAppTitle2(t("op.title") || "\u041D\u043E\u0432\u0430\u044F \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044F");
  }, [locale, setAppTitle2, t]);
  (0, import_react12.useEffect)(() => {
    async function loadDocMeta() {
      try {
        const { data } = await api2("purchase_get", { doc_id: docId });
        const doc = data?.result?.doc;
        setDocCtx({
          price_type_id: doc?.price_type?.id ?? null,
          stock_id: doc?.stock?.id ?? null
        });
      } catch (err) {
        console.warn("[op_new] failed to fetch doc context", err);
      }
    }
    loadDocMeta();
  }, [api2, docId]);
  const runSearch = (0, import_react12.useCallback)(async (value) => {
    const queryText = value?.trim();
    if (!queryText) return;
    setSearchStatus("loading");
    try {
      const payload = { q: queryText, doc_id: docId };
      if (docCtx.price_type_id != null) payload.price_type_id = Number(docCtx.price_type_id);
      if (docCtx.stock_id != null) payload.stock_id = Number(docCtx.stock_id);
      const { data } = await api2("product_search", payload);
      const items = data?.result?.items || [];
      if (!items.length) {
        setPicked(null);
        setSearchStatus("empty");
        return;
      }
      const ext = items[0];
      const core = ext?.item || {};
      setPicked({
        id: Number(core.id ?? core.code),
        name: core.name || "\u2014",
        barcode: firstBarcode(core),
        vat_value: Number(core?.vat?.value ?? 0),
        last_purchase_cost: ext?.last_purchase_cost ?? null,
        price: ext?.price != null ? Number(ext.price) : null,
        quantity_common: ext?.quantity?.common ?? null,
        unit: core?.unit?.name || "\u0448\u0442"
      });
      setSearchStatus("done");
      window.setTimeout(() => {
        document.getElementById("qty")?.focus();
      }, 0);
    } catch (err) {
      console.warn("[search] error", err);
      setPicked(null);
      setSearchStatus("error");
    }
  }, [api2, docCtx.price_type_id, docCtx.stock_id, docId]);
  const ensureReader = (0, import_react12.useCallback)(async () => {
    if (readerRef.current) return readerRef.current;
    const hints = /* @__PURE__ */ new Map();
    readerRef.current = new BrowserMultiFormatReader2(hints, {
      delayBetweenScanAttempts: 250
    });
    return readerRef.current;
  }, []);
  const stopScan = (0, import_react12.useCallback)(() => {
    setScanning(false);
    try {
      controlsRef.current?.stop?.();
      controlsRef.current = null;
    } catch (err) {
      console.warn("[scan] stop error", err);
    }
    try {
      readerRef.current?.reset?.();
    } catch (err) {
      console.warn("[scan] reset error", err);
    }
    const video = videoRef.current;
    if (video) {
      try {
        video.pause?.();
      } catch {
      }
      try {
        video.srcObject = null;
      } catch {
      }
    }
  }, []);
  (0, import_react12.useEffect)(() => {
    const visibilityHandler = () => {
      if (document.hidden) stopScan();
    };
    document.addEventListener("visibilitychange", visibilityHandler);
    window.addEventListener("pagehide", stopScan);
    return () => {
      document.removeEventListener("visibilitychange", visibilityHandler);
      window.removeEventListener("pagehide", stopScan);
      stopScan();
    };
  }, [stopScan]);
  (0, import_react12.useEffect)(() => {
    document.getElementById("barcode")?.focus();
  }, []);
  const startScan = (0, import_react12.useCallback)(async () => {
    if (window.location.protocol !== "https:" && window.location.hostname !== "localhost") {
      showToast(t("camera_open_failed") || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u0430\u043C\u0435\u0440\u0443", { type: "error" });
      return;
    }
    try {
      const reader = await ensureReader();
      const devices = await listVideoDevices(reader);
      if (!devices.length) {
        showToast(t("camera_open_failed") || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u0430\u043C\u0435\u0440\u0443", { type: "error" });
        return;
      }
      const selectedDeviceId = currentDeviceId || pickCamera(devices) || devices[0].deviceId;
      setCurrentDeviceId(selectedDeviceId);
      const controls = await reader.decodeFromVideoDevice(selectedDeviceId, videoRef.current, (result, err) => {
        if (result?.text) {
          const code = result.text;
          setBarcodeValue(code);
          setQueryValue(code);
          stopScan();
          runSearch(code);
          try {
            navigator.vibrate?.(35);
          } catch {
          }
        } else if (err && err.name !== "NotFoundException") {
          console.debug("[ZXing]", err?.name || err);
        }
      });
      controlsRef.current = controls;
      setScanning(true);
    } catch (err) {
      console.error("[scan] start error", err);
      showToast(t("camera_open_failed") || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u0430\u043C\u0435\u0440\u0443", { type: "error" });
      stopScan();
    }
  }, [currentDeviceId, ensureReader, runSearch, showToast, stopScan, t]);
  const handleSubmit = async () => {
    if (!picked?.id) {
      showToast(t("select_product_first") || "\u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u043E\u0432\u0430\u0440", { type: "error" });
      return;
    }
    const qtyNumber = toNumber2(quantity);
    const costNumber = toNumber2(cost);
    if (!qtyNumber || qtyNumber <= 0 || !costNumber || costNumber <= 0) {
      showToast(t("fill_required_fields") || "\u0417\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u0435 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043F\u043E\u043B\u044F", { type: "error" });
      return;
    }
    const payload = {
      items: [{
        document_id: docId,
        item_id: Number(picked.id),
        quantity: qtyNumber,
        cost: costNumber,
        vat_value: Number(picked.vat_value ?? 0)
      }]
    };
    const priceNumber = toNumber2(price);
    if (priceNumber > 0) payload.items[0].price = priceNumber;
    if (description.trim()) payload.items[0].description = description.trim();
    setSaving(true);
    try {
      const { ok, data } = await api2("purchase_ops_add", payload);
      const affected = data?.result?.row_affected || 0;
      if (ok && affected > 0) {
        showToast(t("toast.op_added") || "\u041E\u043F\u0435\u0440\u0430\u0446\u0438\u044F \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430", { type: "success" });
        setQuantity("");
        setCost("");
        setPrice("");
        setBarcodeValue("");
        setQueryValue("");
        setPicked(null);
        setSearchStatus("idle");
        window.setTimeout(() => document.getElementById("barcode")?.focus(), 0);
      } else {
        throw new Error(data?.description || "Save failed");
      }
    } catch (err) {
      showToast(err.message || t("save_failed") || "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044E", { type: "error", duration: 2400 });
    } finally {
      setSaving(false);
    }
  };
  const descriptionPreview = (0, import_react12.useMemo)(() => {
    if (!description.trim() || !picked) return "";
    return `${t("op.description") || "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"}: ${description.trim()}`;
  }, [description, picked, t]);
  const lpcLabel = (0, import_react12.useMemo)(() => {
    if (picked?.last_purchase_cost == null) return null;
    return fmt.money(picked.last_purchase_cost);
  }, [fmt, picked]);
  const priceLabel = (0, import_react12.useMemo)(() => {
    if (picked?.price == null) return null;
    return fmt.money(picked.price);
  }, [fmt, picked]);
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("section", { className: "stack", id: "op-new", children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h1", { children: t("op.title") || "\u041D\u043E\u0432\u0430\u044F \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u044F" }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { id: "scanner", className: `stack${scanning ? "" : " hidden"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("video", { id: "preview", ref: videoRef, playsInline: true, autoPlay: true, muted: true }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "muted", children: t("scanner.hint") || "\u041D\u0430\u0432\u0435\u0434\u0438 \u043A\u0430\u043C\u0435\u0440\u0443 \u043D\u0430 \u0448\u0442\u0440\u0438\u0445-\u043A\u043E\u0434" }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "button",
          {
            id: "btn-close-scan",
            type: "button",
            className: "btn icon",
            onClick: stopScan,
            "aria-label": t("common.cancel") || "\u041E\u0442\u043C\u0435\u043D\u0430",
            title: t("common.cancel") || "\u041E\u0442\u043C\u0435\u043D\u0430",
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("i", { className: "fa-solid fa-xmark", "aria-hidden": "true" })
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "input-row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { htmlFor: "barcode", className: "sr-only", children: t("op.scan") || "\u0428\u0442\u0440\u0438\u0445-\u043A\u043E\u0434" }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "barcode",
          type: "search",
          inputMode: "search",
          value: barcodeValue,
          placeholder: t("op.barcode.placeholder") || "\u0438\u043B\u0438 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0448\u0442\u0440\u0438\u0445-\u043A\u043E\u0434 \u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 Enter",
          onChange: (event) => setBarcodeValue(event.target.value),
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              event.preventDefault();
              runSearch(barcodeValue);
            }
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "button",
        {
          id: "btn-scan",
          type: "button",
          className: "btn icon",
          onClick: startScan,
          "aria-label": t("op.scan") || "\u0421\u043A\u0430\u043D \u0448\u0442\u0440\u0438\u0445-\u043A\u043E\u0434\u0430",
          title: t("op.scan") || "\u0421\u043A\u0430\u043D \u0448\u0442\u0440\u0438\u0445-\u043A\u043E\u0434\u0430",
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("i", { className: "fa-solid fa-camera", "aria-hidden": "true" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { htmlFor: "product-query", children: t("op.search.label") || "\u041F\u043E\u0438\u0441\u043A \u0442\u043E\u0432\u0430\u0440\u0430" }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "product-query",
          type: "search",
          value: queryValue,
          placeholder: t("op.search.placeholder") || "\u041D\u0430\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u043D\u0438\u0435 / \u0430\u0440\u0442\u0438\u043A\u0443\u043B",
          onChange: (event) => setQueryValue(event.target.value),
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              event.preventDefault();
              runSearch(queryValue);
            }
          },
          onSearch: (event) => runSearch(event.target.value)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { id: "product-results", className: "muted", "aria-live": "polite", children: [
        searchStatus === "loading" && (t("searching") || "\u041F\u043E\u0438\u0441\u043A..."),
        searchStatus === "empty" && (t("common.nothing") || "\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E"),
        searchStatus === "error" && (t("search_error") || "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u043E\u0438\u0441\u043A\u0430")
      ] })
    ] }),
    picked && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { id: "product-picked", className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("strong", { id: "picked-name", children: picked.name }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "muted", children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { id: "picked-code", children: picked.barcode }),
        picked.quantity_common != null && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "dot" }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("span", { children: [
            fmt.number(picked.quantity_common),
            " ",
            t("unit.pcs") || "\u0448\u0442"
          ] })
        ] })
      ] }),
      descriptionPreview && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { id: "picked-desc", className: "muted", children: descriptionPreview })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("label", { htmlFor: "qty", children: [
        t("op.qty") || "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "muted", children: "*" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "qty",
          type: "number",
          inputMode: "decimal",
          value: quantity,
          onChange: (event) => setQuantity(event.target.value),
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              event.preventDefault();
              document.getElementById("cost")?.focus();
            }
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "qty-quick", id: "qty-quick", children: QUICK_QTY.map((value) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
        "button",
        {
          type: "button",
          className: "chip",
          "data-inc": value,
          onClick: () => setQuantity((prev) => String(toNumber2(prev) + value)),
          children: [
            "+",
            value
          ]
        },
        value
      )) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("label", { htmlFor: "cost", children: [
        t("op.cost") || "\u0421\u0442\u043E\u0438\u043C\u043E\u0441\u0442\u044C",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "muted", children: "*" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "cost",
          type: "number",
          inputMode: "decimal",
          value: cost,
          onChange: (event) => setCost(event.target.value),
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              event.preventDefault();
              document.getElementById("price")?.focus();
            }
          }
        }
      ),
      lpcLabel && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "button",
        {
          type: "button",
          id: "cost-hint",
          className: "btn secondary",
          onClick: () => setCost(String(picked.last_purchase_cost)),
          children: lpcLabel
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { htmlFor: "price", children: t("op.price") || "\u0426\u0435\u043D\u0430" }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "price",
          type: "number",
          inputMode: "decimal",
          value: price,
          onChange: (event) => setPrice(event.target.value),
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              event.preventDefault();
              handleSubmit();
            }
          }
        }
      ),
      priceLabel && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "button",
        {
          type: "button",
          id: "price-hint",
          className: "btn secondary",
          onClick: () => setPrice(String(picked.price)),
          children: priceLabel
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "stack", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { htmlFor: "description", children: t("op.description") || "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435" }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          id: "description",
          type: "text",
          value: description,
          placeholder: t("op.description.placeholder") || "\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439 \u043A \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 (\u043D\u0435\u043E\u0431\u044F\u0437.)",
          onChange: (event) => setDescription(event.target.value)
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "page-actions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "button",
        {
          id: "btn-op-save",
          type: "button",
          className: "btn small",
          onClick: handleSubmit,
          disabled: saving,
          children: saving ? t("op.saving") || "\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435..." : t("common.save") || "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "button",
        {
          id: "btn-op-cancel",
          type: "button",
          className: "btn small ghost",
          onClick: () => navigate(`/doc/${docId}`),
          disabled: saving,
          children: t("common.cancel") || "\u041E\u0442\u043C\u0435\u043D\u0430"
        }
      )
    ] })
  ] });
}

// src/App.jsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
function Router2() {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(HashRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Routes, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(Route, { element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(AppLayout, {}), children: [
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { index: true, element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Navigate, { to: "/home", replace: true }) }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { path: "/home", element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(HomePage, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { path: "/docs", element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(DocsPage, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { path: "/doc/:id", element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(DocPage, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { path: "/doc/:id/op/new", element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(OpNewPage, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Route, { path: "*", element: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Navigate, { to: "/home", replace: true }) })
  ] }) }) });
}
function App() {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(AppProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(I18nProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ToastProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Router2, {}) }) }) });
}

// src/main.jsx
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var container = document.getElementById("root");
var root = (0, import_client.createRoot)(container);
root.render(
  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_react14.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(App, {}) })
);
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.23.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.30.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.30.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=app.js.map
